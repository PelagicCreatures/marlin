var App = (function (exports) {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getDefaultExportFromNamespaceIfPresent (n) {
		return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
	}

	function getDefaultExportFromNamespaceIfNotNamed (n) {
		return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
	}

	function getAugmentedNamespace(n) {
	  var f = n.default;
		if (typeof f == "function") {
			var a = function () {
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	/** Detect free variable `global` from Node.js. */

	var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	var _freeGlobal = freeGlobal$1;

	var freeGlobal = _freeGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$9 = freeGlobal || freeSelf || Function('return this')();

	var _root = root$9;

	var root$8 = _root;

	/** Built-in value references. */
	var Symbol$6 = root$8.Symbol;

	var _Symbol = Symbol$6;

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */

	function arrayMap$1(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	var _arrayMap = arrayMap$1;

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */

	var isArray$6 = Array.isArray;

	var isArray_1 = isArray$6;

	var Symbol$5 = _Symbol;

	/** Used for built-in method references. */
	var objectProto$e = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$b = objectProto$e.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$e.toString;

	/** Built-in value references. */
	var symToStringTag$1 = Symbol$5 ? Symbol$5.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag$1(value) {
	  var isOwn = hasOwnProperty$b.call(value, symToStringTag$1),
	      tag = value[symToStringTag$1];

	  try {
	    value[symToStringTag$1] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString$1.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag$1] = tag;
	    } else {
	      delete value[symToStringTag$1];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag$1;

	/** Used for built-in method references. */

	var objectProto$d = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto$d.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString$1(value) {
	  return nativeObjectToString.call(value);
	}

	var _objectToString = objectToString$1;

	var Symbol$4 = _Symbol,
	    getRawTag = _getRawTag,
	    objectToString = _objectToString;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol$4 ? Symbol$4.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag$5(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	var _baseGetTag = baseGetTag$5;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */

	function isObjectLike$7(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike$7;

	var baseGetTag$4 = _baseGetTag,
	    isObjectLike$6 = isObjectLike_1;

	/** `Object#toString` result references. */
	var symbolTag$3 = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol$2(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike$6(value) && baseGetTag$4(value) == symbolTag$3);
	}

	var isSymbol_1 = isSymbol$2;

	var Symbol$3 = _Symbol,
	    arrayMap = _arrayMap,
	    isArray$5 = isArray_1,
	    isSymbol$1 = isSymbol_1;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto$2 = Symbol$3 ? Symbol$3.prototype : undefined,
	    symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString$1(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray$5(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString$1) + '';
	  }
	  if (isSymbol$1(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	var _baseToString = baseToString$1;

	var baseToString = _baseToString;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString$7(value) {
	  return value == null ? '' : baseToString(value);
	}

	var toString_1 = toString$7;

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */

	function baseSlice$1(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	var _baseSlice = baseSlice$1;

	var baseSlice = _baseSlice;

	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */
	function castSlice$1(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return (!start && end >= length) ? array : baseSlice(array, start, end);
	}

	var _castSlice = castSlice$1;

	/** Used to compose unicode character classes. */

	var rsAstralRange$2 = '\\ud800-\\udfff',
	    rsComboMarksRange$3 = '\\u0300-\\u036f',
	    reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
	    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
	    rsVarRange$2 = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsZWJ$2 = '\\u200d';

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ$2 + rsAstralRange$2  + rsComboRange$3 + rsVarRange$2 + ']');

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode$2(string) {
	  return reHasUnicode.test(string);
	}

	var _hasUnicode = hasUnicode$2;

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */

	function asciiToArray$1(string) {
	  return string.split('');
	}

	var _asciiToArray = asciiToArray$1;

	/** Used to compose unicode character classes. */

	var rsAstralRange$1 = '\\ud800-\\udfff',
	    rsComboMarksRange$2 = '\\u0300-\\u036f',
	    reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
	    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
	    rsVarRange$1 = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange$1 + ']',
	    rsCombo$2 = '[' + rsComboRange$2 + ']',
	    rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
	    rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
	    rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsZWJ$1 = '\\u200d';

	/** Used to compose unicode regexes. */
	var reOptMod$1 = rsModifier$1 + '?',
	    rsOptVar$1 = '[' + rsVarRange$1 + ']?',
	    rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
	    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
	    rsSymbol = '(?:' + [rsNonAstral$1 + rsCombo$2 + '?', rsCombo$2, rsRegional$1, rsSurrPair$1, rsAstral].join('|') + ')';

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol + rsSeq$1, 'g');

	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function unicodeToArray$1(string) {
	  return string.match(reUnicode) || [];
	}

	var _unicodeToArray = unicodeToArray$1;

	var asciiToArray = _asciiToArray,
	    hasUnicode$1 = _hasUnicode,
	    unicodeToArray = _unicodeToArray;

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function stringToArray$1(string) {
	  return hasUnicode$1(string)
	    ? unicodeToArray(string)
	    : asciiToArray(string);
	}

	var _stringToArray = stringToArray$1;

	var castSlice = _castSlice,
	    hasUnicode = _hasUnicode,
	    stringToArray = _stringToArray,
	    toString$6 = toString_1;

	/**
	 * Creates a function like `_.lowerFirst`.
	 *
	 * @private
	 * @param {string} methodName The name of the `String` case method to use.
	 * @returns {Function} Returns the new case function.
	 */
	function createCaseFirst$1(methodName) {
	  return function(string) {
	    string = toString$6(string);

	    var strSymbols = hasUnicode(string)
	      ? stringToArray(string)
	      : undefined;

	    var chr = strSymbols
	      ? strSymbols[0]
	      : string.charAt(0);

	    var trailing = strSymbols
	      ? castSlice(strSymbols, 1).join('')
	      : string.slice(1);

	    return chr[methodName]() + trailing;
	  };
	}

	var _createCaseFirst = createCaseFirst$1;

	var createCaseFirst = _createCaseFirst;

	/**
	 * Converts the first character of `string` to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.upperFirst('fred');
	 * // => 'Fred'
	 *
	 * _.upperFirst('FRED');
	 * // => 'FRED'
	 */
	var upperFirst$1 = createCaseFirst('toUpperCase');

	var upperFirst_1 = upperFirst$1;

	var toString$5 = toString_1,
	    upperFirst = upperFirst_1;

	/**
	 * Converts the first character of `string` to upper case and the remaining
	 * to lower case.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to capitalize.
	 * @returns {string} Returns the capitalized string.
	 * @example
	 *
	 * _.capitalize('FRED');
	 * // => 'Fred'
	 */
	function capitalize$1(string) {
	  return upperFirst(toString$5(string).toLowerCase());
	}

	var capitalize_1 = capitalize$1;

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */

	function arrayReduce$1(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	var _arrayReduce = arrayReduce$1;

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */

	function basePropertyOf$1(object) {
	  return function(key) {
	    return object == null ? undefined : object[key];
	  };
	}

	var _basePropertyOf = basePropertyOf$1;

	var basePropertyOf = _basePropertyOf;

	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	  '\xc7': 'C',  '\xe7': 'c',
	  '\xd0': 'D',  '\xf0': 'd',
	  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	  '\xd1': 'N',  '\xf1': 'n',
	  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	  '\xc6': 'Ae', '\xe6': 'ae',
	  '\xde': 'Th', '\xfe': 'th',
	  '\xdf': 'ss',
	  // Latin Extended-A block.
	  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	  '\u0134': 'J',  '\u0135': 'j',
	  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	  '\u0174': 'W',  '\u0175': 'w',
	  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	  '\u0132': 'IJ', '\u0133': 'ij',
	  '\u0152': 'Oe', '\u0153': 'oe',
	  '\u0149': "'n", '\u017f': 's'
	};

	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	var deburrLetter$1 = basePropertyOf(deburredLetters);

	var _deburrLetter = deburrLetter$1;

	var deburrLetter = _deburrLetter,
	    toString$4 = toString_1;

	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	/** Used to compose unicode character classes. */
	var rsComboMarksRange$1 = '\\u0300-\\u036f',
	    reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
	    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;

	/** Used to compose unicode capture groups. */
	var rsCombo$1 = '[' + rsComboRange$1 + ']';

	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */
	var reComboMark = RegExp(rsCombo$1, 'g');

	/**
	 * Deburrs `string` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr$1(string) {
	  string = toString$4(string);
	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	}

	var deburr_1 = deburr$1;

	/** Used to match words composed of alphanumeric characters. */

	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function asciiWords$1(string) {
	  return string.match(reAsciiWord) || [];
	}

	var _asciiWords = asciiWords$1;

	/** Used to detect strings that need a more robust regexp to match words. */

	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */
	function hasUnicodeWord$1(string) {
	  return reHasUnicodeWord.test(string);
	}

	var _hasUnicodeWord = hasUnicodeWord$1;

	/** Used to compose unicode character classes. */

	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsDingbatRange = '\\u2700-\\u27bf',
	    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	    rsPunctuationRange = '\\u2000-\\u206f',
	    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	    rsVarRange = '\\ufe0e\\ufe0f',
	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	/** Used to compose unicode capture groups. */
	var rsApos$1 = "['\u2019]",
	    rsBreak = '[' + rsBreakRange + ']',
	    rsCombo = '[' + rsComboRange + ']',
	    rsDigits = '\\d+',
	    rsDingbat = '[' + rsDingbatRange + ']',
	    rsLower = '[' + rsLowerRange + ']',
	    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsUpper = '[' + rsUpperRange + ']',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	    rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
	    rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
	    reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([
	  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	  rsUpper + '+' + rsOptContrUpper,
	  rsOrdUpper,
	  rsOrdLower,
	  rsDigits,
	  rsEmoji
	].join('|'), 'g');

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords$1(string) {
	  return string.match(reUnicodeWord) || [];
	}

	var _unicodeWords = unicodeWords$1;

	var asciiWords = _asciiWords,
	    hasUnicodeWord = _hasUnicodeWord,
	    toString$3 = toString_1,
	    unicodeWords = _unicodeWords;

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words$1(string, pattern, guard) {
	  string = toString$3(string);
	  pattern = guard ? undefined : pattern;

	  if (pattern === undefined) {
	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	  }
	  return string.match(pattern) || [];
	}

	var words_1 = words$1;

	var arrayReduce = _arrayReduce,
	    deburr = deburr_1,
	    words = words_1;

	/** Used to compose unicode capture groups. */
	var rsApos = "['\u2019]";

	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos, 'g');

	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder$2(callback) {
	  return function(string) {
	    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	  };
	}

	var _createCompounder = createCompounder$2;

	var capitalize = capitalize_1,
	    createCompounder$1 = _createCompounder;

	/**
	 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the camel cased string.
	 * @example
	 *
	 * _.camelCase('Foo Bar');
	 * // => 'fooBar'
	 *
	 * _.camelCase('--foo-bar--');
	 * // => 'fooBar'
	 *
	 * _.camelCase('__FOO_BAR__');
	 * // => 'fooBar'
	 */
	var camelCase = createCompounder$1(function(result, word, index) {
	  word = word.toLowerCase();
	  return result + (index ? capitalize(word) : word);
	});

	var camelCase_1 = camelCase;

	const validators = {};

	const setValidator = (name, fn) => {
		validators[name] = fn;
	};

	setValidator('isDefined', (arg) => {
		return arg !== undefined
	});

	setValidator('isUnDefined', (arg) => {
		return arg === undefined
	});

	setValidator('isNull', (arg) => {
		return arg === null
	});

	setValidator('isElement', (arg) => {
		return arg && (arg instanceof Element || arg instanceof Window)
	});

	setValidator('isEventTarget', (arg) => {
		return arg && arg instanceof EventTarget
	});

	setValidator('isString', (arg) => {
		return arg && (typeof arg === 'string' || arg instanceof String)
	});

	setValidator('isArray', (arg) => {
		return arg && arg instanceof Array
	});

	setValidator('notEmpty', (arg) => {
		return arg instanceof Array ? arg.length !== 0 : arg !== ''
	});

	setValidator('isEmpty', (arg) => {
		return arg === undefined || !arg || (arg instanceof Array ? arg.length === 0 : arg === '')
	});

	setValidator('isObject', (arg) => {
		return arg && arg instanceof Object
	});

	setValidator('isFunction', (arg) => {
		return arg && typeof arg === 'function'
	});


	// tests is an array of validators which must be all evaluate to true
	// if top level element is an sub array then the sub array is evaluated as an 'or'
	// ['this','and',['either','or']]
	const validate = (param, arg, tests) => {
		// console.log(param, arg)
		const allOf = tests.map((test) => {
			if (test instanceof Array) {
				const anyOf = test.map((orTest) => {
					return validators[orTest] && validators[orTest](arg)
				});
				return anyOf.indexOf(true) !== -1
			}
			else {
				return validators[test] && validators[test](arg)
			}
		});

		if (allOf.indexOf(false) !== -1) {
			throw (new Error('call to ' + param + ' invalid value: ' + arg + ' ' + tests, +' ' + allOf))
		}
	};

	/**
		Utility routines for Sargasso classes

		@author Michael Rhodes (except where noted)
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020 Michael Rhodes
	**/

	const elementMetaData = new WeakMap();

	const hasClass = (element, cssClass) => {
		validate('hasClass element', element, ['isDefined', 'isElement']);
		validate('hasClass cssClass', cssClass, ['isDefined', 'notEmpty', 'isString']);
		const className = element.className || '';
		const classes = className.split(/\s+/);
		return classes.indexOf(cssClass) !== -1
	};

	// addClasses can be:
	// a string 'someclass'
	// a list delimited by comma or space 'class1 class3 class4'
	// an array ['class1','class2']
	const addClass = (element, addClasses) => {
		validate('addClass element', element, ['isDefined', 'isElement']);
		validate('addClass addClasses', addClasses, ['isDefined', 'notEmpty', ['isString', 'isArray']]);

		const className = element.className || '';
		const classes = className.split(/\s+/);

		if (!Array.isArray(addClasses)) {
			addClasses = addClasses.split(/[\s,]/);
		}

		addClasses.forEach((c) => {
			c = c.trim();
			if (classes.indexOf(c) === -1) {
				classes.push(c);
			}
		});

		element.className = classes.join(' ');
	};

	// removeClasses can be:
	// a string 'someclass'
	// a list delimited by comma or space 'class1 class3 class4'
	// an array ['class1','class2']
	const removeClass = (element, removeClasses) => {
		validate('removeClass element', element, ['isDefined', 'isElement']);
		validate('removeClass removeClasses', removeClasses, ['isDefined', 'notEmpty', ['isString', 'isArray']]);

		const className = element.className || '';
		const classes = className.split(/\s+/);

		if (!Array.isArray(removeClasses)) {
			removeClasses = removeClasses.split(/[\s,]/);
		}

		removeClasses.forEach((c) => {
			c = c.trim();
			if (classes.indexOf(c) !== -1) {
				classes.splice(classes.indexOf(c), 1);
			}
		});

		element.className = classes.join(' ');
	};

	const isVisible = (element) => {
		validate('isVisible element', element, ['isDefined', 'isElement']);

		return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length)
	};

	const inViewPort = (element, container = window) => {
		validate('inViewPort element', element, ['isDefined', 'isElement']);

		const rect = element.getBoundingClientRect();
		const visible = isVisible(element);
		const aboveTheTop = (rect.bottom < 0);
		let belowTheFold;

		if (container.self === window) {
			belowTheFold = (rect.top > (window.innerHeight || document.documentElement.clientHeight));
		}
		else {
			belowTheFold = (rect.top > container.clientHeight);
		}

		return (visible && !belowTheFold && !aboveTheTop)
	};

	/*
		element: element to apply to
		css: JSON object with properties in kebab-case or camelCase (or even in snake_case and seperate words)
	*/

	const css = (element, css) => {
		validate('css element', element, ['isDefined', 'isElement']);
		validate('css css', css, ['isDefined', ['isObject']]);

		for (const prop in css) {
			if (Object.prototype.hasOwnProperty.call(css, prop)) {
				const key = camelCase_1(prop);
				element.style[key] = css[prop] !== null ? css[prop] : null;
			}
		}
	};

	const setMetaData = (element, k, v) => {
		validate('setMetaData element', element, ['isDefined', 'isElement']);
		validate('setMetaData k', k, ['isDefined', 'isString']);
		validate('setMetaData v', v, [
			['isUnDefined', 'isNull', 'isString', 'isObject']
		]);
		const data = elementMetaData.get(element) || {};
		if (v) {
			data[k] = v;
		}
		else {
			delete data[k];
		}
		elementMetaData.set(element, data);
	};

	const getMetaData = (element, k) => {
		validate('getMetaData element', element, ['isDefined', 'isElement']);
		validate('getMetaData k', k, ['isDefined', 'isString']);

		const data = elementMetaData.get(element) || {};
		if (k) {
			return data[k]
		}
		else {
			return data
		}
	};

	const on = function (uid, container, events, selector, fn, options, once) {
		// selector is optional
		if (typeof selector === 'function') {
			once = options;
			options = fn;
			fn = selector;
			selector = undefined;
		}
		validate('on uid', uid, ['isDefined', 'notEmpty']);
		validate('on container', container, ['isDefined', 'isEventTarget']);
		validate('on events', events, ['isDefined', 'isString']);
		validate('on fn', fn, ['isDefined', 'isFunction']);
		validate('on selector', selector, [
			['isEmpty', 'isString']
		]);

		const k = 'on:' + uid + '-' + events + '-' + selector;

		if (getMetaData(container, k)) { // duplicate event handler.
			console.error('Error: Sargasso utils.on: duplicate event handler specification. %o %s', container, k);
			return
		}

		const handler = (e) => {
			if (once) {
				off(uid, container, events, selector);
			}

			if (!selector) {
				fn(e);
			}
			else {
				Array.from(container.querySelectorAll(selector)).forEach((el) => {
					if (e.target === el || el.contains(e.target)) {
						fn(e, el);
					}
				});
			}
		};

		// store handler spec in metadata so we can gracefully remove it later
		const data = {
			uid: uid,
			events: events,
			selector: selector || undefined,
			fn: handler,
			options: options || false
		};

		setMetaData(container, k, data);

		events.split(/[\s,]+/).forEach((evt) => {
			container.addEventListener(evt.trim(), data.fn, data.options);
		});
	};

	const off = function (uid, container, events, selector) {
		validate('off uid', uid, ['isDefined', 'notEmpty']);
		validate('off container', container, ['isDefined', 'isEventTarget']);
		validate('off events', events, ['isDefined', 'isString']);
		validate('off selector', selector, [
			['isEmpty', 'isString']
		]);

		const k = 'on:' + uid + '-' + events + '-' + selector;
		const data = getMetaData(container, k);
		if (data) {
			events.split(/[\s,]+/).forEach((evt) => {
				container.removeEventListener(evt.trim(), data.fn, data.options);
			});
			setMetaData(container, k);
		}
	};

	// remove all (on,once) event handlers for element
	const offAll = function (container) {
		validate('offAll container', container, ['isDefined', 'isEventTarget']);

		const data = elementMetaData.get(container) || {};
		const handlers = [];

		for (const k in data) {
			if (Object.prototype.hasOwnProperty.call(data, k)) {
				if (k.match(/^on:/)) {
					handlers.push(k);
				}
			}
		}

		handlers.forEach((k) => {
			off(data[k].uid, container, data[k].events, data[k].selector);
		});
	};

	const once = function (uid, container, events, selector, fn, options) {
		if (typeof selector === 'function') {
			options = fn;
			fn = selector;
			selector = undefined;
		}
		on(uid, container, events, selector, fn, options, true);
	};

	const elementTools = {
		hasClass: hasClass,
		addClass: addClass,
		removeClass: removeClass,
		isVisible: isVisible,
		inViewPort: inViewPort,
		setCSS: css,
		setMetaData: setMetaData,
		getMetaData: getMetaData,
		on: on,
		off: off,
		once: once,
		offAll: offAll
	};

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */

	function isObject$7(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	var isObject_1 = isObject$7;

	var root$7 = _root;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now$1 = function() {
	  return root$7.Date.now();
	};

	var now_1 = now$1;

	/** Used to match a single whitespace character. */

	var reWhitespace = /\s/;

	/**
	 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	 * character of `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the index of the last non-whitespace character.
	 */
	function trimmedEndIndex$1(string) {
	  var index = string.length;

	  while (index-- && reWhitespace.test(string.charAt(index))) {}
	  return index;
	}

	var _trimmedEndIndex = trimmedEndIndex$1;

	var trimmedEndIndex = _trimmedEndIndex;

	/** Used to match leading whitespace. */
	var reTrimStart = /^\s+/;

	/**
	 * The base implementation of `_.trim`.
	 *
	 * @private
	 * @param {string} string The string to trim.
	 * @returns {string} Returns the trimmed string.
	 */
	function baseTrim$1(string) {
	  return string
	    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
	    : string;
	}

	var _baseTrim = baseTrim$1;

	var baseTrim = _baseTrim,
	    isObject$6 = isObject_1,
	    isSymbol = isSymbol_1;

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber$1(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject$6(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject$6(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = baseTrim(value);
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	var toNumber_1 = toNumber$1;

	var isObject$5 = isObject_1,
	    now = now_1,
	    toNumber = toNumber_1;

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = toNumber(wait) || 0;
	  if (isObject$5(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        timeWaiting = wait - timeSinceLastCall;

	    return maxing
	      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	      : timeWaiting;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }

	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        clearTimeout(timerId);
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	var debounce_1 = debounce;

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */

	function listCacheClear$1() {
	  this.__data__ = [];
	  this.size = 0;
	}

	var _listCacheClear = listCacheClear$1;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */

	function eq$3(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	var eq_1 = eq$3;

	var eq$2 = eq_1;

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf$4(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq$2(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	var _assocIndexOf = assocIndexOf$4;

	var assocIndexOf$3 = _assocIndexOf;

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete$1(key) {
	  var data = this.__data__,
	      index = assocIndexOf$3(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	var _listCacheDelete = listCacheDelete$1;

	var assocIndexOf$2 = _assocIndexOf;

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet$1(key) {
	  var data = this.__data__,
	      index = assocIndexOf$2(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	var _listCacheGet = listCacheGet$1;

	var assocIndexOf$1 = _assocIndexOf;

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas$1(key) {
	  return assocIndexOf$1(this.__data__, key) > -1;
	}

	var _listCacheHas = listCacheHas$1;

	var assocIndexOf = _assocIndexOf;

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet$1(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	var _listCacheSet = listCacheSet$1;

	var listCacheClear = _listCacheClear,
	    listCacheDelete = _listCacheDelete,
	    listCacheGet = _listCacheGet,
	    listCacheHas = _listCacheHas,
	    listCacheSet = _listCacheSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache$4(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache$4.prototype.clear = listCacheClear;
	ListCache$4.prototype['delete'] = listCacheDelete;
	ListCache$4.prototype.get = listCacheGet;
	ListCache$4.prototype.has = listCacheHas;
	ListCache$4.prototype.set = listCacheSet;

	var _ListCache = ListCache$4;

	var ListCache$3 = _ListCache;

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear$1() {
	  this.__data__ = new ListCache$3;
	  this.size = 0;
	}

	var _stackClear = stackClear$1;

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */

	function stackDelete$1(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	var _stackDelete = stackDelete$1;

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */

	function stackGet$1(key) {
	  return this.__data__.get(key);
	}

	var _stackGet = stackGet$1;

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */

	function stackHas$1(key) {
	  return this.__data__.has(key);
	}

	var _stackHas = stackHas$1;

	var baseGetTag$3 = _baseGetTag,
	    isObject$4 = isObject_1;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag$2 = '[object Function]',
	    genTag$1 = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction$2(value) {
	  if (!isObject$4(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag$3(value);
	  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
	}

	var isFunction_1 = isFunction$2;

	var root$6 = _root;

	/** Used to detect overreaching core-js shims. */
	var coreJsData$1 = root$6['__core-js_shared__'];

	var _coreJsData = coreJsData$1;

	var coreJsData = _coreJsData;

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked$1(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	var _isMasked = isMasked$1;

	/** Used for built-in method references. */

	var funcProto$1 = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource$2(func) {
	  if (func != null) {
	    try {
	      return funcToString$1.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	var _toSource = toSource$2;

	var isFunction$1 = isFunction_1,
	    isMasked = _isMasked,
	    isObject$3 = isObject_1,
	    toSource$1 = _toSource;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto$c = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$a = objectProto$c.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty$a).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative$1(value) {
	  if (!isObject$3(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction$1(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource$1(value));
	}

	var _baseIsNative = baseIsNative$1;

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */

	function getValue$1(object, key) {
	  return object == null ? undefined : object[key];
	}

	var _getValue = getValue$1;

	var baseIsNative = _baseIsNative,
	    getValue = _getValue;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative$7(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	var _getNative = getNative$7;

	var getNative$6 = _getNative,
	    root$5 = _root;

	/* Built-in method references that are verified to be native. */
	var Map$4 = getNative$6(root$5, 'Map');

	var _Map = Map$4;

	var getNative$5 = _getNative;

	/* Built-in method references that are verified to be native. */
	var nativeCreate$4 = getNative$5(Object, 'create');

	var _nativeCreate = nativeCreate$4;

	var nativeCreate$3 = _nativeCreate;

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear$1() {
	  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
	  this.size = 0;
	}

	var _hashClear = hashClear$1;

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */

	function hashDelete$1(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _hashDelete = hashDelete$1;

	var nativeCreate$2 = _nativeCreate;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto$b = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet$1(key) {
	  var data = this.__data__;
	  if (nativeCreate$2) {
	    var result = data[key];
	    return result === HASH_UNDEFINED$2 ? undefined : result;
	  }
	  return hasOwnProperty$9.call(data, key) ? data[key] : undefined;
	}

	var _hashGet = hashGet$1;

	var nativeCreate$1 = _nativeCreate;

	/** Used for built-in method references. */
	var objectProto$a = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas$1(key) {
	  var data = this.__data__;
	  return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$8.call(data, key);
	}

	var _hashHas = hashHas$1;

	var nativeCreate = _nativeCreate;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet$1(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
	  return this;
	}

	var _hashSet = hashSet$1;

	var hashClear = _hashClear,
	    hashDelete = _hashDelete,
	    hashGet = _hashGet,
	    hashHas = _hashHas,
	    hashSet = _hashSet;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash$1(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash$1.prototype.clear = hashClear;
	Hash$1.prototype['delete'] = hashDelete;
	Hash$1.prototype.get = hashGet;
	Hash$1.prototype.has = hashHas;
	Hash$1.prototype.set = hashSet;

	var _Hash = Hash$1;

	var Hash = _Hash,
	    ListCache$2 = _ListCache,
	    Map$3 = _Map;

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear$1() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map$3 || ListCache$2),
	    'string': new Hash
	  };
	}

	var _mapCacheClear = mapCacheClear$1;

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */

	function isKeyable$1(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	var _isKeyable = isKeyable$1;

	var isKeyable = _isKeyable;

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData$4(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	var _getMapData = getMapData$4;

	var getMapData$3 = _getMapData;

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete$1(key) {
	  var result = getMapData$3(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _mapCacheDelete = mapCacheDelete$1;

	var getMapData$2 = _getMapData;

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet$1(key) {
	  return getMapData$2(this, key).get(key);
	}

	var _mapCacheGet = mapCacheGet$1;

	var getMapData$1 = _getMapData;

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas$1(key) {
	  return getMapData$1(this, key).has(key);
	}

	var _mapCacheHas = mapCacheHas$1;

	var getMapData = _getMapData;

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet$1(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	var _mapCacheSet = mapCacheSet$1;

	var mapCacheClear = _mapCacheClear,
	    mapCacheDelete = _mapCacheDelete,
	    mapCacheGet = _mapCacheGet,
	    mapCacheHas = _mapCacheHas,
	    mapCacheSet = _mapCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache$2(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache$2.prototype.clear = mapCacheClear;
	MapCache$2.prototype['delete'] = mapCacheDelete;
	MapCache$2.prototype.get = mapCacheGet;
	MapCache$2.prototype.has = mapCacheHas;
	MapCache$2.prototype.set = mapCacheSet;

	var _MapCache = MapCache$2;

	var ListCache$1 = _ListCache,
	    Map$2 = _Map,
	    MapCache$1 = _MapCache;

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet$1(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache$1) {
	    var pairs = data.__data__;
	    if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache$1(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	var _stackSet = stackSet$1;

	var ListCache = _ListCache,
	    stackClear = _stackClear,
	    stackDelete = _stackDelete,
	    stackGet = _stackGet,
	    stackHas = _stackHas,
	    stackSet = _stackSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack$2(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack$2.prototype.clear = stackClear;
	Stack$2.prototype['delete'] = stackDelete;
	Stack$2.prototype.get = stackGet;
	Stack$2.prototype.has = stackHas;
	Stack$2.prototype.set = stackSet;

	var _Stack = Stack$2;

	/** Used to stand-in for `undefined` hash values. */

	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd$1(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	var _setCacheAdd = setCacheAdd$1;

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */

	function setCacheHas$1(value) {
	  return this.__data__.has(value);
	}

	var _setCacheHas = setCacheHas$1;

	var MapCache = _MapCache,
	    setCacheAdd = _setCacheAdd,
	    setCacheHas = _setCacheHas;

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache$1(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
	SetCache$1.prototype.has = setCacheHas;

	var _SetCache = SetCache$1;

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */

	function arraySome$1(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	var _arraySome = arraySome$1;

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */

	function cacheHas$1(cache, key) {
	  return cache.has(key);
	}

	var _cacheHas = cacheHas$1;

	var SetCache = _SetCache,
	    arraySome = _arraySome,
	    cacheHas = _cacheHas;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$3 = 1,
	    COMPARE_UNORDERED_FLAG$1 = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Check that cyclic values are equal.
	  var arrStacked = stack.get(array);
	  var othStacked = stack.get(other);
	  if (arrStacked && othStacked) {
	    return arrStacked == other && othStacked == array;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG$1) ? new SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	var _equalArrays = equalArrays$2;

	var root$4 = _root;

	/** Built-in value references. */
	var Uint8Array$2 = root$4.Uint8Array;

	var _Uint8Array = Uint8Array$2;

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */

	function mapToArray$1(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	var _mapToArray = mapToArray$1;

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */

	function setToArray$1(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	var _setToArray = setToArray$1;

	var Symbol$2 = _Symbol,
	    Uint8Array$1 = _Uint8Array,
	    eq$1 = eq_1,
	    equalArrays$1 = _equalArrays,
	    mapToArray = _mapToArray,
	    setToArray = _setToArray;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$2 = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/** `Object#toString` result references. */
	var boolTag$3 = '[object Boolean]',
	    dateTag$3 = '[object Date]',
	    errorTag$2 = '[object Error]',
	    mapTag$5 = '[object Map]',
	    numberTag$3 = '[object Number]',
	    regexpTag$3 = '[object RegExp]',
	    setTag$5 = '[object Set]',
	    stringTag$3 = '[object String]',
	    symbolTag$2 = '[object Symbol]';

	var arrayBufferTag$3 = '[object ArrayBuffer]',
	    dataViewTag$4 = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,
	    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag$4:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag$3:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
	        return false;
	      }
	      return true;

	    case boolTag$3:
	    case dateTag$3:
	    case numberTag$3:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq$1(+object, +other);

	    case errorTag$2:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag$3:
	    case stringTag$3:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag$5:
	      var convert = mapToArray;

	    case setTag$5:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag$2:
	      if (symbolValueOf$1) {
	        return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
	      }
	  }
	  return false;
	}

	var _equalByTag = equalByTag$1;

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */

	function arrayPush$2(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	var _arrayPush = arrayPush$2;

	var arrayPush$1 = _arrayPush,
	    isArray$4 = isArray_1;

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray$4(object) ? result : arrayPush$1(result, symbolsFunc(object));
	}

	var _baseGetAllKeys = baseGetAllKeys$2;

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */

	function arrayFilter$1(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	var _arrayFilter = arrayFilter$1;

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */

	function stubArray$2() {
	  return [];
	}

	var stubArray_1 = stubArray$2;

	var arrayFilter = _arrayFilter,
	    stubArray$1 = stubArray_1;

	/** Used for built-in method references. */
	var objectProto$9 = Object.prototype;

	/** Built-in value references. */
	var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
	    return propertyIsEnumerable$1.call(object, symbol);
	  });
	};

	var _getSymbols = getSymbols$3;

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */

	function baseTimes$1(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	var _baseTimes = baseTimes$1;

	var baseGetTag$2 = _baseGetTag,
	    isObjectLike$5 = isObjectLike_1;

	/** `Object#toString` result references. */
	var argsTag$3 = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments$1(value) {
	  return isObjectLike$5(value) && baseGetTag$2(value) == argsTag$3;
	}

	var _baseIsArguments = baseIsArguments$1;

	var baseIsArguments = _baseIsArguments,
	    isObjectLike$4 = isObjectLike_1;

	/** Used for built-in method references. */
	var objectProto$8 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto$8.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments$1 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike$4(value) && hasOwnProperty$7.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};

	var isArguments_1 = isArguments$1;

	var isBuffer$3 = {exports: {}};

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */

	function stubFalse() {
	  return false;
	}

	var stubFalse_1 = stubFalse;

	(function (module, exports) {
		var root = _root,
		    stubFalse = stubFalse_1;

		/** Detect free variable `exports`. */
		var freeExports = 'object' == 'object' && exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Built-in value references. */
		var Buffer = moduleExports ? root.Buffer : undefined;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

		/**
		 * Checks if `value` is a buffer.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		 * @example
		 *
		 * _.isBuffer(new Buffer(2));
		 * // => true
		 *
		 * _.isBuffer(new Uint8Array(2));
		 * // => false
		 */
		var isBuffer = nativeIsBuffer || stubFalse;

		module.exports = isBuffer;
	} (isBuffer$3, isBuffer$3.exports));

	var isBuffer_1 = isBuffer$3.exports;

	/** Used as references for various `Number` constants. */

	var MAX_SAFE_INTEGER$1 = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex$1(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER$1 : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	var _isIndex = isIndex$1;

	/** Used as references for various `Number` constants. */

	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength$4(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	var isLength_1 = isLength$4;

	var baseGetTag$1 = _baseGetTag,
	    isLength$3 = isLength_1,
	    isObjectLike$3 = isObjectLike_1;

	/** `Object#toString` result references. */
	var argsTag$2 = '[object Arguments]',
	    arrayTag$2 = '[object Array]',
	    boolTag$2 = '[object Boolean]',
	    dateTag$2 = '[object Date]',
	    errorTag$1 = '[object Error]',
	    funcTag$1 = '[object Function]',
	    mapTag$4 = '[object Map]',
	    numberTag$2 = '[object Number]',
	    objectTag$3 = '[object Object]',
	    regexpTag$2 = '[object RegExp]',
	    setTag$4 = '[object Set]',
	    stringTag$2 = '[object String]',
	    weakMapTag$2 = '[object WeakMap]';

	var arrayBufferTag$2 = '[object ArrayBuffer]',
	    dataViewTag$3 = '[object DataView]',
	    float32Tag$2 = '[object Float32Array]',
	    float64Tag$2 = '[object Float64Array]',
	    int8Tag$2 = '[object Int8Array]',
	    int16Tag$2 = '[object Int16Array]',
	    int32Tag$2 = '[object Int32Array]',
	    uint8Tag$2 = '[object Uint8Array]',
	    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
	    uint16Tag$2 = '[object Uint16Array]',
	    uint32Tag$2 = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
	typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
	typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
	typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
	typedArrayTags[uint32Tag$2] = true;
	typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
	typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] =
	typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] =
	typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] =
	typedArrayTags[mapTag$4] = typedArrayTags[numberTag$2] =
	typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$2] =
	typedArrayTags[setTag$4] = typedArrayTags[stringTag$2] =
	typedArrayTags[weakMapTag$2] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray$1(value) {
	  return isObjectLike$3(value) &&
	    isLength$3(value.length) && !!typedArrayTags[baseGetTag$1(value)];
	}

	var _baseIsTypedArray = baseIsTypedArray$1;

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */

	function baseUnary$3(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	var _baseUnary = baseUnary$3;

	var _nodeUtil$1 = {exports: {}};

	(function (module, exports) {
		var freeGlobal = _freeGlobal;

		/** Detect free variable `exports`. */
		var freeExports = 'object' == 'object' && exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Detect free variable `process` from Node.js. */
		var freeProcess = moduleExports && freeGlobal.process;

		/** Used to access faster Node.js helpers. */
		var nodeUtil = (function() {
		  try {
		    // Use `util.types` for Node.js 10+.
		    var types = freeModule && freeModule.require && freeModule.require('util').types;

		    if (types) {
		      return types;
		    }

		    // Legacy `process.binding('util')` for Node.js < 10.
		    return freeProcess && freeProcess.binding && freeProcess.binding('util');
		  } catch (e) {}
		}());

		module.exports = nodeUtil;
	} (_nodeUtil$1, _nodeUtil$1.exports));

	var _nodeUtil = _nodeUtil$1.exports;

	var baseIsTypedArray = _baseIsTypedArray,
	    baseUnary$2 = _baseUnary,
	    nodeUtil$2 = _nodeUtil$1.exports;

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray$2 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;

	var isTypedArray_1 = isTypedArray$2;

	var baseTimes = _baseTimes,
	    isArguments = isArguments_1,
	    isArray$3 = isArray_1,
	    isBuffer$2 = isBuffer$3.exports,
	    isIndex = _isIndex,
	    isTypedArray$1 = isTypedArray_1;

	/** Used for built-in method references. */
	var objectProto$7 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys$2(value, inherited) {
	  var isArr = isArray$3(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer$2(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty$6.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _arrayLikeKeys = arrayLikeKeys$2;

	/** Used for built-in method references. */

	var objectProto$6 = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype$3(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$6;

	  return value === proto;
	}

	var _isPrototype = isPrototype$3;

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */

	function overArg$2(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	var _overArg = overArg$2;

	var overArg$1 = _overArg;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys$1 = overArg$1(Object.keys, Object);

	var _nativeKeys = nativeKeys$1;

	var isPrototype$2 = _isPrototype,
	    nativeKeys = _nativeKeys;

	/** Used for built-in method references. */
	var objectProto$5 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$5 = objectProto$5.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys$1(object) {
	  if (!isPrototype$2(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty$5.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _baseKeys = baseKeys$1;

	var isFunction = isFunction_1,
	    isLength$2 = isLength_1;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike$3(value) {
	  return value != null && isLength$2(value.length) && !isFunction(value);
	}

	var isArrayLike_1 = isArrayLike$3;

	var arrayLikeKeys$1 = _arrayLikeKeys,
	    baseKeys = _baseKeys,
	    isArrayLike$2 = isArrayLike_1;

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys$4(object) {
	  return isArrayLike$2(object) ? arrayLikeKeys$1(object) : baseKeys(object);
	}

	var keys_1 = keys$4;

	var baseGetAllKeys$1 = _baseGetAllKeys,
	    getSymbols$2 = _getSymbols,
	    keys$3 = keys_1;

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys$2(object) {
	  return baseGetAllKeys$1(object, keys$3, getSymbols$2);
	}

	var _getAllKeys = getAllKeys$2;

	var getAllKeys$1 = _getAllKeys;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$1 = 1;

	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1,
	      objProps = getAllKeys$1(object),
	      objLength = objProps.length,
	      othProps = getAllKeys$1(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty$4.call(other, key))) {
	      return false;
	    }
	  }
	  // Check that cyclic values are equal.
	  var objStacked = stack.get(object);
	  var othStacked = stack.get(other);
	  if (objStacked && othStacked) {
	    return objStacked == other && othStacked == object;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	var _equalObjects = equalObjects$1;

	var getNative$4 = _getNative,
	    root$3 = _root;

	/* Built-in method references that are verified to be native. */
	var DataView$1 = getNative$4(root$3, 'DataView');

	var _DataView = DataView$1;

	var getNative$3 = _getNative,
	    root$2 = _root;

	/* Built-in method references that are verified to be native. */
	var Promise$2 = getNative$3(root$2, 'Promise');

	var _Promise = Promise$2;

	var getNative$2 = _getNative,
	    root$1 = _root;

	/* Built-in method references that are verified to be native. */
	var Set$2 = getNative$2(root$1, 'Set');

	var _Set = Set$2;

	var getNative$1 = _getNative,
	    root = _root;

	/* Built-in method references that are verified to be native. */
	var WeakMap$2 = getNative$1(root, 'WeakMap');

	var _WeakMap = WeakMap$2;

	var DataView = _DataView,
	    Map$1 = _Map,
	    Promise$1 = _Promise,
	    Set$1 = _Set,
	    WeakMap$1 = _WeakMap,
	    baseGetTag = _baseGetTag,
	    toSource = _toSource;

	/** `Object#toString` result references. */
	var mapTag$3 = '[object Map]',
	    objectTag$2 = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag$3 = '[object Set]',
	    weakMapTag$1 = '[object WeakMap]';

	var dataViewTag$2 = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map$1),
	    promiseCtorString = toSource(Promise$1),
	    setCtorString = toSource(Set$1),
	    weakMapCtorString = toSource(WeakMap$1);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag$4 = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((DataView && getTag$4(new DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
	    (Map$1 && getTag$4(new Map$1) != mapTag$3) ||
	    (Promise$1 && getTag$4(Promise$1.resolve()) != promiseTag) ||
	    (Set$1 && getTag$4(new Set$1) != setTag$3) ||
	    (WeakMap$1 && getTag$4(new WeakMap$1) != weakMapTag$1)) {
	  getTag$4 = function(value) {
	    var result = baseGetTag(value),
	        Ctor = result == objectTag$2 ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag$2;
	        case mapCtorString: return mapTag$3;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag$3;
	        case weakMapCtorString: return weakMapTag$1;
	      }
	    }
	    return result;
	  };
	}

	var _getTag = getTag$4;

	var Stack$1 = _Stack,
	    equalArrays = _equalArrays,
	    equalByTag = _equalByTag,
	    equalObjects = _equalObjects,
	    getTag$3 = _getTag,
	    isArray$2 = isArray_1,
	    isBuffer$1 = isBuffer$3.exports,
	    isTypedArray = isTypedArray_1;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** `Object#toString` result references. */
	var argsTag$1 = '[object Arguments]',
	    arrayTag$1 = '[object Array]',
	    objectTag$1 = '[object Object]';

	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray$2(object),
	      othIsArr = isArray$2(other),
	      objTag = objIsArr ? arrayTag$1 : getTag$3(object),
	      othTag = othIsArr ? arrayTag$1 : getTag$3(other);

	  objTag = objTag == argsTag$1 ? objectTag$1 : objTag;
	  othTag = othTag == argsTag$1 ? objectTag$1 : othTag;

	  var objIsObj = objTag == objectTag$1,
	      othIsObj = othTag == objectTag$1,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer$1(object)) {
	    if (!isBuffer$1(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack$1);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty$3.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty$3.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack$1);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack$1);
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	var _baseIsEqualDeep = baseIsEqualDeep$1;

	var baseIsEqualDeep = _baseIsEqualDeep,
	    isObjectLike$2 = isObjectLike_1;

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual$1(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObjectLike$2(value) && !isObjectLike$2(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$1, stack);
	}

	var _baseIsEqual = baseIsEqual$1;

	var baseIsEqual = _baseIsEqual;

	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are compared by strict equality, i.e. `===`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */
	function isEqual(value, other) {
	  return baseIsEqual(value, other);
	}

	var isEqual_1 = isEqual;

	/*
		build Proxy to observe changes to object properties
		*/

	const registeredObservables = {};
	const getObservable = (id) => {
		return registeredObservables[id]
	};

	const buildProxy = (self) => {
		return {
			get (target, property) {
				const val = Reflect.get(target, property);
				if (val && typeof val === 'object') return new Proxy(val, buildProxy(self))
				return val
			},
			set (target, property, value) {
				self.sync(property);
				return Reflect.set(target, property, value)
			},
			deleteProperty (target, property) {
				self.sync(property);
				return Reflect.deleteProperty(target, property)
			}
		}
	};

	/*
		@class ObservableObject

		Base class for data binding. Implements Proxy and Reflect on an object so that
		changes can be observed and manages subscribing and notifying observers.

		*/
	class ObservableObject {
		/*
			@param { String } id - unique id of
			@param { Object } data - optional externally defined javascript object to observe
			@param { Object } options - optional, used by subclasses
			*/
		constructor (id, data = {}, options = {}) {
			this.id = id;

			if (registeredObservables[this.id]) {
				throw (new Error('ObservableObject ' + id + ' already exists.'))
			}

			this.bound = {}; // watchers to sync on value change

			this.data = new Proxy(data, buildProxy(this));

			this.options = options;

			registeredObservables[this.id] = this;
		}

		/*
			@function destroy - remove all bindings
			*/
		destroy () {
			delete registeredObservables[this.id];
			delete this.data;
			Object.keys(this.bound).forEach((prop) => {
				Object.keys(this.bound[prop]).forEach((id) => {
					this.unbind(id, prop);
				});
			});
		}

		/*
			@function getBoundData - return object being observed
			*/
		getBoundData () {
			return this.data
		}

		/*
			@function set - set observed object property
			@param { String } property - observed object property to set
			@param value - string, array, object or whatever to assign to property
			*/
		set (property, value) {
			if (!isEqual_1(this.get(property), value)) {
				this.data[property] = value;
			}
		}

		/*
			@function get - get observed object property
			@param { String } property - observed object property to get
			*/
		get (property) {
			return this.data[property]
		}

		/*
			@function delete - delete observed object property
			@param { String } property - observed object property to delete
			*/
		delete (property) {
			delete this.data[property];
		}

		/*
			@function syncAll - sync all observed object properties
			*/
		syncAll () {
			Object.keys(this.data || {}).forEach((k) => {
				this.sync(k);
			});
		}

		/*
			@function bind - attach a function to observe property changes
			@param { String } id - unique id of observer function
			@param { Function } fn - handler called when property changes
			@param { String } property - optional name of property to observe

			Handler function prototype:

			If property is not supplied, callback receives property and value
			(property, value) => {}

			Otherwise just the value is supplied
			(value) => {}
			*/
		bind (id, fn, property = '*') {
			if (!this.bound[property]) {
				this.bound[property] = {};
			}
			this.bound[property][id] = fn;
			Object.keys(this.data).forEach((k) => {
				fn(this.id, k, this.get(k));
			});
		}

		/*
			@function unbind - unattach observer
			@param { String } id - unique id of observer function
			@param { String } property - optional name of property being observed
			*/
		unbind (id, property = '*') {
			if (this.bound[property] && this.bound[property][id]) {
				delete this.bound[property][id];
			}
		}

		/*
			function sync - notify observers of property value change
			@param { String } property - property that changed
			*/
		sync (property) {
			Object.keys(this.bound['*'] || {}).forEach((k) => {
				this.bound['*'][k](this.id, property, this.get(property));
			});
			Object.keys(this.bound[property] || {}).forEach((k) => {
				this.bound[property][k](this.id, property, this.get(property));
			});
		}
	}

	/**
		Shared event observers used by Sargasso classes.

		When these observers have subscribers they watch for events
		and notify the subscriber's specific event handler
		method when they occur.

		@author Michael Rhodes (except where noted)
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020 Michael Rhodes

		Subscribers to these services must imlement handler methods
		EG. watchDOM, watchScroll, watchResize, watchOrientation
	**/

	let theDOMWatcher;
	let theScrollWatcher;
	let theResizeWatcher;
	let theOrientationWatcher;
	let theWorkerWatcher;
	let theObservableObjectWatcher;

	class ObserverSubscriptionManager {
		constructor (options) {
			this.options = options;
			this.observers = [];
			this.pendingAnimationFrame = undefined;
			this.frameQueue = [];
			this.sleeping = true;
		}

		subscribe (observer) {
			if (!this.observers.length && this.sleeping) {
				this.wakeup();
			}
			this.observers.push(observer);
		}

		unSubscribe (observer) {
			if (this.observers.indexOf(observer) !== -1) {
				this.observers.splice(this.observers.indexOf(observer), 1);
			}

			if (!this.observers.length) {
				this.sleep();
			}
		}

		sleep () {
			this.sleeping = true;
		}

		wakeup () {
			this.sleeping = false;
		}

		notifyObservers (event, params) {
			for (let i = 0; i < this.observers.length; i++) {
				if (this.observers[i][event]) {
					this.observers[i][event].apply(this.observers[i], params || []);
				}
			}
		}

		flushQueue () {
			if (this.pendingAnimationFrame) {
				cancelAnimationFrame(this.pendingAnimationFrame);
				this.pendingAnimationFrame = undefined;
			}
			this.frameQueue = [];
		}

		queueFrame (frame) {
			this.frameQueue.push(frame.bind(this));
			if (!this.pendingAnimationFrame) {
				this.pendingAnimationFrame = requestAnimationFrame(() => {
					this.processQueue();
				});
			}
		}

		processQueue () {
			this.pendingAnimationFrame = undefined;
			const toProcess = this.frameQueue.slice(0);
			this.frameQueue = [];
			for (let i = 0; i < toProcess.length; i++) {
				toProcess[i]();
			}
		}
	}

	class DOMWatcher extends ObserverSubscriptionManager {
		constructor (options = {}) {
			super(options);

			// debounce - just need to know if a change occured, not every change
			this.mutationHandler = debounce_1((mutations, observer) => {
				this.observeDOM(this.options.shadowDOM || document.body);
			}, 25, {
				maxWait: 100
			});

			this.mutationObserver = new MutationObserver(this.mutationHandler, false);
		}

		subscribe (observer) {
			super.subscribe(observer);
			observer.watchDOM(this.options.shadowDOM || document.body);
		}

		wakeup () {
			super.wakeup();
			this.mutationObserver.observe(this.options.shadowDOM || document.body, {
				childList: true,
				subtree: true
			});
		}

		sleep () {
			super.sleep();
			this.mutationObserver.disconnect();
		}

		observeDOM (root) {
			this.notifyObservers('watchDOM', [root || this.options.shadowDOM || document.body]);
		}
	}

	class ScrollWatcher extends ObserverSubscriptionManager {
		constructor (options = {}) {
			super(options);

			this.scrollElement = this.options.scrollElement || window;
			this.lastscroll = 0;
			this.scrolling = false;
		}

		// use 'scroll' event to start scroll loop unless it's already looping
		trigger () {
			if (!this.scrolling) {
				this.scrollLoop();
			}
		}

		scrollLoop () {
			if (this.lastscroll !== this.scrollTop()) { // are we still scrolling?
				this.scrolling = true;
				this.lastscroll = this.scrollTop();
				this.watchScroll(); // tell our observers
				const frame = () => {
					this.scrollLoop();
				};
				this.queueFrame(frame);
			} else {
				this.scrolling = false; // exit the scroll loop and wait for next 'scroll' event
			}
		}

		setOptions (options = {}) {
			this.sleep();
			this.scrollElement = options.scrollElement || window;
			this.wakeup();
		}

		subscribe (observer) {
			super.subscribe(observer);
			observer.watchScroll();
		}

		wakeup () {
			super.wakeup();
			elementTools.on('theScrollWatcher', this.scrollElement, 'scroll', () => {
				this.trigger();
			});
		}

		sleep () {
			super.sleep();
			elementTools.off('theScrollWatcher', this.scrollElement, 'scroll');
		}

		inViewPort (element) {
			return elementTools.inViewPort(element, this.scrollElement)
		}

		watchScroll () {
			this.notifyObservers('watchScroll');
		}

		scrollTop (newTop) {
			if (this.scrollElement === window) {
				if (newTop !== undefined) {
					window.scrollTo(0, newTop);
				} else {
					return window.pageYOffset
				}
			} else {
				if (newTop !== undefined) {
					this.scrollElement.scrollTop = newTop;
				} else {
					return this.scrollElement.scrollTop
				}
			}
		}
	}

	class ResizeWatcher extends ObserverSubscriptionManager {
		constructor (options) {
			super(options);

			this.debounce = debounce_1(() => {
				this.watchResize();
			}, 250);
		}

		subscribe (observer) {
			super.subscribe(observer);
			observer.watchResize();
		}

		wakeup () {
			super.wakeup();
			window.addEventListener('resize', this.debounce, false);
		}

		sleep () {
			super.sleep();
			window.removeEventListener('resize', this.debounce);
		}

		watchResize () {
			this.notifyObservers('watchResize');
		}
	}

	class OrientationWatcher extends ObserverSubscriptionManager {
		constructor (options) {
			super(options);

			if ('onorientationchange' in window) {
				elementTools.addClass(document.body, 'have-orientation');
			} else {
				elementTools.addClass(document.body, 'no-orientation');
			}

			this.debounce = debounce_1(() => {
				this.watchOrientation();
			}, 250);
		}

		subscribe (observer) {
			super.subscribe(observer);
			observer.watchOrientation();
		}

		wakeup () {
			super.wakeup();
			if ('onorientationchange' in window) {
				window.addEventListener('orientationchange', this.debounce, false);
			}
		}

		sleep () {
			super.sleep();
			if ('onorientationchange' in window) {
				window.removeEventListener('orientationchange', this.debounce);
			}
		}

		watchOrientation () {
			this.notifyObservers('watchOrientation');
		}
	}

	// keep track of who is using web workers and
	// cleanup dangling worker when no subscribers remain
	class WorkerWatcher extends ObserverSubscriptionManager {
		constructor (options) {
			super(options);
			this.workers = {};
		}

		registerWorker (id, codeOrURL) {
			if (!this.workers[id]) {
				// create a worker for the id if worker id is unknown

				let blobURL = codeOrURL;

				let revoke = false;
				if (!codeOrURL.match(/^(http|\/)/i)) {
					const blob = new Blob([codeOrURL], {
						type: 'text/javascript'
					});
					blobURL = URL.createObjectURL(blob);
					revoke = true;
				}

				this.workers[id] = {
					worker: new Worker(blobURL),
					observers: []
				};

				if (revoke) {
					URL.revokeObjectURL(blobURL);
				}

				this.workers[id].worker.onmessage = (e) => {
					this.workerMessage(id, e);
				};
			}

			return this.workers[id].worker
		}

		subscribe (observer, id) {
			if (!this.workers[id]) {
				throw (new Error('worker ' + id + ' does not exist'))
			}
			const workerObservers = this.workers[id].observers;
			workerObservers.push(observer);
			super.subscribe(observer);
		}

		unSubscribe (observer, id) {
			if (!this.workers[id]) {
				throw (new Error('worker ' + id + ' does not exist'))
			}

			const workerObservers = this.workers[id].observers;
			if (workerObservers.indexOf(observer) !== -1) {
				workerObservers.splice(workerObservers.indexOf(observer), 1);
			}

			if (!workerObservers.length) {
				this.workers[id].worker.terminate();
				delete this.workers[id];
			}

			super.unSubscribe(observer);
		}

		workerMessage (id, e) {
			const workerObservers = this.workers[id].observers;
			workerObservers.forEach((observer) => {
				if (observer.workerMessage) {
					observer.workerMessage(id, e);
				}
			});
		}

		wakeup () {
			super.wakeup();
		}

		sleep () {
			super.sleep();
		}
	}

	class ObservableObjectWatcher extends ObserverSubscriptionManager {
		constructor (options) {
			super(options);
			this.registeredObservableObjects = {};
		}

		getObservable (id) {
			return this.registeredObservableObjects[id] ? this.registeredObservableObjects[id].observable : undefined
		}

		observableStart (id, data) {
			const foundObservable = getObservable(id);

			// trying to define with data but already exists
			if (foundObservable && data !== undefined) {
				throw (new Error('ObservableObject ' + id + ' already exists, can\'t build.'))
			}

			if (!this.registeredObservableObjects[id]) { // not already managing observable
				if (foundObservable) { // add to service
					this.registeredObservableObjects[id] = {
						id: id,
						observable: foundObservable,
						observers: [],
						managed: false
					};
				} else { // make it
					this.registeredObservableObjects[id] = {
						id: id,
						observable: new ObservableObject(id, data),
						observers: [],
						managed: true
					};
				}
				this.registeredObservableObjects[id].observable.bind(this.constructor.name, this.notify.bind(this));
			}

			return this.registeredObservableObjects[id].observable
		}

		// delete an observable
		observableDestroy (id) {
			if (!this.registeredObservableObjects[id]) {
				throw (new Error('ObservableObject observableDestroy ' + id + ' does not exist'))
			}
			this.registeredObservableObjects[id].observable.unbind(this.constructor.name);
			this.registeredObservableObjects[id].observable.destroy();
			delete this.registeredObservableObjects[id];
		}

		subscribe (observer, id, data) {
			if (!this.registeredObservableObjects[id]) {
				this.observableStart(id, data);
			}
			this.registeredObservableObjects[id].observers.push(observer);
			super.subscribe(observer);
		}

		unSubscribe (observer, id) {
			if (!this.registeredObservableObjects[id]) {
				throw (new Error('ObservableObject unSubscribe ' + id + ' does not exist'))
			}

			const observers = this.registeredObservableObjects[id].observers;
			if (observers.indexOf(observer) !== -1) {
				observers.splice(observers.indexOf(observer), 1);
			}

			if (!observers.length && this.registeredObservableObjects[id].managed) {
				this.observableDestroy(id);
			}

			super.unSubscribe(observer);
		}

		notify (id, property, value, source) {
			if (!this.registeredObservableObjects[id]) {
				throw (new Error('ObservableObject notify ' + id + ' does not exist'))
			}
			const observers = this.registeredObservableObjects[id].observers;
			observers.forEach((observer) => {
				if (observer.observableChanged) {
					observer.observableChanged(id, property, value, source);
				}
			});
		}
	}

	// build subscription services

	theDOMWatcher = new DOMWatcher();
	theScrollWatcher = new ScrollWatcher();
	theResizeWatcher = new ResizeWatcher();
	theOrientationWatcher = new OrientationWatcher();
	theWorkerWatcher = new WorkerWatcher();
	theObservableObjectWatcher = new ObservableObjectWatcher();

	var createCompounder = _createCompounder;

	/**
	 * Converts `string` to
	 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the kebab cased string.
	 * @example
	 *
	 * _.kebabCase('Foo Bar');
	 * // => 'foo-bar'
	 *
	 * _.kebabCase('fooBar');
	 * // => 'foo-bar'
	 *
	 * _.kebabCase('__FOO_BAR__');
	 * // => 'foo-bar'
	 */
	var kebabCase = createCompounder(function(result, word, index) {
	  return result + (index ? '-' : '') + word.toLowerCase();
	});

	var kebabCase_1 = kebabCase;

	/**
		Sargasso

		Base class for responsive Sargasso element controllers. Subclass this to
		define specific behavior. If you mutate the DOM in your code you
		should use frames for best results.

		@author Michael Rhodes (except where noted)
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020 Michael Rhodes
	**/

	let unique = 0; // unique IDs for controllers
	const liveElements = []; // instantiated controllers

	const supportsCustomElements = ('customElements' in window); // browser supports custom elements

	const registeredClasses = {};

	/*
		@function registerSargassoClass
		@param { String } className - name of class
		@param { Object } object - class reference

		All subclasses of Sargasso must register the class so that
		the SargassoSupervisor can instantiate them.

		EG.
			class mySubclass extends Sargasso {}
			registerSargassoClass('mySubclass',mySubclass)

		Then an instance of mySubclass will be instantiated and attached to the element
		whenever it appears in the DOM usind data tag or custom element tag:

			<div data-sargasso-class="mySubclass"></div>

			- or -

			<sargasso-my-subclass></sargasso-my-subclass>

		*/
	const registerSargassoClass = (className, object) => {
		if (registeredClasses[className]) {
			throw (new Error('Sargasso class ' + className + ' is already registered.'))
		}

		registeredClasses[className] = object;

		if (supportsCustomElements) {
			/*
				for custom html element scheme <sargasso-class-name sargasso-other-class-name></sargasso-class-name>
				we define a factory to build a class that is a subclass of HTMLElement.
				The browser will instantiate this class when the element appears in the DOM
				allowing us to instantiate the required sargasso controller
				and cleanup when the html element is removed from the dom using
				connectedCallback and disconnectedCallback.

				This scheme allows us to keep the namespace of the element unpolluted with
				sargasso properties and methods.
			*/
			const customElementClassFactory =
				`
			return class ${className}Element extends HTMLElement {
				constructor(element, options = {}) {
					super()
					this.helperClass= '${className}'
					this.helpers = []
				}

				connectedCallback () {
					this.helpers.push(new registeredClasses[this.helperClass](this,{isCustomElement:true}))
					if (this.hasAttributes()) {
						for(let i = 0; i < this.attributes.length; i++) {
							if(this.attributes[i].name.match(/^sargasso-/)) {
								let classname = this.attributes[i].name.replace(/^sargasso-/,'').split('-').map(word=> word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join('')
								if(!registeredClasses[classname]) {
									console.log('instantiate by attribute ' + this.attributes[i].name + ' > ' + classname + ' is not a sargasso class')
									continue
								}
								this.helpers.push(new registeredClasses[classname](this,{isCustomElement:true}))
							}
						}
					}

					this.helpers.forEach((helper) => {
						helper.start()
					})
				}

				disconnectedCallback () {
					this.helpers.forEach((helper) => {
						helper.sleep()
						helper.destroy()
				 	})
					this.helpers = [] // nuke the reference for trash collection
				}
			}`;

			const fn = new Function('registeredClasses', customElementClassFactory)(registeredClasses);
			customElements.define('sargasso-' + kebabCase_1(className), fn);
		}
	};

	// the public event handlers to implement in subclasses
	const eventNames = [
		'DOMChanged',
		'didScroll',
		'didResize',
		'didBreakpoint',
		'enterViewport',
		'exitViewport',
		'enterFullscreen',
		'exitFullscreen',
		'newPage',
		'elementEvent',
		'workerOnMessage',
		'observableChanged'
	];

	/*
		@class Sargasso -  the superclass for all element controllers
		*/
	class Sargasso {
		constructor(element, options = {}) {
			validate('Sargasso constructor element', element, ['isDefined', 'isElement']);
			validate('Sargasso constructor options', options, ['isDefined', ['isObject']]);

			this.uid = ++unique;
			this.element = element;
			if (options.shadowDOM) {
				this._shadowDOM = element.attachShadow({
					mode: 'open'
				});
				this._shadowRoot = document.createElement('div');
				this._shadowDOM.append(this._shadowRoot);
				this._hostElement = this.element;
				this.element = this._shadowRoot;
			}
			this.options = options;
			this._pendingAnimationFrame = undefined;
			this._frameQueue = [];
			this._isInViewport = false;
			this._workers = {};
			this._observables = {};
			this._template = undefined;
			this._templateArgs = {};
			this._started = false;

			this.render = debounce_1(() => {
				this._render();
			}, 100, {
				maxWait: 250
			});
		}

		/*
			@function start - called when controller is instantiated

			Override this to perform any initialization such as event listeners

			Note: always call super.start() in at the top of your subclass start method
			*/
		start() {
			const registeredResponsiveControllers = this.getMetaData('registeredResponsiveControllers') || [];
			registeredResponsiveControllers.push(this);
			this.setMetaData('registeredResponsiveControllers', registeredResponsiveControllers);
			this.setMetaData(this.constructor.name, this);

			liveElements.push(this);

			// if using shadow DOM, build a DOMWatcher to observe changes
			if (this._shadowDOM) {
				if (!this._shadowDOMWatcher) {
					this._shadowDOMWatcher = new DOMWatcher({
						shadowDOM: this._shadowRoot
					});
				}
				this._shadowDOMWatcher.subscribe(this);
			}

			// subscribe to desired event services

			if (this.options.watchDOM) {
				theDOMWatcher.subscribe(this);
			}

			if (this.options.watchScroll || this.options.watchViewport) {
				theScrollWatcher.subscribe(this);
			}

			if (this.options.watchResize || this.options.watchViewport) {
				theResizeWatcher.subscribe(this);
			}

			if (this.options.watchOrientation || this.options.watchViewport) {
				theOrientationWatcher.subscribe(this);
			}

			/*
				listen for 'sargasso' events
				Call the method named in e.detail.sargassoEvent or call this.elementEvent
			*/

			this.elementListener = (e) => {
				if (e.detail && e.detail.sargassoEvent && eventNames.indexOf(e.detail.sargassoEvent) !== -1) {
					this[e.detail.sargassoEvent].apply(this, e.detail.sargassoEventOptions || []);
				}
				else {
					this.elementEvent(e);
				}
			};

			this.element.addEventListener('sargasso', this.elementListener);

			this._started = true;
		}

		/*
			@function sleep - override this to clean up any events or references in your subclass

			Called when element has been removed from DOM just before it is destroyed

			Note: always call super.sleep() at the end of your subclass sleep method
			*/
		sleep() {
			if (this._shadowDOM) {
				this._shadowDOMWatcher.unSubscribe(this);
			}

			if (this.options.watchDOM) {
				theDOMWatcher.unSubscribe(this);
			}

			if (this.options.watchScroll || this.options.watchViewport) {
				theScrollWatcher.unSubscribe(this);
			}

			if (this.options.watchResize || this.options.watchViewport) {
				theResizeWatcher.unSubscribe(this);
			}

			if (this.options.watchOrientation || this.options.watchViewport) {
				theOrientationWatcher.unSubscribe(this);
			}

			this.element.removeEventListener('sargasso', this.elementListener);

			elementTools.offAll(this.element); // remove all dangling event listeners created with on/once

			this._started = false;
		}

		/**************************************************************
		EVENT HOOKS - Override these methods in your subclass as needed
		***************************************************************/

		/*
			@function DOMChanged - something changed on the page
			called if options.watchDOM set, override as needed.
			*/
		DOMChanged(root) {}

		/*
			@function didScroll - scroll occured
			called if options.watchScroll set, override as needed.
			*/
		didScroll() {}

		/*
			@function didResize - resize occured
			called if options.watchResize set, override as needed.
			*/
		didResize() {}

		/*
			@function didBreakpoint - new breakpoint, override as needed.
			*/
		didBreakpoint() {}

		/*
			@function enterViewport - element entered the viewport
			called if options.watchViewport set, override as needed.
			*/
		enterViewport() {}

		/*
			@function exitViewport - element exited the viewport
			called if options.watchViewport set, override as needed.
			*/
		exitViewport() {}

		/*
			@function enterFullscreen - element entered fullscreen, override as needed.
			*/
		enterFullscreen() {}

		/*
			@function exitFullscreen - element exited fullscreen, override as needed.
			*/
		exitFullscreen() {}

		/*
			@function newPage - page changed
			@param { String } oldPath - outgoing page
			@param { String } newPath - incoming page
			*/
		newPage(oldPath, newPath) {}

		/*
			@function elementEvent - element received a 'sargasso' custom event from somewhere
			@param { Object } e - event
			*/
		elementEvent(e) {}

		/*
			@function workerOnMessage - listen for worker postMessage event
			@param { String } id - id of worker started with this._workerstart()
			@param { Object } data - data received from worker
			*/
		workerOnMessage(id, data) {}

		/*
			@function observableChange - listen for changes to observable object
			@param { String } id - id of observable
			@param { String } property - property that changed
			@param { String } value - new value
			*/
		observableChanged(id, property, value) {
			this.render();
		}

		/****************************************************
		UTILITY METHODS - callable but normally not overriden
		*****************************************************/

		/*
			@function setMetaData - Set metadata. Key value storage implemented as a weakMap
			@param { String } - key name for value
			@param { Object } - value or JSON object, null will remove from key from metadate
			*/
		setMetaData(k, v) {
			elementTools.setMetaData(this.element, k, v);
		}

		/*
			@function getMetaData - Retrieve metadata
			@param { String } key - name of value to return
			@return { Object } if key is found otherwise undefined
			*/
		getMetaData(k) {
			return elementTools.getMetaData(this.element, k)
		}

		/*
			@function on - add delegated event handler for this.element
			@param { String} evt - HTML element event name
			@param { String } selector - optional element query selector
			@param { Function } fn - event handler function
			@param { Object } [options] - for addEventListener
			*/
		on(evt, selector, fn, options) {
			elementTools.on(this.constructor.name + '-' + this.uid, this.element, evt, selector, fn, options);
		}

		/*
			@function off - Remove delegated event handler
			@param { String} evt - HTML element event name
			@param { String } [selector] - element query selector
			*/
		off(evt, selector) {
			elementTools.off(this.constructor.name + '-' + this.uid, this.element, evt, selector);
		}

		/*
			@function once - add delegated event handler for this.element witch executes only once
			@param { String} evt - HTML element event name
			@param { String } selector - optional element query selector
			@param { Function } fn - event handler function
			@param { Object } [options] - for addEventListener
			*/
		once(evt, selector, fn, options) {
			elementTools.once(this.constructor.name + '-' + this.uid, this.element, evt, selector, fn, options);
		}

		/*
			@function notifyAll - broadcast 'event' to all instantiated sargasso controllers
			@param { String } event - name of sargasso event
			@param { Object } params - array of params to attach to event
			*/
		notifyAll(event, params) {
			if (eventNames.indexOf(event) === -1) {
				throw (new Error('invalid event name ' + event))
			}
			for (let i = 0; i < liveElements.length; i++) {
				const peer = liveElements[i];
				if (peer !== this && peer[event]) {
					peer[event].apply(peer, params);
				}
			}
		}

		/*
			@function notifyElement - broadcast event to all sargasso controllers for 'this.element'
			@param { String } event - name of sargasso event
			@param { Object } params - array of params to attach to event
			*/
		notifyElement(element, event, params) {
			if (eventNames.indexOf(event) === -1) {
				throw (new Error('invalid event name ' + event))
			}

			const registeredResponsiveControllers = this.getMetaData('registeredResponsiveControllers');
			if (registeredResponsiveControllers) {
				for (let i = 0; i < registeredResponsiveControllers.length; i++) {
					const peer = registeredResponsiveControllers[i];
					if (peer !== this && peer[event]) {
						peer[event].apply(peer, params);
					}
				}
			}
		}

		/*
			@function queueFrame - schedule a task in the requestAnimation frame event loop
			@param { function } frame - function to execute

			Call this to queue functions that mutate the DOM (make changes to html)

			EG:
			let frame = () => {
				this.element.addClass('big')
			}
			this.queueFrame(frame)

			The frame will then be executed in the next requested animation frame
			*/
		queueFrame(frame) {
			this._frameQueue.push(frame.bind(this));
			if (!this._pendingAnimationFrame) {
				this._pendingAnimationFrame = requestAnimationFrame(() => {
					this._processQueue();
				});
			}
		}

		/*
			@function wantFullscreen - request full screen
			you can call this from a subclass controller such as an 'enlarge to full screen' button
			otherwise if watchOrientation is set it will call this when phone is in landscape
			it would be nice to acually use the experimental requestFullScreen thing but
			you can't do that on rotate at the moment, only on click.
			*/
		wantFullscreen(want) {
			if (want) {
				this.enterFullscreen();
			}
			else {
				this.exitFullscreen();
			}
		}

		/**********************************************************************
		ELEMENT UTILITIES - convienience methods for manipilating HTML elements
		***********************************************************************/

		hasClass(cssClass) {
			return elementTools.hasClass(this.element, cssClass)
		}

		addClass(cssClasses) {
			elementTools.addClass(this.element, cssClasses);
		}

		removeClass(cssClasses) {
			elementTools.removeClass(this.element, cssClasses);
		}

		setCSS(cssObject) {
			elementTools.setCSS(this.element, cssObject);
		}

		isVisible() {
			return elementTools.isVisible(this.element)
		}

		/*
			@function workerStart - start a web worker
			@param { String } id - id of worker
			@param { String | Url } codeOrURL - javascript worker code or url to download shared worker code

			Offload compute heavy tasks to a new thread and listen for result

			Pass it a url of a web worker js file or create an inline web worker
			from string of raw code such as:

			let mycode = `onmessage = function (e) {
				// e.data contains whatever is passed by this.workerPostMessage()

				// do something here

				// when done send message back to sargasso controller:
				postMessage({
					uid: e.data.uid, // ALWAYS pass this back
					result: 'Done doing pointless stuff: ' + e.data.answer
				})
			}`

			this._workerstart('pointless-stuff', mycode)

			this.workerPostMessage('pointless-stuff', {answer:42})

			*/
		workerStart(id, codeOrURL) {
			this._workers[id] = theWorkerWatcher.registerWorker(id, codeOrURL);
			theWorkerWatcher.subscribe(this, id);
			return this._workers[id]
		}

		/*
			@function workerPostMessage - send a message to a running worker
			@param { String } id - id of worker
			@param { Object } message - data to send to worker
			*/
		workerPostMessage(id, message) {
			if (!message.uid) {
				message.uid = this.uid;
			}
			if (this._workers[id]) {
				this._workers[id].postMessage(message);
			}
		}

		/************************************************
		observe observable objects
		get or set observable object by unique id
		obj optional external object
		*************************************************/

		getObservable(id) {
			return this._observables[id]
		}

		observableStart(id, data) {
			theObservableObjectWatcher.subscribe(this, id, data);
			this._observables[id] = theObservableObjectWatcher.getObservable(id);
			return this._observables[id]
		}

		observableStop(id) {
			if (this._observables[id]) {
				theObservableObjectWatcher.unSubscribe(this, id);
				delete this._observables[id];
			}
		}

		observableStopAll() {
			for (const id in this._observables) {
				this.observableStop(id);
			}
		}

		setTemplate(template) {
			this._template = template;
		}

		setRenderer(renderer) {
			this.renderer = renderer;
		}

		setTemplateArgs(args = {}) {
			this._templateArgs = args.constructor && args.constructor.name === 'ObservableObject' ? args.data : args;
			this.render();
		}

		getTemplateArgs() {
			return JSON.parse(JSON.stringify(this._templateArgs || {}))
		}

		// this.render is a debounced call to this
		_render() {
			if (this._template && this.renderer) {
				this.renderer(this._template(this.getTemplateArgs()), this.element);
			}
		}

		/************************************************
		PRIVATE METHODS: normally not called or overriden
		*************************************************/

		/*
			@function _flushQueue - disgard all pending frames
			*/
		_flushQueue() {
			if (this._pendingAnimationFrame) {
				cancelAnimationFrame(this._pendingAnimationFrame);
				this._pendingAnimationFrame = undefined;
			}
			this._frameQueue = [];
		}

		/*
			@function _flushQueue - execute pending frames
			*/
		_processQueue() {
			this._pendingAnimationFrame = undefined;
			const toProcess = this._frameQueue.slice(0);
			this._frameQueue = [];
			for (let i = 0; i < toProcess.length; i++) {
				toProcess[i]();
			}
		}

		/*
			@function _stopWorker - stop a worker
			*/
		_stopWorker(id) {
			if (this._workers[id]) {
				theWorkerWatcher.unSubscribe(this, id);
				delete this._workers[id];
			}
		}

		/*
			@function _stopAllWorkers - cleanup all workers registered by me
			*/
		_stopAllWorkers() {
			for (const worker in this._workers) {
				this._stopWorker(worker);
			}
		}

		/*
			@function destroy - called when this.element is removed from the DOM
			*/
		destroy() {
			this._stopAllWorkers();
			this.observableStopAll();

			this._flushQueue();

			if (this._started) {
				this.sleep();
			}

			const registeredResponsiveControllers = this.getMetaData('registeredResponsiveControllers');
			if (registeredResponsiveControllers) {
				if (registeredResponsiveControllers.indexOf(this) !== -1) {
					registeredResponsiveControllers.splice(registeredResponsiveControllers.indexOf(this), 1);
					this.setMetaData('registeredResponsiveControllers', registeredResponsiveControllers);
				}
			}

			this.setMetaData(this.constructor.name, null);

			this.element = null;

			if (liveElements.indexOf(this) !== -1) {
				liveElements.splice(liveElements.indexOf(this), 1);
			}
		}

		/****************************************************
		EVENT HOOK METHODS - normally not called or overriden
		*****************************************************/

		/*
			@function watchDOM - hook called if options.watchDOM set and DOM changed
			*/
		watchDOM(root) {
			if (root === this._shadowRoot) {
				// something happend this element's my shadow DOM, tell in the DOM about it
				// so dom observers can take actions such as instantiating new sargasso
				// controllers, etc.
				theDOMWatcher.observeDOM(this._shadowRoot);
			}
			else {
				this.DOMChanged(root);
			}
		}

		/*
			@function watchScroll - hook called if options.watchScroll set and Scroll Wrapper scrolled
			*/
		watchScroll() {
			if (this.options.watchViewport) {
				this.inViewport();
			}

			this.didScroll();
		}

		/*
			@function watchResize - hook called if options.watchResize set and window changed size
			*/
		watchResize() {
			if (this.options.watchViewport) {
				this.inViewport();
			}

			this.didResize();
		}

		/*
			@function watchOrientation - hook called if options.watchOrientation set and orientation changes
			*/
		watchOrientation() {
			if (window.orientation && (window.orientation === 90 || window.orientation === -90)) {
				this.wantFullscreen(true);
			}
			else {
				this.wantFullscreen(false);
			}
		}

		/*
			@function inViewport - hook called if options.watchViewPort set and this.element enters viewport
			*/
		inViewport() {
			if (theScrollWatcher.inViewPort(this.element)) {
				if (!this._isInViewport) {
					this.enterViewport();
					this._isInViewport = true;
				}
			}
			else {
				if (this._isInViewport) {
					this.exitViewport();
					this._isInViewport = false;
				}
			}
		}

		/*
			@function workerMessage - hook called when worker posts a message
			*/
		workerMessage(id, e) {
			if (e.data.uid === this.uid) {
				this.workerOnMessage(id, e.data);
			}
		}

		// experimental

		nativeRequestFullScreen() {
			if (document.fullscreenElement) {
				if (document.fullscreenElement === this.element) {
					return
				}
				document.exitFullscreen();
			}

			this.element.requestFullscreen();
		}

		nativeExitFullScreen() {
			if (document.fullscreenElement && document.fullscreenElement === this.element) {
				document.exitFullscreen();
			}
		}
	}

	registerSargassoClass('Sargasso', Sargasso);

	/**
		LazyInstantiate

		Sargasso class watches the document for new content and instantiates
		Sargasso classes liested in element's data-lazy-sargasso-class only when
		the element scrolls into view

		@author Michael Rhodes (except where noted)
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020 Michael Rhodes
	**/

	class LazyInstantiate extends Sargasso {
		constructor (element, options = {}) {
			options.watchScroll = true;
			options.watchResize = true;
			options.watchDOM = true;
			options.immortal = true;
			super(element, options);
		}

		didResize () {
			super.didResize();
			this.lazyHandler();
		}

		didScroll () {
			super.didScroll();
			this.lazyHandler();
		}

		DOMChanged (root) {
			super.DOMChanged(root);
			this.lazyHandler(root);
		}

		// watch viewport and instantiate lazy-instantiate-responsive things when visible
		lazyHandler (root = document) {
			const els = root.querySelectorAll('[data-lazy-sargasso-class]');
			for (let i = 0; i < els.length; i++) {
				const element = els[i];
				if (theScrollWatcher.inViewPort(element)) {
					const cls = element.getAttribute('data-lazy-sargasso-class').split(/\s*,\s*/);
					for (let j = 0; j < cls.length; j++) {
						const thing = new registeredClasses[cls[j]](els[i]);
						thing.start();
					}
					element.removeAttribute('data-lazy-sargasso-class');
				}
			}
		}
	}

	registerSargassoClass('LazyInstantiate', LazyInstantiate);

	/**
		SargassoSupervisor

		Sargasso class which watches the document for new content and instantiates
		Sargasso classes liested in element's data-sargasso-class attribute.
		Once instantiated, Sargasso objects are trash collected when element is
		removed from the DOM

		@author Michael Rhodes (except where noted)
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020 Michael Rhodes
	**/

	class SargassoSupervisor extends Sargasso {
		constructor (element, options = {}) {
			super(element, {
				watchDOM: true,
				mortal: false
			});
			this.lazy = new LazyInstantiate(element, options);
		}

		start () {
			this.lazy.start();
			super.start();
		}

		instantiate (element) {
			const cls = element.getAttribute('data-sargasso-class').split(/\s*,\s*/);
			for (let i = 0; i < cls.length; i++) {
				try {
					const thing = new registeredClasses[cls[i]](element);
					thing.start();
				} catch (e) {
					console.log('error instantiating ' + cls[i], e, registeredClasses);
				}
			}

			element.removeAttribute('data-sargasso-class');
		}

		newPage () {
			this.doIt();
		}

		DOMChanged (root) {
			this.doIt(root);
		}

		doIt (root = document.body) {
			if (root.getAttribute('data-sargasso-class')) {
				this.instantiate(root);
			}

			const elements = root.querySelectorAll('[data-sargasso-class]');
			for (const element of elements) {
				this.instantiate(element);
			}

			// check for dangling live elements and kill them
			const toCleanup = [];
			for (let i = 0; i < liveElements.length; i++) {
				if (!liveElements[i].options.immortal && !liveElements[i].options.isCustomElement && !document.body.contains(liveElements[i].element)) {
					toCleanup.push(liveElements[i]);
				}
			}
			for (let i = 0; i < toCleanup.length; i++) {
				toCleanup[i].destroy();
			}
		}
	}

	registerSargassoClass('SargassoSupervisor', SargassoSupervisor);

	var esCookie = {};

	"use strict";
	var __assign$1 = (commonjsGlobal && commonjsGlobal.__assign) || function () {
	    __assign$1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1.apply(this, arguments);
	};
	esCookie.__esModule = true;
	function stringifyAttribute(name, value) {
	    if (!value) {
	        return '';
	    }
	    var stringified = '; ' + name;
	    if (value === true) {
	        return stringified; // boolean attributes shouldn't have a value
	    }
	    return stringified + '=' + value;
	}
	function stringifyAttributes(attributes) {
	    if (typeof attributes.expires === 'number') {
	        var expires = new Date();
	        expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
	        attributes.expires = expires;
	    }
	    return stringifyAttribute('Expires', attributes.expires ? attributes.expires.toUTCString() : '')
	        + stringifyAttribute('Domain', attributes.domain)
	        + stringifyAttribute('Path', attributes.path)
	        + stringifyAttribute('Secure', attributes.secure)
	        + stringifyAttribute('SameSite', attributes.sameSite);
	}
	function encode(name, value, attributes) {
	    return encodeURIComponent(name)
	        .replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent) // allowed special characters
	        .replace(/\(/g, '%28').replace(/\)/g, '%29') // replace opening and closing parens
	        + '=' + encodeURIComponent(value)
	        // allowed special characters
	        .replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent)
	        + stringifyAttributes(attributes);
	}
	var encode_1 = esCookie.encode = encode;
	function parse(cookieString) {
	    var result = {};
	    var cookies = cookieString ? cookieString.split('; ') : [];
	    var rdecode = /(%[\dA-F]{2})+/gi;
	    for (var i = 0; i < cookies.length; i++) {
	        var parts = cookies[i].split('=');
	        var cookie = parts.slice(1).join('=');
	        if (cookie.charAt(0) === '"') {
	            cookie = cookie.slice(1, -1);
	        }
	        try {
	            var name_1 = parts[0].replace(rdecode, decodeURIComponent);
	            result[name_1] = cookie.replace(rdecode, decodeURIComponent);
	        }
	        catch (e) {
	            // ignore cookies with invalid name/value encoding
	        }
	    }
	    return result;
	}
	var parse_1 = esCookie.parse = parse;
	function getAll() {
	    return parse(document.cookie);
	}
	var getAll_1 = esCookie.getAll = getAll;
	function get(name) {
	    return getAll()[name];
	}
	var get_1 = esCookie.get = get;
	function set(name, value, attributes) {
	    document.cookie = encode(name, value, __assign$1({ path: '/' }, attributes));
	}
	var set_1 = esCookie.set = set;
	function remove(name, attributes) {
	    set(name, '', __assign$1(__assign$1({}, attributes), { expires: -1 }));
	}
	var remove_1 = esCookie.remove = remove;

	/**
		Breakpoints

		Sargasso class that maintains css classes on the document body
		to be used in css rules for implementing visibility and
		responsive behavior

		@author Michael Rhodes (except where noted)
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020 Michael Rhodes
	**/

	const materialBreakpoints = [{
		className: 'screen-xs',
		maxWidth: 599
	}, {
		className: 'screen-sm',
		maxWidth: 1023
	}, {
		className: 'screen-md',
		maxWidth: 1439
	}, {
		className: 'screen-lg',
		maxWidth: 1999
	}, {
		className: 'screen-xl',
		maxWidth: undefined
	}];

	class Breakpoints extends Sargasso {
		constructor (element, options = {}) {
			options.watchResize = true;
			super(element, options);

			if (options.widths) {
				this.options.widths = options.widths;
			} else {
				this.options.widths = materialBreakpoints;
			}

			this.scale = undefined;
			this.disabled = false;
			this.forceScale = undefined;
			this.orientation = undefined;

			this.widths = [];
			this.classes = [];
		}

		start () {
			super.start();
			let css = '.show-hide{display:none;}\n';
			this.widths.push(0);
			for (let i = 0; i < this.options.widths.length; i++) {
				if (this.options.widths[i].maxWidth) {
					this.widths.push(this.options.widths[i].maxWidth);
				}
				this.classes.push(this.options.widths[i].className);

				css += '.' + this.options.widths[i].className + ' .hidden-' + this.options.widths[i].className + '{display:none;}\n';
				css += '.not-' + this.options.widths[i].className + ' .hidden-not-' + this.options.widths[i].className + '{display:none;}\n';
				css += '.' + this.options.widths[i].className + ' .shown-' + this.options.widths[i].className + '{display:block;}\n';
				css += '.not-' + this.options.widths[i].className + ' .shown-not-' + this.options.widths[i].className + '{display:block;}\n';
			}

			const style = document.createElement('style');
			style.type = 'text/css';
			style.innerHTML = css;
			document.getElementsByTagName('head')[0].appendChild(style);
			this.detectGeometry();
		}

		didResize () {
			super.didResize();
			this.detectGeometry();
		}

		disableResponsive (scale) {
			elementTools.addClass(document.body, 'disable-responsive');
			this.disabled = true;
			this.forceScale = scale;
			this.detectGeometry();
		}

		enableResponsive () {
			elementTools.removeClass(document.body, 'disable-responsive');
			this.disabled = false;
			this.forceScale = '';
			this.detectGeometry();
		}

		detectGeometry () {
			let newScale = this.classes[this.widths.length - 1];

			if (this.disabled) {
				newScale = this.forceScale;
			} else {
				const ww = window.innerWidth;
				const wh = window.innerHeight;
				if (wh > ww) {
					if (this.orientation !== 'portrait') {
						const frame = () => {
							elementTools.removeClass(document.body, 'landscape');
							elementTools.addClass(document.body, 'portrait');
						};
						this.queueFrame(frame);
						this.orientation = 'portrait';
					}
				} else {
					if (this.orientation !== 'landscape') {
						const frame = () => {
							elementTools.removeClass(document.body, 'portrait');
							elementTools.addClass(document.body, 'landscape');
						};
						this.queueFrame(frame);
						this.orientation = 'landscape';
					}
				}
				for (let i = 0; i < this.widths.length - 1; i++) {
					if (ww >= this.widths[i] && ww < this.widths[i + 1]) {
						newScale = this.classes[i];
						break
					}
				}
			}

			let changed = 0;

			if (newScale !== this.scale) {
				++changed;
				const frame = () => {
					for (let i = 0; i < this.classes.length; i++) {
						if (this.classes[i] !== newScale) {
							elementTools.addClass(document.body, 'not-' + this.classes[i]);
							elementTools.removeClass(document.body, this.classes[i]);
							elementTools.removeClass(document.body, 'shown-' + this.classes[i]);
							elementTools.removeClass(document.body, 'hidden-' + this.classes[i]);
						} else {
							elementTools.removeClass(document.body, 'not-' + this.classes[i]);
						}
					}
					elementTools.addClass(document.body, newScale);
					elementTools.addClass(document.body, 'shown-' + newScale);
					elementTools.addClass(document.body, 'hidden-' + newScale);

					this.notifyAll('didBreakpoint', [newScale]);
				};
				this.queueFrame(frame);
			}

			this.scale = newScale;

			if (changed) {
				this.setHints();
			}
		}

		setHints () {
			let classes = '';

			if (this.scale) {
				if (classes) {
					classes += ' ';
				}
				classes += this.scale;
			}

			if (classes !== this.getCookie('responsive')) {
				this.setCookie('responsive', classes);
			}
		}

		getCookie (key) {
			return esCookie.get(key)
		}

		setCookie (key, value, expires) {
			const options = {
				path: '/',
				domain: this.options.cookieDomain || null,
				expires: expires
			};
			esCookie.set(key, value, options);
		}

		deleteCookie (key) {
			this.setCookie(key, null);
		}
	}

	registerSargassoClass('Breakpoints', Breakpoints);

	/**
		HijaxLoader

		Sargasso class that captures links on the page and loads pages
		using AJAX only replacing elements on the page that are marked
		with data-hijax attributes.

		@author Michael Rhodes (except where noted)
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020 Michael Rhodes
	**/

	class HijaxLoader extends Sargasso {
		constructor (element, options = {}) {
			options.watchDOM = true;
			options.immortal = true;
			super(element, options);
			this.excludeRegex = new RegExp('^(//|http|javascript|mailto|#)', 'i');
			this.currentPage = location.pathname + location.search;
			this.cachedMarkup = {};
		}

		start () {
			// set up hijax markup cache
			const containers = document.querySelectorAll('[data-hijax-skip-unchanged]');
			for (let i = 0; i < containers.length; i++) {
				const container = containers[i];
				const id = container.getAttribute('id');
				this.cachedMarkup[id] = container.innerHTML;
			}

			super.start();
			window.addEventListener('popstate', (e) => {
				this.watchPopState(e);
			}, false);
		}

		DOMChanged (root) {
			super.DOMChanged(root);
			this.hijaxLinks(root);
		}

		watchPopState (e) {
			if (location.pathname + location.search !== this.currentPage) {
				this.preFlight(location.pathname + location.search);
			}
		}

		hijaxLinks (fragment) {
			const links = fragment ? fragment.getElementsByTagName('a') : this.element.getElementsByTagName('a');
			for (let i = 0; i < links.length; i++) {
				const link = links[i];
				const href = link.getAttribute('href');
				if (href &&
					!link.getAttribute('data-hijaxed') &&
					!link.getAttribute('target') &&
					!link.hasAttribute('data-no-hijax') &&
					!this.excludeRegex.exec(href)
				) {
					link.setAttribute('data-hijaxed', true);
					link.addEventListener('click', (e) => {
						e.preventDefault();
						this.setPage(href);
					}, false);
				}
			}
		}

		setPage (url, reload) {
			if (url === this.currentPage || reload) {
				this.preFlight(url);
			} else {
				history.pushState(null, null, url);
				this.watchPopState();
			}
		}

		preFlight (url) {
			if (!this.options.preFlight) {
				return this.loadPage(url)
			}

			this.options.preFlight(url, (err, handled, rewrite) => {
				if (err) {
					if (this.options.onError) {
						this.options.onError('danger', err);
					} else {
						alert('Error loading page: ' + err);
					}
				}
				if (handled) {
					this.currentPage = location.pathname + location.search;
				} else {
					this.loadPage(rewrite || url);
				}
			});
		}

		loadPage (url) {
			const frame = () => {
				elementTools.addClass(document.body, 'hijax-loading');
			};
			this.queueFrame(frame);
			if (this.options.onExitPage) {
				this.options.onExitPage();
			}
			const xhr = new XMLHttpRequest();
			xhr.open('GET', url);
			xhr.setRequestHeader('Sargasso-Hijax', 1);
			xhr.setRequestHeader('x-digitopia-hijax', 1);
			if (this.options.onLoading) {
				this.options.onLoading();
				xhr.onreadystatechange = this.options.onLoading;
			}
			xhr.onload = () => {
				if (xhr.status === 301 || xhr.status === 302 || xhr.getResponseHeader('Sargasso-Location')) {
					const loc = xhr.getResponseHeader('Location') ? xhr.getResponseHeader('Location') : xhr.getResponseHeader('Sargasso-Location');
					this.setPage(loc);
				} else if (xhr.status === 200) {
					theScrollWatcher.scrollTop(0);
					this.mergePage(xhr.responseText);
					const oldPage = this.currentPage;
					const frame = () => {
						this.notifyAll('newPage', [oldPage, location.pathname + location.search]);
						elementTools.removeClass(document.body, 'hijax-loading');
					};
					this.queueFrame(frame);
					this.currentPage = location.pathname + location.search;
				} else {
					const flashLevel = xhr.getResponseHeader('Sargasso-Flash-Level') || 'danger';
					let flashMessage = xhr.getResponseHeader('Sargasso-Flash-Message') || xhr.statusText;
					if (!flashMessage) {
						flashMessage = 'Could not connect to server.';
					}
					if (this.options.onError) {
						this.options.onError(flashLevel, flashMessage);
					} else {
						alert('Error loading page: ' + flashMessage);
					}
				}
			};
			xhr.send();
		}

		processScripts (scripts) {
			Array.from(scripts).forEach((script) => {
				script.remove();
				const id = script.getAttribute('id');
				if (!document.getElementById(id)) {
					// script.onload = function () {}
					document.getElementsByTagName('head')[0].appendChild(script);
				}
			});
		}

		mergePage (html) {
			const ephemerals = document.querySelectorAll('[data-ephemeral]');
			Array.from(ephemerals).forEach((ephemeral) => {
				ephemeral.remove();
			});

			const doc = html.split(/(<body[^>]*>|<\/body>)/ig);
			const fragment = makeFragment(doc[2]);
			const containers = document.querySelectorAll('[data-hijax]');
			for (let i = 0; i < containers.length; i++) {
				const container = containers[i];
				const id = container.getAttribute('id');
				const replace = fragment.getElementById(id);

				// compare raw markup for changes
				if (container.hasAttribute('data-hijax-skip-unchanged')) {
					if (this.cachedMarkup[id] === replace.innerHTML) { // unchanged
						continue
					}
					this.cachedMarkup[id] = replace.innerHTML;
				}

				// use a key found in data-hijax-cache-key on a child element found by css selector defined in data-hijax-cache-key-selector
				const k = container.getAttribute('data-hijax-cache-key-selector');
				if (k) {
					if (replace.querySelector(k) && container.querySelector(k) && container.querySelector(k).getAttribute('data-hijax-cache-key') === replace.querySelector(k).getAttribute('data-hijax-cache-key')) {
						continue
					}
				}

				this.processScripts(replace.querySelectorAll('script'));
				const frame = () => {
					container.parentNode.replaceChild(replace, container);
					if (this.options.onEnterPage) {
						this.options.onEnterPage();
					}
					this.hijaxLinks(replace);
				};
				this.queueFrame(frame);
			}
		}
	}

	registerSargassoClass('HijaxLoader', HijaxLoader);

	// shims for borked browsers
	// =========================

	const makeFragment = (html) => {
		if (document.createRange && document.createRange().createContextualFragment) {
			return document.createRange().createContextualFragment(html)
		}
		const fragment = document.createDocumentFragment();
		const div = document.createElement('div');
		div.insertAdjacentHTML('afterBegin', html);
		fragment.appendChild(div);
		return fragment
	};

	let loadPageHandler;

	const bootSargasso = (options = {}) => {
		if (options.scrollElement) {
			theScrollWatcher.setOptions(options);
		}
		if (options.breakpoints) {
			const breakpoints = new Breakpoints(document.body, options.breakpoints);
			breakpoints.start();
		}
		if (options.hijax) {
			const hijax = new HijaxLoader(document.body, options.hijax);
			hijax.start();
			loadPageHandler = hijax.setPage.bind(hijax);
		} else {
			loadPageHandler = (url) => {
				document.location.href = url;
			};
		}

		const supervisor = new SargassoSupervisor(document.body, options);
		supervisor.start(options);
	};

	/*
		Sargasso

		Simple, Fast, Reactive, supervised Javascript controllers for html elements.

		@author Michael Rhodes (except where noted)
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020 Michael Rhodes

		*/

	const utils$1 = {
		registerSargassoClass: registerSargassoClass,
		bootSargasso: bootSargasso,
		elementTools: elementTools,
		validate: validate,
		setValidator: setValidator
	};

	const services = {
		theDOMWatcher: theDOMWatcher,
		theScrollWatcher: theScrollWatcher,
		theResizeWatcher: theResizeWatcher,
		theOrientationWatcher: theOrientationWatcher,
		theWorkerWatcher: theWorkerWatcher,
		theObservableObjectWatcher: theObservableObjectWatcher
	};

	/*! js-cookie v3.0.1 | MIT */
	/* eslint-disable no-var */
	function assign (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	    for (var key in source) {
	      target[key] = source[key];
	    }
	  }
	  return target
	}
	/* eslint-enable no-var */

	/* eslint-disable no-var */
	var defaultConverter = {
	  read: function (value) {
	    if (value[0] === '"') {
	      value = value.slice(1, -1);
	    }
	    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent)
	  },
	  write: function (value) {
	    return encodeURIComponent(value).replace(
	      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
	      decodeURIComponent
	    )
	  }
	};
	/* eslint-enable no-var */

	/* eslint-disable no-var */

	function init (converter, defaultAttributes) {
	  function set (key, value, attributes) {
	    if (typeof document === 'undefined') {
	      return
	    }

	    attributes = assign({}, defaultAttributes, attributes);

	    if (typeof attributes.expires === 'number') {
	      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
	    }
	    if (attributes.expires) {
	      attributes.expires = attributes.expires.toUTCString();
	    }

	    key = encodeURIComponent(key)
	      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)
	      .replace(/[()]/g, escape);

	    var stringifiedAttributes = '';
	    for (var attributeName in attributes) {
	      if (!attributes[attributeName]) {
	        continue
	      }

	      stringifiedAttributes += '; ' + attributeName;

	      if (attributes[attributeName] === true) {
	        continue
	      }

	      // Considers RFC 6265 section 5.2:
	      // ...
	      // 3.  If the remaining unparsed-attributes contains a %x3B (";")
	      //     character:
	      // Consume the characters of the unparsed-attributes up to,
	      // not including, the first %x3B (";") character.
	      // ...
	      stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
	    }

	    return (document.cookie =
	      key + '=' + converter.write(value, key) + stringifiedAttributes)
	  }

	  function get (key) {
	    if (typeof document === 'undefined' || (arguments.length && !key)) {
	      return
	    }

	    // To prevent the for loop in the first place assign an empty array
	    // in case there are no cookies at all.
	    var cookies = document.cookie ? document.cookie.split('; ') : [];
	    var jar = {};
	    for (var i = 0; i < cookies.length; i++) {
	      var parts = cookies[i].split('=');
	      var value = parts.slice(1).join('=');

	      try {
	        var foundKey = decodeURIComponent(parts[0]);
	        jar[foundKey] = converter.read(value, foundKey);

	        if (key === foundKey) {
	          break
	        }
	      } catch (e) {}
	    }

	    return key ? jar[key] : jar
	  }

	  return Object.create(
	    {
	      set: set,
	      get: get,
	      remove: function (key, attributes) {
	        set(
	          key,
	          '',
	          assign({}, attributes, {
	            expires: -1
	          })
	        );
	      },
	      withAttributes: function (attributes) {
	        return init(this.converter, assign({}, this.attributes, attributes))
	      },
	      withConverter: function (converter) {
	        return init(assign({}, this.converter, converter), this.attributes)
	      }
	    },
	    {
	      attributes: { value: Object.freeze(defaultAttributes) },
	      converter: { value: Object.freeze(converter) }
	    }
	  )
	}

	var api = init(defaultConverter, { path: '/' });

	/******************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends(d, b) {
	    if (typeof b !== "function" && b !== null)
	        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	var __assign = function() {
	    __assign = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};

	function __rest(s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	}

	function __decorate(decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	}

	function __param(paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	}

	function __metadata(metadataKey, metadataValue) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	}

	function __awaiter(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	var __createBinding = Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	        desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	});

	function __exportStar(m, o) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
	}

	function __values(o) {
	    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
	    if (m) return m.call(o);
	    if (o && typeof o.length === "number") return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}

	function __read(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	/** @deprecated */
	function __spread() {
	    for (var ar = [], i = 0; i < arguments.length; i++)
	        ar = ar.concat(__read(arguments[i]));
	    return ar;
	}

	/** @deprecated */
	function __spreadArrays() {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	}

	function __spreadArray(to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	}

	function __await(v) {
	    return this instanceof __await ? (this.v = v, this) : new __await(v);
	}

	function __asyncGenerator(thisArg, _arguments, generator) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var g = generator.apply(thisArg, _arguments || []), i, q = [];
	    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
	    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
	    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
	    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
	    function fulfill(value) { resume("next", value); }
	    function reject(value) { resume("throw", value); }
	    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	}

	function __asyncDelegator(o) {
	    var i, p;
	    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
	    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
	}

	function __asyncValues(o) {
	    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
	    var m = o[Symbol.asyncIterator], i;
	    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
	    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
	    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
	}

	function __makeTemplateObject(cooked, raw) {
	    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
	    return cooked;
	};

	var __setModuleDefault = Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	};

	function __importStar(mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	}

	function __importDefault(mod) {
	    return (mod && mod.__esModule) ? mod : { default: mod };
	}

	function __classPrivateFieldGet(receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	}

	function __classPrivateFieldSet(receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
	}

	function __classPrivateFieldIn(state, receiver) {
	    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
	    return typeof state === "function" ? receiver === state : state.has(receiver);
	}

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$A = {
	    AUTO_INIT_ATTR: 'data-mdc-auto-init',
	    AUTO_INIT_STATE_ATTR: 'data-mdc-auto-init-state',
	    INITIALIZED_STATE: 'initialized',
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var AUTO_INIT_ATTR = strings$A.AUTO_INIT_ATTR, AUTO_INIT_STATE_ATTR = strings$A.AUTO_INIT_STATE_ATTR, INITIALIZED_STATE = strings$A.INITIALIZED_STATE;
	var registry = {};
	var CONSOLE_WARN = console.warn.bind(console); // tslint:disable-line:no-console
	function emit(evtType, evtData, shouldBubble) {
	    if (shouldBubble === void 0) { shouldBubble = false; }
	    var evt;
	    if (typeof CustomEvent === 'function') {
	        evt = new CustomEvent(evtType, {
	            bubbles: shouldBubble,
	            detail: evtData,
	        });
	    }
	    else {
	        evt = document.createEvent('CustomEvent');
	        evt.initCustomEvent(evtType, shouldBubble, false, evtData);
	    }
	    document.dispatchEvent(evt);
	}
	/* istanbul ignore next: optional argument is not a branch statement */
	/**
	 * Auto-initializes all MDC components on a page.
	 */
	function mdcAutoInit(root) {
	    var e_1, _a;
	    if (root === void 0) { root = document; }
	    var components = [];
	    var nodes = [].slice.call(root.querySelectorAll("[" + AUTO_INIT_ATTR + "]"));
	    nodes = nodes.filter(function (node) { return node.getAttribute(AUTO_INIT_STATE_ATTR) !== INITIALIZED_STATE; });
	    try {
	        for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
	            var node = nodes_1_1.value;
	            var ctorName = node.getAttribute(AUTO_INIT_ATTR);
	            if (!ctorName) {
	                throw new Error('(mdc-auto-init) Constructor name must be given.');
	            }
	            var Constructor = registry[ctorName]; // tslint:disable-line:variable-name
	            if (typeof Constructor !== 'function') {
	                throw new Error("(mdc-auto-init) Could not find constructor in registry for " + ctorName);
	            }
	            // TODO: Should we make an eslint rule for an attachTo() static method?
	            // See https://github.com/Microsoft/TypeScript/issues/14600 for discussion of static interface support in TS
	            var component = Constructor.attachTo(node);
	            Object.defineProperty(node, ctorName, {
	                configurable: true,
	                enumerable: false,
	                value: component,
	                writable: false,
	            });
	            components.push(component);
	            node.setAttribute(AUTO_INIT_STATE_ATTR, INITIALIZED_STATE);
	        }
	    }
	    catch (e_1_1) { e_1 = { error: e_1_1 }; }
	    finally {
	        try {
	            if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);
	        }
	        finally { if (e_1) throw e_1.error; }
	    }
	    emit('MDCAutoInit:End', {});
	    return components;
	}
	// Constructor is PascalCased because it is a direct reference to a class, rather than an instance of a class.
	// tslint:disable-next-line:variable-name
	mdcAutoInit.register = function (componentName, Constructor, warn) {
	    if (warn === void 0) { warn = CONSOLE_WARN; }
	    if (typeof Constructor !== 'function') {
	        throw new Error("(mdc-auto-init) Invalid Constructor value: " + Constructor + ". Expected function.");
	    }
	    var registryValue = registry[componentName];
	    if (registryValue) {
	        warn("(mdc-auto-init) Overriding registration for " + componentName + " with " + Constructor + ". Was: " + registryValue);
	    }
	    registry[componentName] = Constructor;
	};
	mdcAutoInit.deregister = function (componentName) {
	    delete registry[componentName];
	};
	/** @nocollapse */
	mdcAutoInit.deregisterAll = function () {
	    var keys = Object.keys(registry);
	    keys.forEach(this.deregister, this);
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCFoundation = /** @class */ (function () {
	    function MDCFoundation(adapter) {
	        if (adapter === void 0) { adapter = {}; }
	        this.adapter = adapter;
	    }
	    Object.defineProperty(MDCFoundation, "cssClasses", {
	        get: function () {
	            // Classes extending MDCFoundation should implement this method to return an object which exports every
	            // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
	            return {};
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCFoundation, "strings", {
	        get: function () {
	            // Classes extending MDCFoundation should implement this method to return an object which exports all
	            // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
	            return {};
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCFoundation, "numbers", {
	        get: function () {
	            // Classes extending MDCFoundation should implement this method to return an object which exports all
	            // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
	            return {};
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCFoundation, "defaultAdapter", {
	        get: function () {
	            // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
	            // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
	            // validation.
	            return {};
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCFoundation.prototype.init = function () {
	        // Subclasses should override this method to perform initialization routines (registering events, etc.)
	    };
	    MDCFoundation.prototype.destroy = function () {
	        // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
	    };
	    return MDCFoundation;
	}());

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCComponent = /** @class */ (function () {
	    function MDCComponent(root, foundation) {
	        var args = [];
	        for (var _i = 2; _i < arguments.length; _i++) {
	            args[_i - 2] = arguments[_i];
	        }
	        this.root = root;
	        this.initialize.apply(this, __spreadArray([], __read(args)));
	        // Note that we initialize foundation here and not within the constructor's
	        // default param so that this.root is defined and can be used within the
	        // foundation class.
	        this.foundation =
	            foundation === undefined ? this.getDefaultFoundation() : foundation;
	        this.foundation.init();
	        this.initialSyncWithDOM();
	    }
	    MDCComponent.attachTo = function (root) {
	        // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
	        // returns an instantiated component with its root set to that element. Also note that in the cases of
	        // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
	        // from getDefaultFoundation().
	        return new MDCComponent(root, new MDCFoundation({}));
	    };
	    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */
	    MDCComponent.prototype.initialize = function () {
	        var _args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            _args[_i] = arguments[_i];
	        }
	        // Subclasses can override this to do any additional setup work that would be considered part of a
	        // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
	        // initialized. Any additional arguments besides root and foundation will be passed in here.
	    };
	    MDCComponent.prototype.getDefaultFoundation = function () {
	        // Subclasses must override this method to return a properly configured foundation class for the
	        // component.
	        throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +
	            'foundation class');
	    };
	    MDCComponent.prototype.initialSyncWithDOM = function () {
	        // Subclasses should override this method if they need to perform work to synchronize with a host DOM
	        // object. An example of this would be a form control wrapper that needs to synchronize its internal state
	        // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
	        // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
	    };
	    MDCComponent.prototype.destroy = function () {
	        // Subclasses may implement this method to release any resources / deregister any listeners they have
	        // attached. An example of this might be deregistering a resize event from the window object.
	        this.foundation.destroy();
	    };
	    MDCComponent.prototype.listen = function (evtType, handler, options) {
	        this.root.addEventListener(evtType, handler, options);
	    };
	    MDCComponent.prototype.unlisten = function (evtType, handler, options) {
	        this.root.removeEventListener(evtType, handler, options);
	    };
	    /**
	     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
	     */
	    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {
	        if (shouldBubble === void 0) { shouldBubble = false; }
	        var evt;
	        if (typeof CustomEvent === 'function') {
	            evt = new CustomEvent(evtType, {
	                bubbles: shouldBubble,
	                detail: evtData,
	            });
	        }
	        else {
	            evt = document.createEvent('CustomEvent');
	            evt.initCustomEvent(evtType, shouldBubble, false, evtData);
	        }
	        this.root.dispatchEvent(evt);
	    };
	    return MDCComponent;
	}());

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var FOCUS_SENTINEL_CLASS = 'mdc-dom-focus-sentinel';
	/**
	 * Utility to trap focus in a given root element, e.g. for modal components such
	 * as dialogs. The root should have at least one focusable child element,
	 * for setting initial focus when trapping focus.
	 * Also tracks the previously focused element, and restores focus to that
	 * element when releasing focus.
	 */
	var FocusTrap = /** @class */ (function () {
	    function FocusTrap(root, options) {
	        if (options === void 0) { options = {}; }
	        this.root = root;
	        this.options = options;
	        // Previously focused element before trapping focus.
	        this.elFocusedBeforeTrapFocus = null;
	    }
	    /**
	     * Traps focus in `root`. Also focuses on either `initialFocusEl` if set;
	     * otherwises sets initial focus to the first focusable child element.
	     */
	    FocusTrap.prototype.trapFocus = function () {
	        var focusableEls = this.getFocusableElements(this.root);
	        if (focusableEls.length === 0) {
	            throw new Error('FocusTrap: Element must have at least one focusable child.');
	        }
	        this.elFocusedBeforeTrapFocus =
	            document.activeElement instanceof HTMLElement ? document.activeElement :
	                null;
	        this.wrapTabFocus(this.root);
	        if (!this.options.skipInitialFocus) {
	            this.focusInitialElement(focusableEls, this.options.initialFocusEl);
	        }
	    };
	    /**
	     * Releases focus from `root`. Also restores focus to the previously focused
	     * element.
	     */
	    FocusTrap.prototype.releaseFocus = function () {
	        [].slice.call(this.root.querySelectorAll("." + FOCUS_SENTINEL_CLASS))
	            .forEach(function (sentinelEl) {
	            sentinelEl.parentElement.removeChild(sentinelEl);
	        });
	        if (!this.options.skipRestoreFocus && this.elFocusedBeforeTrapFocus) {
	            this.elFocusedBeforeTrapFocus.focus();
	        }
	    };
	    /**
	     * Wraps tab focus within `el` by adding two hidden sentinel divs which are
	     * used to mark the beginning and the end of the tabbable region. When
	     * focused, these sentinel elements redirect focus to the first/last
	     * children elements of the tabbable region, ensuring that focus is trapped
	     * within that region.
	     */
	    FocusTrap.prototype.wrapTabFocus = function (el) {
	        var _this = this;
	        var sentinelStart = this.createSentinel();
	        var sentinelEnd = this.createSentinel();
	        sentinelStart.addEventListener('focus', function () {
	            var focusableEls = _this.getFocusableElements(el);
	            if (focusableEls.length > 0) {
	                focusableEls[focusableEls.length - 1].focus();
	            }
	        });
	        sentinelEnd.addEventListener('focus', function () {
	            var focusableEls = _this.getFocusableElements(el);
	            if (focusableEls.length > 0) {
	                focusableEls[0].focus();
	            }
	        });
	        el.insertBefore(sentinelStart, el.children[0]);
	        el.appendChild(sentinelEnd);
	    };
	    /**
	     * Focuses on `initialFocusEl` if defined and a child of the root element.
	     * Otherwise, focuses on the first focusable child element of the root.
	     */
	    FocusTrap.prototype.focusInitialElement = function (focusableEls, initialFocusEl) {
	        var focusIndex = 0;
	        if (initialFocusEl) {
	            focusIndex = Math.max(focusableEls.indexOf(initialFocusEl), 0);
	        }
	        focusableEls[focusIndex].focus();
	    };
	    FocusTrap.prototype.getFocusableElements = function (root) {
	        var focusableEls = [].slice.call(root.querySelectorAll('[autofocus], [tabindex], a, input, textarea, select, button'));
	        return focusableEls.filter(function (el) {
	            var isDisabledOrHidden = el.getAttribute('aria-disabled') === 'true' ||
	                el.getAttribute('disabled') != null ||
	                el.getAttribute('hidden') != null ||
	                el.getAttribute('aria-hidden') === 'true';
	            var isTabbableAndVisible = el.tabIndex >= 0 &&
	                el.getBoundingClientRect().width > 0 &&
	                !el.classList.contains(FOCUS_SENTINEL_CLASS) && !isDisabledOrHidden;
	            var isProgrammaticallyHidden = false;
	            if (isTabbableAndVisible) {
	                var style = getComputedStyle(el);
	                isProgrammaticallyHidden =
	                    style.display === 'none' || style.visibility === 'hidden';
	            }
	            return isTabbableAndVisible && !isProgrammaticallyHidden;
	        });
	    };
	    FocusTrap.prototype.createSentinel = function () {
	        var sentinel = document.createElement('div');
	        sentinel.setAttribute('tabindex', '0');
	        // Don't announce in screen readers.
	        sentinel.setAttribute('aria-hidden', 'true');
	        sentinel.classList.add(FOCUS_SENTINEL_CLASS);
	        return sentinel;
	    };
	    return FocusTrap;
	}());

	var focusTrap = {
		__proto__: null,
		FocusTrap: FocusTrap
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * @fileoverview A "ponyfill" is a polyfill that doesn't modify the global prototype chain.
	 * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.
	 */
	function closest(element, selector) {
	    if (element.closest) {
	        return element.closest(selector);
	    }
	    var el = element;
	    while (el) {
	        if (matches$2(el, selector)) {
	            return el;
	        }
	        el = el.parentElement;
	    }
	    return null;
	}
	function matches$2(element, selector) {
	    var nativeMatches = element.matches
	        || element.webkitMatchesSelector
	        || element.msMatchesSelector;
	    return nativeMatches.call(element, selector);
	}
	/**
	 * Used to compute the estimated scroll width of elements. When an element is
	 * hidden due to display: none; being applied to a parent element, the width is
	 * returned as 0. However, the element will have a true width once no longer
	 * inside a display: none context. This method computes an estimated width when
	 * the element is hidden or returns the true width when the element is visble.
	 * @param {Element} element the element whose width to estimate
	 */
	function estimateScrollWidth(element) {
	    // Check the offsetParent. If the element inherits display: none from any
	    // parent, the offsetParent property will be null (see
	    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent).
	    // This check ensures we only clone the node when necessary.
	    var htmlEl = element;
	    if (htmlEl.offsetParent !== null) {
	        return htmlEl.scrollWidth;
	    }
	    var clone = htmlEl.cloneNode(true);
	    clone.style.setProperty('position', 'absolute');
	    clone.style.setProperty('transform', 'translate(-9999px, -9999px)');
	    document.documentElement.appendChild(clone);
	    var scrollWidth = clone.scrollWidth;
	    document.documentElement.removeChild(clone);
	    return scrollWidth;
	}

	var ponyfill = {
		__proto__: null,
		closest: closest,
		matches: matches$2,
		estimateScrollWidth: estimateScrollWidth
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/** Banner element classes. */
	var cssClasses$y = {
	    CLOSING: 'mdc-banner--closing',
	    OPEN: 'mdc-banner--open',
	    OPENING: 'mdc-banner--opening',
	};
	/** Banner numbers. */
	var numbers$e = {
	    BANNER_ANIMATION_CLOSE_TIME_MS: 250,
	    BANNER_ANIMATION_OPEN_TIME_MS: 300,
	};
	/** Banner events. */
	var events$6 = {
	    CLOSED: 'MDCBanner:closed',
	    CLOSING: 'MDCBanner:closing',
	    OPENED: 'MDCBanner:opened',
	    OPENING: 'MDCBanner:opening',
	};
	/** Banner selectors. */
	var selectors$2 = {
	    CONTENT: '.mdc-banner__content',
	    PRIMARY_ACTION: '.mdc-banner__primary-action',
	    SECONDARY_ACTION: '.mdc-banner__secondary-action',
	    TEXT: '.mdc-banner__text',
	};
	/** Reason as to why the banner was closed. */
	var CloseReason;
	(function (CloseReason) {
	    // Indicates the banner was closed via primary action button.
	    CloseReason[CloseReason["PRIMARY"] = 0] = "PRIMARY";
	    // Indicates the banner was closed via secondary action button.
	    CloseReason[CloseReason["SECONDARY"] = 1] = "SECONDARY";
	    // Will never be used by the component. Provided for custom handling of
	    // programmatic closing of the banner.
	    CloseReason[CloseReason["UNSPECIFIED"] = 2] = "UNSPECIFIED";
	})(CloseReason || (CloseReason = {}));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var OPENING$1 = cssClasses$y.OPENING, OPEN$1 = cssClasses$y.OPEN, CLOSING$1 = cssClasses$y.CLOSING;
	/**
	 * Foundation class for banner. Responsibilities include opening and closing the
	 * banner.
	 */
	var MDCBannerFoundation = /** @class */ (function (_super) {
	    __extends(MDCBannerFoundation, _super);
	    function MDCBannerFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCBannerFoundation.defaultAdapter), adapter)) || this;
	        _this.isOpened = false;
	        // Request id for open animation, used to cancel the refresh callback
	        // request on close() and destroy().
	        _this.animationFrame = 0;
	        // Timer id for close and open animation, used to cancel the timer on
	        // close() and destroy().
	        _this.animationTimer = 0;
	        return _this;
	    }
	    Object.defineProperty(MDCBannerFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                getContentHeight: function () { return 0; },
	                notifyClosed: function () { return undefined; },
	                notifyClosing: function () { return undefined; },
	                notifyOpened: function () { return undefined; },
	                notifyOpening: function () { return undefined; },
	                releaseFocus: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                setStyleProperty: function () { return undefined; },
	                trapFocus: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCBannerFoundation.prototype.destroy = function () {
	        cancelAnimationFrame(this.animationFrame);
	        this.animationFrame = 0;
	        clearTimeout(this.animationTimer);
	        this.animationTimer = 0;
	    };
	    MDCBannerFoundation.prototype.open = function () {
	        var _this = this;
	        this.isOpened = true;
	        this.adapter.notifyOpening();
	        this.adapter.removeClass(CLOSING$1);
	        this.adapter.addClass(OPENING$1);
	        var contentHeight = this.adapter.getContentHeight();
	        this.animationFrame = requestAnimationFrame(function () {
	            _this.adapter.addClass(OPEN$1);
	            _this.adapter.setStyleProperty('height', contentHeight + "px");
	            _this.animationTimer = setTimeout(function () {
	                _this.handleAnimationTimerEnd();
	                _this.adapter.trapFocus();
	                _this.adapter.notifyOpened();
	            }, numbers$e.BANNER_ANIMATION_OPEN_TIME_MS);
	        });
	    };
	    /**
	     * @param reason Why the banner was closed. Value will be passed to
	     *     events.CLOSING and events.CLOSED via the `event.detail.reason`
	     *     property. Standard values are CloseReason.PRIMARY and
	     *     CloseReason.SECONDARY, but CloseReason.UNSPECIFIED is provided for
	     *     custom handling of programmatic closing of the banner.
	     */
	    MDCBannerFoundation.prototype.close = function (reason) {
	        var _this = this;
	        if (!this.isOpened) {
	            // Avoid redundant close calls (and events), e.g. repeated interactions as
	            // the banner is animating closed
	            return;
	        }
	        cancelAnimationFrame(this.animationFrame);
	        this.animationFrame = 0;
	        this.isOpened = false;
	        this.adapter.notifyClosing(reason);
	        this.adapter.addClass(CLOSING$1);
	        this.adapter.setStyleProperty('height', '0');
	        this.adapter.removeClass(OPEN$1);
	        this.adapter.removeClass(OPENING$1);
	        clearTimeout(this.animationTimer);
	        this.animationTimer = setTimeout(function () {
	            _this.adapter.releaseFocus();
	            _this.handleAnimationTimerEnd();
	            _this.adapter.notifyClosed(reason);
	        }, numbers$e.BANNER_ANIMATION_CLOSE_TIME_MS);
	    };
	    MDCBannerFoundation.prototype.isOpen = function () {
	        return this.isOpened;
	    };
	    MDCBannerFoundation.prototype.handlePrimaryActionClick = function () {
	        this.close(CloseReason.PRIMARY);
	    };
	    MDCBannerFoundation.prototype.handleSecondaryActionClick = function () {
	        this.close(CloseReason.SECONDARY);
	    };
	    MDCBannerFoundation.prototype.layout = function () {
	        var contentHeight = this.adapter.getContentHeight();
	        this.adapter.setStyleProperty('height', contentHeight + "px");
	    };
	    MDCBannerFoundation.prototype.handleAnimationTimerEnd = function () {
	        this.animationTimer = 0;
	        this.adapter.removeClass(OPENING$1);
	        this.adapter.removeClass(CLOSING$1);
	    };
	    return MDCBannerFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/** Vanilla JS implementation of banner component. */
	var MDCBanner = /** @class */ (function (_super) {
	    __extends(MDCBanner, _super);
	    function MDCBanner() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCBanner.attachTo = function (root) {
	        return new MDCBanner(root);
	    };
	    MDCBanner.prototype.initialize = function (focusTrapFactory) {
	        var _this = this;
	        if (focusTrapFactory === void 0) { focusTrapFactory = function (el, focusOptions) {
	            return new FocusTrap(el, focusOptions);
	        }; }
	        this.contentEl = this.root.querySelector(selectors$2.CONTENT);
	        this.textEl = this.root.querySelector(selectors$2.TEXT);
	        this.primaryActionEl =
	            this.root.querySelector(selectors$2.PRIMARY_ACTION);
	        this.secondaryActionEl =
	            this.root.querySelector(selectors$2.SECONDARY_ACTION);
	        this.focusTrapFactory = focusTrapFactory;
	        this.handleContentClick = function (evt) {
	            var target = evt.target;
	            if (closest(target, selectors$2.PRIMARY_ACTION)) {
	                _this.foundation.handlePrimaryActionClick();
	            }
	            else if (closest(target, selectors$2.SECONDARY_ACTION)) {
	                _this.foundation.handleSecondaryActionClick();
	            }
	        };
	    };
	    MDCBanner.prototype.initialSyncWithDOM = function () {
	        this.registerContentClickHandler(this.handleContentClick);
	        this.focusTrap = this.focusTrapFactory(this.root, { initialFocusEl: this.primaryActionEl });
	    };
	    MDCBanner.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.deregisterContentClickHandler(this.handleContentClick);
	    };
	    MDCBanner.prototype.layout = function () {
	        this.foundation.layout();
	    };
	    /**
	     * Opens the banner and fires events.OPENING to indicate the beginning of its
	     * opening animation and then events.OPENED once the animation finishes.
	     */
	    MDCBanner.prototype.open = function () {
	        this.foundation.open();
	    };
	    /**
	     * Closes the banner and fires events.CLOSING to indicate the beginning of its
	     * closing animation and then events.CLOSED once the animation finishes.
	     * @param reason Why the banner was closed. Value will be passed to
	     *     events.CLOSING and events.CLOSED via the `event.detail.reason`
	     *     property. Standard values are CloseReason.PRIMARY and
	     *     CloseReason.SECONDARY, but CloseReason.UNSPECIFIED is provided for
	     *     custom handling of programmatic closing of the banner.
	     */
	    MDCBanner.prototype.close = function (reason) {
	        this.foundation.close(reason);
	    };
	    MDCBanner.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take
	        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
	        // methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            getContentHeight: function () {
	                return _this.contentEl.offsetHeight;
	            },
	            notifyClosed: function (reason) {
	                _this.emit(events$6.CLOSED, { reason: reason });
	            },
	            notifyClosing: function (reason) {
	                _this.emit(events$6.CLOSING, { reason: reason });
	            },
	            notifyOpened: function () {
	                _this.emit(events$6.OPENED, {});
	            },
	            notifyOpening: function () {
	                _this.emit(events$6.OPENING, {});
	            },
	            releaseFocus: function () {
	                _this.focusTrap.releaseFocus();
	            },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            setStyleProperty: function (propertyName, value) {
	                _this.root.style.setProperty(propertyName, value);
	            },
	            trapFocus: function () {
	                _this.focusTrap.trapFocus();
	            },
	        };
	        return new MDCBannerFoundation(adapter);
	    };
	    Object.defineProperty(MDCBanner.prototype, "isOpen", {
	        get: function () {
	            return this.foundation.isOpen();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCBanner.prototype.getText = function () {
	        return this.textEl.textContent || '';
	    };
	    MDCBanner.prototype.setText = function (text) {
	        this.textEl.textContent = text;
	    };
	    MDCBanner.prototype.getPrimaryActionText = function () {
	        return this.primaryActionEl.textContent || '';
	    };
	    MDCBanner.prototype.setPrimaryActionText = function (actionButtonText) {
	        this.primaryActionEl.textContent = actionButtonText;
	    };
	    /** Returns null if the banner has no secondary action. */
	    MDCBanner.prototype.getSecondaryActionText = function () {
	        return this.secondaryActionEl ? this.secondaryActionEl.textContent || '' :
	            null;
	    };
	    MDCBanner.prototype.setSecondaryActionText = function (actionButtonText) {
	        if (this.secondaryActionEl) {
	            this.secondaryActionEl.textContent = actionButtonText;
	        }
	    };
	    MDCBanner.prototype.registerContentClickHandler = function (handler) {
	        this.contentEl.addEventListener('click', handler);
	    };
	    MDCBanner.prototype.deregisterContentClickHandler = function (handler) {
	        this.contentEl.removeEventListener('click', handler);
	    };
	    return MDCBanner;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$w = {
		__proto__: null,
		MDCBanner: MDCBanner,
		cssClasses: cssClasses$y,
		numbers: numbers$e,
		events: events$6,
		selectors: selectors$2,
		get CloseReason () { return CloseReason; },
		MDCBannerFoundation: MDCBannerFoundation
	};

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	// tslint:enable:no-any

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$v = {
		__proto__: null,
		MDCComponent: MDCComponent,
		MDCFoundation: MDCFoundation
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssPropertyNameMap = {
	    animation: {
	        prefixed: '-webkit-animation',
	        standard: 'animation',
	    },
	    transform: {
	        prefixed: '-webkit-transform',
	        standard: 'transform',
	    },
	    transition: {
	        prefixed: '-webkit-transition',
	        standard: 'transition',
	    },
	};
	var jsEventTypeMap = {
	    animationend: {
	        cssProperty: 'animation',
	        prefixed: 'webkitAnimationEnd',
	        standard: 'animationend',
	    },
	    animationiteration: {
	        cssProperty: 'animation',
	        prefixed: 'webkitAnimationIteration',
	        standard: 'animationiteration',
	    },
	    animationstart: {
	        cssProperty: 'animation',
	        prefixed: 'webkitAnimationStart',
	        standard: 'animationstart',
	    },
	    transitionend: {
	        cssProperty: 'transition',
	        prefixed: 'webkitTransitionEnd',
	        standard: 'transitionend',
	    },
	};
	function isWindow(windowObj) {
	    return Boolean(windowObj.document) && typeof windowObj.document.createElement === 'function';
	}
	function getCorrectPropertyName(windowObj, cssProperty) {
	    if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {
	        var el = windowObj.document.createElement('div');
	        var _a = cssPropertyNameMap[cssProperty], standard = _a.standard, prefixed = _a.prefixed;
	        var isStandard = standard in el.style;
	        return isStandard ? standard : prefixed;
	    }
	    return cssProperty;
	}
	function getCorrectEventName(windowObj, eventType) {
	    if (isWindow(windowObj) && eventType in jsEventTypeMap) {
	        var el = windowObj.document.createElement('div');
	        var _a = jsEventTypeMap[eventType], standard = _a.standard, prefixed = _a.prefixed, cssProperty = _a.cssProperty;
	        var isStandard = cssProperty in el.style;
	        return isStandard ? standard : prefixed;
	    }
	    return eventType;
	}

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Determine whether the current browser supports passive event listeners, and
	 * if so, use them.
	 */
	function applyPassive(globalObj) {
	    if (globalObj === void 0) { globalObj = window; }
	    return supportsPassiveOption(globalObj) ?
	        { passive: true } :
	        false;
	}
	function supportsPassiveOption(globalObj) {
	    if (globalObj === void 0) { globalObj = window; }
	    // See
	    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
	    var passiveSupported = false;
	    try {
	        var options = {
	            // This function will be called when the browser
	            // attempts to access the passive property.
	            get passive() {
	                passiveSupported = true;
	                return false;
	            }
	        };
	        var handler = function () { };
	        globalObj.document.addEventListener('test', handler, options);
	        globalObj.document.removeEventListener('test', handler, options);
	    }
	    catch (err) {
	        passiveSupported = false;
	    }
	    return passiveSupported;
	}

	var events$5 = {
		__proto__: null,
		applyPassive: applyPassive
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$x = {
	    // Ripple is a special case where the "root" component is really a "mixin" of sorts,
	    // given that it's an 'upgrade' to an existing component. That being said it is the root
	    // CSS class that all other CSS classes derive from.
	    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
	    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
	    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',
	    ROOT: 'mdc-ripple-upgraded',
	    UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
	};
	var strings$z = {
	    VAR_FG_SCALE: '--mdc-ripple-fg-scale',
	    VAR_FG_SIZE: '--mdc-ripple-fg-size',
	    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',
	    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
	    VAR_LEFT: '--mdc-ripple-left',
	    VAR_TOP: '--mdc-ripple-top',
	};
	var numbers$d = {
	    DEACTIVATION_TIMEOUT_MS: 225,
	    FG_DEACTIVATION_MS: 150,
	    INITIAL_ORIGIN_SCALE: 0.6,
	    PADDING: 10,
	    TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices
	};

	/**
	 * Stores result from supportsCssVariables to avoid redundant processing to
	 * detect CSS custom variable support.
	 */
	var supportsCssVariables_;
	function supportsCssVariables(windowObj, forceRefresh) {
	    if (forceRefresh === void 0) { forceRefresh = false; }
	    var CSS = windowObj.CSS;
	    var supportsCssVars = supportsCssVariables_;
	    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
	        return supportsCssVariables_;
	    }
	    var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';
	    if (!supportsFunctionPresent) {
	        return false;
	    }
	    var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');
	    // See: https://bugs.webkit.org/show_bug.cgi?id=154669
	    // See: README section on Safari
	    var weAreFeatureDetectingSafari10plus = (CSS.supports('(--css-vars: yes)') &&
	        CSS.supports('color', '#00000000'));
	    supportsCssVars =
	        explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;
	    if (!forceRefresh) {
	        supportsCssVariables_ = supportsCssVars;
	    }
	    return supportsCssVars;
	}
	function getNormalizedEventCoords(evt, pageOffset, clientRect) {
	    if (!evt) {
	        return { x: 0, y: 0 };
	    }
	    var x = pageOffset.x, y = pageOffset.y;
	    var documentX = x + clientRect.left;
	    var documentY = y + clientRect.top;
	    var normalizedX;
	    var normalizedY;
	    // Determine touch point relative to the ripple container.
	    if (evt.type === 'touchstart') {
	        var touchEvent = evt;
	        normalizedX = touchEvent.changedTouches[0].pageX - documentX;
	        normalizedY = touchEvent.changedTouches[0].pageY - documentY;
	    }
	    else {
	        var mouseEvent = evt;
	        normalizedX = mouseEvent.pageX - documentX;
	        normalizedY = mouseEvent.pageY - documentY;
	    }
	    return { x: normalizedX, y: normalizedY };
	}

	var util$4 = {
		__proto__: null,
		supportsCssVariables: supportsCssVariables,
		getNormalizedEventCoords: getNormalizedEventCoords
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	// Activation events registered on the root element of each instance for activation
	var ACTIVATION_EVENT_TYPES = [
	    'touchstart', 'pointerdown', 'mousedown', 'keydown',
	];
	// Deactivation events registered on documentElement when a pointer-related down event occurs
	var POINTER_DEACTIVATION_EVENT_TYPES = [
	    'touchend', 'pointerup', 'mouseup', 'contextmenu',
	];
	// simultaneous nested activations
	var activatedTargets = [];
	var MDCRippleFoundation = /** @class */ (function (_super) {
	    __extends(MDCRippleFoundation, _super);
	    function MDCRippleFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;
	        _this.activationAnimationHasEnded = false;
	        _this.activationTimer = 0;
	        _this.fgDeactivationRemovalTimer = 0;
	        _this.fgScale = '0';
	        _this.frame = { width: 0, height: 0 };
	        _this.initialSize = 0;
	        _this.layoutFrame = 0;
	        _this.maxRadius = 0;
	        _this.unboundedCoords = { left: 0, top: 0 };
	        _this.activationState = _this.defaultActivationState();
	        _this.activationTimerCallback = function () {
	            _this.activationAnimationHasEnded = true;
	            _this.runDeactivationUXLogicIfReady();
	        };
	        _this.activateHandler = function (e) {
	            _this.activateImpl(e);
	        };
	        _this.deactivateHandler = function () {
	            _this.deactivateImpl();
	        };
	        _this.focusHandler = function () {
	            _this.handleFocus();
	        };
	        _this.blurHandler = function () {
	            _this.handleBlur();
	        };
	        _this.resizeHandler = function () {
	            _this.layout();
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCRippleFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$x;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCRippleFoundation, "strings", {
	        get: function () {
	            return strings$z;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCRippleFoundation, "numbers", {
	        get: function () {
	            return numbers$d;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCRippleFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                browserSupportsCssVars: function () { return true; },
	                computeBoundingRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                containsEventTarget: function () { return true; },
	                deregisterDocumentInteractionHandler: function () { return undefined; },
	                deregisterInteractionHandler: function () { return undefined; },
	                deregisterResizeHandler: function () { return undefined; },
	                getWindowPageOffset: function () { return ({ x: 0, y: 0 }); },
	                isSurfaceActive: function () { return true; },
	                isSurfaceDisabled: function () { return true; },
	                isUnbounded: function () { return true; },
	                registerDocumentInteractionHandler: function () { return undefined; },
	                registerInteractionHandler: function () { return undefined; },
	                registerResizeHandler: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                updateCssVariable: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCRippleFoundation.prototype.init = function () {
	        var _this = this;
	        var supportsPressRipple = this.supportsPressRipple();
	        this.registerRootHandlers(supportsPressRipple);
	        if (supportsPressRipple) {
	            var _a = MDCRippleFoundation.cssClasses, ROOT_1 = _a.ROOT, UNBOUNDED_1 = _a.UNBOUNDED;
	            requestAnimationFrame(function () {
	                _this.adapter.addClass(ROOT_1);
	                if (_this.adapter.isUnbounded()) {
	                    _this.adapter.addClass(UNBOUNDED_1);
	                    // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple
	                    _this.layoutInternal();
	                }
	            });
	        }
	    };
	    MDCRippleFoundation.prototype.destroy = function () {
	        var _this = this;
	        if (this.supportsPressRipple()) {
	            if (this.activationTimer) {
	                clearTimeout(this.activationTimer);
	                this.activationTimer = 0;
	                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);
	            }
	            if (this.fgDeactivationRemovalTimer) {
	                clearTimeout(this.fgDeactivationRemovalTimer);
	                this.fgDeactivationRemovalTimer = 0;
	                this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);
	            }
	            var _a = MDCRippleFoundation.cssClasses, ROOT_2 = _a.ROOT, UNBOUNDED_2 = _a.UNBOUNDED;
	            requestAnimationFrame(function () {
	                _this.adapter.removeClass(ROOT_2);
	                _this.adapter.removeClass(UNBOUNDED_2);
	                _this.removeCssVars();
	            });
	        }
	        this.deregisterRootHandlers();
	        this.deregisterDeactivationHandlers();
	    };
	    /**
	     * @param evt Optional event containing position information.
	     */
	    MDCRippleFoundation.prototype.activate = function (evt) {
	        this.activateImpl(evt);
	    };
	    MDCRippleFoundation.prototype.deactivate = function () {
	        this.deactivateImpl();
	    };
	    MDCRippleFoundation.prototype.layout = function () {
	        var _this = this;
	        if (this.layoutFrame) {
	            cancelAnimationFrame(this.layoutFrame);
	        }
	        this.layoutFrame = requestAnimationFrame(function () {
	            _this.layoutInternal();
	            _this.layoutFrame = 0;
	        });
	    };
	    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {
	        var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;
	        if (unbounded) {
	            this.adapter.addClass(UNBOUNDED);
	        }
	        else {
	            this.adapter.removeClass(UNBOUNDED);
	        }
	    };
	    MDCRippleFoundation.prototype.handleFocus = function () {
	        var _this = this;
	        requestAnimationFrame(function () { return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });
	    };
	    MDCRippleFoundation.prototype.handleBlur = function () {
	        var _this = this;
	        requestAnimationFrame(function () { return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED); });
	    };
	    /**
	     * We compute this property so that we are not querying information about the client
	     * until the point in time where the foundation requests it. This prevents scenarios where
	     * client-side feature-detection may happen too early, such as when components are rendered on the server
	     * and then initialized at mount time on the client.
	     */
	    MDCRippleFoundation.prototype.supportsPressRipple = function () {
	        return this.adapter.browserSupportsCssVars();
	    };
	    MDCRippleFoundation.prototype.defaultActivationState = function () {
	        return {
	            activationEvent: undefined,
	            hasDeactivationUXRun: false,
	            isActivated: false,
	            isProgrammatic: false,
	            wasActivatedByPointer: false,
	            wasElementMadeActive: false,
	        };
	    };
	    /**
	     * supportsPressRipple Passed from init to save a redundant function call
	     */
	    MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {
	        var e_1, _a;
	        if (supportsPressRipple) {
	            try {
	                for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {
	                    var evtType = ACTIVATION_EVENT_TYPES_1_1.value;
	                    this.adapter.registerInteractionHandler(evtType, this.activateHandler);
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            if (this.adapter.isUnbounded()) {
	                this.adapter.registerResizeHandler(this.resizeHandler);
	            }
	        }
	        this.adapter.registerInteractionHandler('focus', this.focusHandler);
	        this.adapter.registerInteractionHandler('blur', this.blurHandler);
	    };
	    MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {
	        var e_2, _a;
	        if (evt.type === 'keydown') {
	            this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);
	        }
	        else {
	            try {
	                for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {
	                    var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;
	                    this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);
	                }
	            }
	            catch (e_2_1) { e_2 = { error: e_2_1 }; }
	            finally {
	                try {
	                    if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);
	                }
	                finally { if (e_2) throw e_2.error; }
	            }
	        }
	    };
	    MDCRippleFoundation.prototype.deregisterRootHandlers = function () {
	        var e_3, _a;
	        try {
	            for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {
	                var evtType = ACTIVATION_EVENT_TYPES_2_1.value;
	                this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	        this.adapter.deregisterInteractionHandler('focus', this.focusHandler);
	        this.adapter.deregisterInteractionHandler('blur', this.blurHandler);
	        if (this.adapter.isUnbounded()) {
	            this.adapter.deregisterResizeHandler(this.resizeHandler);
	        }
	    };
	    MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {
	        var e_4, _a;
	        this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);
	        try {
	            for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {
	                var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;
	                this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);
	            }
	        }
	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
	        finally {
	            try {
	                if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);
	            }
	            finally { if (e_4) throw e_4.error; }
	        }
	    };
	    MDCRippleFoundation.prototype.removeCssVars = function () {
	        var _this = this;
	        var rippleStrings = MDCRippleFoundation.strings;
	        var keys = Object.keys(rippleStrings);
	        keys.forEach(function (key) {
	            if (key.indexOf('VAR_') === 0) {
	                _this.adapter.updateCssVariable(rippleStrings[key], null);
	            }
	        });
	    };
	    MDCRippleFoundation.prototype.activateImpl = function (evt) {
	        var _this = this;
	        if (this.adapter.isSurfaceDisabled()) {
	            return;
	        }
	        var activationState = this.activationState;
	        if (activationState.isActivated) {
	            return;
	        }
	        // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction
	        var previousActivationEvent = this.previousActivationEvent;
	        var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;
	        if (isSameInteraction) {
	            return;
	        }
	        activationState.isActivated = true;
	        activationState.isProgrammatic = evt === undefined;
	        activationState.activationEvent = evt;
	        activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');
	        var hasActivatedChild = evt !== undefined &&
	            activatedTargets.length > 0 &&
	            activatedTargets.some(function (target) { return _this.adapter.containsEventTarget(target); });
	        if (hasActivatedChild) {
	            // Immediately reset activation state, while preserving logic that prevents touch follow-on events
	            this.resetActivationState();
	            return;
	        }
	        if (evt !== undefined) {
	            activatedTargets.push(evt.target);
	            this.registerDeactivationHandlers(evt);
	        }
	        activationState.wasElementMadeActive = this.checkElementMadeActive(evt);
	        if (activationState.wasElementMadeActive) {
	            this.animateActivation();
	        }
	        requestAnimationFrame(function () {
	            // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples
	            activatedTargets = [];
	            if (!activationState.wasElementMadeActive
	                && evt !== undefined
	                && (evt.key === ' ' || evt.keyCode === 32)) {
	                // If space was pressed, try again within an rAF call to detect :active, because different UAs report
	                // active states inconsistently when they're called within event handling code:
	                // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
	                // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
	                // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS
	                // variable is set within a rAF callback for a submit button interaction (#2241).
	                activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);
	                if (activationState.wasElementMadeActive) {
	                    _this.animateActivation();
	                }
	            }
	            if (!activationState.wasElementMadeActive) {
	                // Reset activation state immediately if element was not made active.
	                _this.activationState = _this.defaultActivationState();
	            }
	        });
	    };
	    MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {
	        return (evt !== undefined && evt.type === 'keydown') ?
	            this.adapter.isSurfaceActive() :
	            true;
	    };
	    MDCRippleFoundation.prototype.animateActivation = function () {
	        var _this = this;
	        var _a = MDCRippleFoundation.strings, VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;
	        var _b = MDCRippleFoundation.cssClasses, FG_DEACTIVATION = _b.FG_DEACTIVATION, FG_ACTIVATION = _b.FG_ACTIVATION;
	        var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;
	        this.layoutInternal();
	        var translateStart = '';
	        var translateEnd = '';
	        if (!this.adapter.isUnbounded()) {
	            var _c = this.getFgTranslationCoordinates(), startPoint = _c.startPoint, endPoint = _c.endPoint;
	            translateStart = startPoint.x + "px, " + startPoint.y + "px";
	            translateEnd = endPoint.x + "px, " + endPoint.y + "px";
	        }
	        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
	        this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
	        // Cancel any ongoing activation/deactivation animations
	        clearTimeout(this.activationTimer);
	        clearTimeout(this.fgDeactivationRemovalTimer);
	        this.rmBoundedActivationClasses();
	        this.adapter.removeClass(FG_DEACTIVATION);
	        // Force layout in order to re-trigger the animation.
	        this.adapter.computeBoundingRect();
	        this.adapter.addClass(FG_ACTIVATION);
	        this.activationTimer = setTimeout(function () {
	            _this.activationTimerCallback();
	        }, DEACTIVATION_TIMEOUT_MS);
	    };
	    MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {
	        var _a = this.activationState, activationEvent = _a.activationEvent, wasActivatedByPointer = _a.wasActivatedByPointer;
	        var startPoint;
	        if (wasActivatedByPointer) {
	            startPoint = getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());
	        }
	        else {
	            startPoint = {
	                x: this.frame.width / 2,
	                y: this.frame.height / 2,
	            };
	        }
	        // Center the element around the start point.
	        startPoint = {
	            x: startPoint.x - (this.initialSize / 2),
	            y: startPoint.y - (this.initialSize / 2),
	        };
	        var endPoint = {
	            x: (this.frame.width / 2) - (this.initialSize / 2),
	            y: (this.frame.height / 2) - (this.initialSize / 2),
	        };
	        return { startPoint: startPoint, endPoint: endPoint };
	    };
	    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {
	        var _this = this;
	        // This method is called both when a pointing device is released, and when the activation animation ends.
	        // The deactivation animation should only run after both of those occur.
	        var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
	        var _a = this.activationState, hasDeactivationUXRun = _a.hasDeactivationUXRun, isActivated = _a.isActivated;
	        var activationHasEnded = hasDeactivationUXRun || !isActivated;
	        if (activationHasEnded && this.activationAnimationHasEnded) {
	            this.rmBoundedActivationClasses();
	            this.adapter.addClass(FG_DEACTIVATION);
	            this.fgDeactivationRemovalTimer = setTimeout(function () {
	                _this.adapter.removeClass(FG_DEACTIVATION);
	            }, numbers$d.FG_DEACTIVATION_MS);
	        }
	    };
	    MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {
	        var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;
	        this.adapter.removeClass(FG_ACTIVATION);
	        this.activationAnimationHasEnded = false;
	        this.adapter.computeBoundingRect();
	    };
	    MDCRippleFoundation.prototype.resetActivationState = function () {
	        var _this = this;
	        this.previousActivationEvent = this.activationState.activationEvent;
	        this.activationState = this.defaultActivationState();
	        // Touch devices may fire additional events for the same interaction within a short time.
	        // Store the previous event until it's safe to assume that subsequent events are for new interactions.
	        setTimeout(function () { return _this.previousActivationEvent = undefined; }, MDCRippleFoundation.numbers.TAP_DELAY_MS);
	    };
	    MDCRippleFoundation.prototype.deactivateImpl = function () {
	        var _this = this;
	        var activationState = this.activationState;
	        // This can happen in scenarios such as when you have a keyup event that blurs the element.
	        if (!activationState.isActivated) {
	            return;
	        }
	        var state = __assign({}, activationState);
	        if (activationState.isProgrammatic) {
	            requestAnimationFrame(function () {
	                _this.animateDeactivation(state);
	            });
	            this.resetActivationState();
	        }
	        else {
	            this.deregisterDeactivationHandlers();
	            requestAnimationFrame(function () {
	                _this.activationState.hasDeactivationUXRun = true;
	                _this.animateDeactivation(state);
	                _this.resetActivationState();
	            });
	        }
	    };
	    MDCRippleFoundation.prototype.animateDeactivation = function (_a) {
	        var wasActivatedByPointer = _a.wasActivatedByPointer, wasElementMadeActive = _a.wasElementMadeActive;
	        if (wasActivatedByPointer || wasElementMadeActive) {
	            this.runDeactivationUXLogicIfReady();
	        }
	    };
	    MDCRippleFoundation.prototype.layoutInternal = function () {
	        var _this = this;
	        this.frame = this.adapter.computeBoundingRect();
	        var maxDim = Math.max(this.frame.height, this.frame.width);
	        // Surface diameter is treated differently for unbounded vs. bounded ripples.
	        // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately
	        // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically
	        // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter
	        // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via
	        // `overflow: hidden`.
	        var getBoundedRadius = function () {
	            var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));
	            return hypotenuse + MDCRippleFoundation.numbers.PADDING;
	        };
	        this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();
	        // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform
	        var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);
	        // Unbounded ripple size should always be even number to equally center align.
	        if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {
	            this.initialSize = initialSize - 1;
	        }
	        else {
	            this.initialSize = initialSize;
	        }
	        this.fgScale = "" + this.maxRadius / this.initialSize;
	        this.updateLayoutCssVars();
	    };
	    MDCRippleFoundation.prototype.updateLayoutCssVars = function () {
	        var _a = MDCRippleFoundation.strings, VAR_FG_SIZE = _a.VAR_FG_SIZE, VAR_LEFT = _a.VAR_LEFT, VAR_TOP = _a.VAR_TOP, VAR_FG_SCALE = _a.VAR_FG_SCALE;
	        this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + "px");
	        this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);
	        if (this.adapter.isUnbounded()) {
	            this.unboundedCoords = {
	                left: Math.round((this.frame.width / 2) - (this.initialSize / 2)),
	                top: Math.round((this.frame.height / 2) - (this.initialSize / 2)),
	            };
	            this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + "px");
	            this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + "px");
	        }
	    };
	    return MDCRippleFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCRipple = /** @class */ (function (_super) {
	    __extends(MDCRipple, _super);
	    function MDCRipple() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.disabled = false;
	        return _this;
	    }
	    MDCRipple.attachTo = function (root, opts) {
	        if (opts === void 0) { opts = {
	            isUnbounded: undefined
	        }; }
	        var ripple = new MDCRipple(root);
	        // Only override unbounded behavior if option is explicitly specified
	        if (opts.isUnbounded !== undefined) {
	            ripple.unbounded = opts.isUnbounded;
	        }
	        return ripple;
	    };
	    MDCRipple.createAdapter = function (instance) {
	        return {
	            addClass: function (className) { return instance.root.classList.add(className); },
	            browserSupportsCssVars: function () { return supportsCssVariables(window); },
	            computeBoundingRect: function () { return instance.root.getBoundingClientRect(); },
	            containsEventTarget: function (target) { return instance.root.contains(target); },
	            deregisterDocumentInteractionHandler: function (evtType, handler) {
	                return document.documentElement.removeEventListener(evtType, handler, applyPassive());
	            },
	            deregisterInteractionHandler: function (evtType, handler) {
	                return instance.root
	                    .removeEventListener(evtType, handler, applyPassive());
	            },
	            deregisterResizeHandler: function (handler) {
	                return window.removeEventListener('resize', handler);
	            },
	            getWindowPageOffset: function () {
	                return ({ x: window.pageXOffset, y: window.pageYOffset });
	            },
	            isSurfaceActive: function () { return matches$2(instance.root, ':active'); },
	            isSurfaceDisabled: function () { return Boolean(instance.disabled); },
	            isUnbounded: function () { return Boolean(instance.unbounded); },
	            registerDocumentInteractionHandler: function (evtType, handler) {
	                return document.documentElement.addEventListener(evtType, handler, applyPassive());
	            },
	            registerInteractionHandler: function (evtType, handler) {
	                return instance.root
	                    .addEventListener(evtType, handler, applyPassive());
	            },
	            registerResizeHandler: function (handler) {
	                return window.addEventListener('resize', handler);
	            },
	            removeClass: function (className) { return instance.root.classList.remove(className); },
	            updateCssVariable: function (varName, value) {
	                return instance.root.style.setProperty(varName, value);
	            },
	        };
	    };
	    Object.defineProperty(MDCRipple.prototype, "unbounded", {
	        get: function () {
	            return Boolean(this.isUnbounded);
	        },
	        set: function (unbounded) {
	            this.isUnbounded = Boolean(unbounded);
	            this.setUnbounded();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCRipple.prototype.activate = function () {
	        this.foundation.activate();
	    };
	    MDCRipple.prototype.deactivate = function () {
	        this.foundation.deactivate();
	    };
	    MDCRipple.prototype.layout = function () {
	        this.foundation.layout();
	    };
	    MDCRipple.prototype.getDefaultFoundation = function () {
	        return new MDCRippleFoundation(MDCRipple.createAdapter(this));
	    };
	    MDCRipple.prototype.initialSyncWithDOM = function () {
	        var root = this.root;
	        this.isUnbounded = 'mdcRippleIsUnbounded' in root.dataset;
	    };
	    /**
	     * Closure Compiler throws an access control error when directly accessing a
	     * protected or private property inside a getter/setter, like unbounded above.
	     * By accessing the protected property inside a method, we solve that problem.
	     * That's why this function exists.
	     */
	    MDCRipple.prototype.setUnbounded = function () {
	        this.foundation.setUnbounded(Boolean(this.isUnbounded));
	    };
	    return MDCRipple;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$w = {
	    ANIM_CHECKED_INDETERMINATE: 'mdc-checkbox--anim-checked-indeterminate',
	    ANIM_CHECKED_UNCHECKED: 'mdc-checkbox--anim-checked-unchecked',
	    ANIM_INDETERMINATE_CHECKED: 'mdc-checkbox--anim-indeterminate-checked',
	    ANIM_INDETERMINATE_UNCHECKED: 'mdc-checkbox--anim-indeterminate-unchecked',
	    ANIM_UNCHECKED_CHECKED: 'mdc-checkbox--anim-unchecked-checked',
	    ANIM_UNCHECKED_INDETERMINATE: 'mdc-checkbox--anim-unchecked-indeterminate',
	    BACKGROUND: 'mdc-checkbox__background',
	    CHECKED: 'mdc-checkbox--checked',
	    CHECKMARK: 'mdc-checkbox__checkmark',
	    CHECKMARK_PATH: 'mdc-checkbox__checkmark-path',
	    DISABLED: 'mdc-checkbox--disabled',
	    INDETERMINATE: 'mdc-checkbox--indeterminate',
	    MIXEDMARK: 'mdc-checkbox__mixedmark',
	    NATIVE_CONTROL: 'mdc-checkbox__native-control',
	    ROOT: 'mdc-checkbox',
	    SELECTED: 'mdc-checkbox--selected',
	    UPGRADED: 'mdc-checkbox--upgraded',
	};
	var strings$y = {
	    ARIA_CHECKED_ATTR: 'aria-checked',
	    ARIA_CHECKED_INDETERMINATE_VALUE: 'mixed',
	    DATA_INDETERMINATE_ATTR: 'data-indeterminate',
	    NATIVE_CONTROL_SELECTOR: '.mdc-checkbox__native-control',
	    TRANSITION_STATE_CHECKED: 'checked',
	    TRANSITION_STATE_INDETERMINATE: 'indeterminate',
	    TRANSITION_STATE_INIT: 'init',
	    TRANSITION_STATE_UNCHECKED: 'unchecked',
	};
	var numbers$c = {
	    ANIM_END_LATCH_MS: 250,
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCCheckboxFoundation = /** @class */ (function (_super) {
	    __extends(MDCCheckboxFoundation, _super);
	    function MDCCheckboxFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCCheckboxFoundation.defaultAdapter), adapter)) || this;
	        _this.currentCheckState = strings$y.TRANSITION_STATE_INIT;
	        _this.currentAnimationClass = '';
	        _this.animEndLatchTimer = 0;
	        _this.enableAnimationEndHandler = false;
	        return _this;
	    }
	    Object.defineProperty(MDCCheckboxFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$w;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCCheckboxFoundation, "strings", {
	        get: function () {
	            return strings$y;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCCheckboxFoundation, "numbers", {
	        get: function () {
	            return numbers$c;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCCheckboxFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                forceLayout: function () { return undefined; },
	                hasNativeControl: function () { return false; },
	                isAttachedToDOM: function () { return false; },
	                isChecked: function () { return false; },
	                isIndeterminate: function () { return false; },
	                removeClass: function () { return undefined; },
	                removeNativeControlAttr: function () { return undefined; },
	                setNativeControlAttr: function () { return undefined; },
	                setNativeControlDisabled: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCCheckboxFoundation.prototype.init = function () {
	        this.currentCheckState = this.determineCheckState();
	        this.updateAriaChecked();
	        this.adapter.addClass(cssClasses$w.UPGRADED);
	    };
	    MDCCheckboxFoundation.prototype.destroy = function () {
	        clearTimeout(this.animEndLatchTimer);
	    };
	    MDCCheckboxFoundation.prototype.setDisabled = function (disabled) {
	        this.adapter.setNativeControlDisabled(disabled);
	        if (disabled) {
	            this.adapter.addClass(cssClasses$w.DISABLED);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$w.DISABLED);
	        }
	    };
	    /**
	     * Handles the animationend event for the checkbox
	     */
	    MDCCheckboxFoundation.prototype.handleAnimationEnd = function () {
	        var _this = this;
	        if (!this.enableAnimationEndHandler) {
	            return;
	        }
	        clearTimeout(this.animEndLatchTimer);
	        this.animEndLatchTimer = setTimeout(function () {
	            _this.adapter.removeClass(_this.currentAnimationClass);
	            _this.enableAnimationEndHandler = false;
	        }, numbers$c.ANIM_END_LATCH_MS);
	    };
	    /**
	     * Handles the change event for the checkbox
	     */
	    MDCCheckboxFoundation.prototype.handleChange = function () {
	        this.transitionCheckState();
	    };
	    MDCCheckboxFoundation.prototype.transitionCheckState = function () {
	        if (!this.adapter.hasNativeControl()) {
	            return;
	        }
	        var oldState = this.currentCheckState;
	        var newState = this.determineCheckState();
	        if (oldState === newState) {
	            return;
	        }
	        this.updateAriaChecked();
	        var TRANSITION_STATE_UNCHECKED = strings$y.TRANSITION_STATE_UNCHECKED;
	        var SELECTED = cssClasses$w.SELECTED;
	        if (newState === TRANSITION_STATE_UNCHECKED) {
	            this.adapter.removeClass(SELECTED);
	        }
	        else {
	            this.adapter.addClass(SELECTED);
	        }
	        // Check to ensure that there isn't a previously existing animation class, in case for example
	        // the user interacted with the checkbox before the animation was finished.
	        if (this.currentAnimationClass.length > 0) {
	            clearTimeout(this.animEndLatchTimer);
	            this.adapter.forceLayout();
	            this.adapter.removeClass(this.currentAnimationClass);
	        }
	        this.currentAnimationClass =
	            this.getTransitionAnimationClass(oldState, newState);
	        this.currentCheckState = newState;
	        // Check for parentNode so that animations are only run when the element is attached
	        // to the DOM.
	        if (this.adapter.isAttachedToDOM() &&
	            this.currentAnimationClass.length > 0) {
	            this.adapter.addClass(this.currentAnimationClass);
	            this.enableAnimationEndHandler = true;
	        }
	    };
	    MDCCheckboxFoundation.prototype.determineCheckState = function () {
	        var TRANSITION_STATE_INDETERMINATE = strings$y.TRANSITION_STATE_INDETERMINATE, TRANSITION_STATE_CHECKED = strings$y.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings$y.TRANSITION_STATE_UNCHECKED;
	        if (this.adapter.isIndeterminate()) {
	            return TRANSITION_STATE_INDETERMINATE;
	        }
	        return this.adapter.isChecked() ? TRANSITION_STATE_CHECKED :
	            TRANSITION_STATE_UNCHECKED;
	    };
	    MDCCheckboxFoundation.prototype.getTransitionAnimationClass = function (oldState, newState) {
	        var TRANSITION_STATE_INIT = strings$y.TRANSITION_STATE_INIT, TRANSITION_STATE_CHECKED = strings$y.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings$y.TRANSITION_STATE_UNCHECKED;
	        var _a = MDCCheckboxFoundation.cssClasses, ANIM_UNCHECKED_CHECKED = _a.ANIM_UNCHECKED_CHECKED, ANIM_UNCHECKED_INDETERMINATE = _a.ANIM_UNCHECKED_INDETERMINATE, ANIM_CHECKED_UNCHECKED = _a.ANIM_CHECKED_UNCHECKED, ANIM_CHECKED_INDETERMINATE = _a.ANIM_CHECKED_INDETERMINATE, ANIM_INDETERMINATE_CHECKED = _a.ANIM_INDETERMINATE_CHECKED, ANIM_INDETERMINATE_UNCHECKED = _a.ANIM_INDETERMINATE_UNCHECKED;
	        switch (oldState) {
	            case TRANSITION_STATE_INIT:
	                if (newState === TRANSITION_STATE_UNCHECKED) {
	                    return '';
	                }
	                return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
	            case TRANSITION_STATE_UNCHECKED:
	                return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;
	            case TRANSITION_STATE_CHECKED:
	                return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;
	            default: // TRANSITION_STATE_INDETERMINATE
	                return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
	        }
	    };
	    MDCCheckboxFoundation.prototype.updateAriaChecked = function () {
	        // Ensure aria-checked is set to mixed if checkbox is in indeterminate state.
	        if (this.adapter.isIndeterminate()) {
	            this.adapter.setNativeControlAttr(strings$y.ARIA_CHECKED_ATTR, strings$y.ARIA_CHECKED_INDETERMINATE_VALUE);
	        }
	        else {
	            // The on/off state does not need to keep track of aria-checked, since
	            // the screenreader uses the checked property on the checkbox element.
	            this.adapter.removeNativeControlAttr(strings$y.ARIA_CHECKED_ATTR);
	        }
	    };
	    return MDCCheckboxFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var CB_PROTO_PROPS = ['checked', 'indeterminate'];
	var MDCCheckbox = /** @class */ (function (_super) {
	    __extends(MDCCheckbox, _super);
	    function MDCCheckbox() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.rippleSurface = _this.createRipple();
	        return _this;
	    }
	    MDCCheckbox.attachTo = function (root) {
	        return new MDCCheckbox(root);
	    };
	    Object.defineProperty(MDCCheckbox.prototype, "ripple", {
	        get: function () {
	            return this.rippleSurface;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCCheckbox.prototype, "checked", {
	        get: function () {
	            return this.getNativeControl().checked;
	        },
	        set: function (checked) {
	            this.getNativeControl().checked = checked;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCCheckbox.prototype, "indeterminate", {
	        get: function () {
	            return this.getNativeControl().indeterminate;
	        },
	        set: function (indeterminate) {
	            this.getNativeControl().indeterminate = indeterminate;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCCheckbox.prototype, "disabled", {
	        get: function () {
	            return this.getNativeControl().disabled;
	        },
	        set: function (disabled) {
	            this.foundation.setDisabled(disabled);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCCheckbox.prototype, "value", {
	        get: function () {
	            return this.getNativeControl().value;
	        },
	        set: function (value) {
	            this.getNativeControl().value = value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCCheckbox.prototype.initialize = function () {
	        var DATA_INDETERMINATE_ATTR = strings$y.DATA_INDETERMINATE_ATTR;
	        this.getNativeControl().indeterminate =
	            this.getNativeControl().getAttribute(DATA_INDETERMINATE_ATTR) ===
	                'true';
	        this.getNativeControl().removeAttribute(DATA_INDETERMINATE_ATTR);
	    };
	    MDCCheckbox.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.handleChange = function () {
	            _this.foundation.handleChange();
	        };
	        this.handleAnimationEnd = function () {
	            _this.foundation.handleAnimationEnd();
	        };
	        this.getNativeControl().addEventListener('change', this.handleChange);
	        this.listen(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd);
	        this.installPropertyChangeHooks();
	    };
	    MDCCheckbox.prototype.destroy = function () {
	        this.rippleSurface.destroy();
	        this.getNativeControl().removeEventListener('change', this.handleChange);
	        this.unlisten(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd);
	        this.uninstallPropertyChangeHooks();
	        _super.prototype.destroy.call(this);
	    };
	    MDCCheckbox.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            forceLayout: function () { return _this.root.offsetWidth; },
	            hasNativeControl: function () { return !!_this.getNativeControl(); },
	            isAttachedToDOM: function () { return Boolean(_this.root.parentNode); },
	            isChecked: function () { return _this.checked; },
	            isIndeterminate: function () { return _this.indeterminate; },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            removeNativeControlAttr: function (attr) {
	                _this.getNativeControl().removeAttribute(attr);
	            },
	            setNativeControlAttr: function (attr, value) {
	                _this.getNativeControl().setAttribute(attr, value);
	            },
	            setNativeControlDisabled: function (disabled) {
	                _this.getNativeControl().disabled = disabled;
	            },
	        };
	        return new MDCCheckboxFoundation(adapter);
	    };
	    MDCCheckbox.prototype.createRipple = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { deregisterInteractionHandler: function (evtType, handler) {
	                _this.getNativeControl().removeEventListener(evtType, handler, applyPassive());
	            }, isSurfaceActive: function () { return matches$2(_this.getNativeControl(), ':active'); }, isUnbounded: function () { return true; }, registerInteractionHandler: function (evtType, handler) {
	                _this.getNativeControl().addEventListener(evtType, handler, applyPassive());
	            } });
	        return new MDCRipple(this.root, new MDCRippleFoundation(adapter));
	    };
	    MDCCheckbox.prototype.installPropertyChangeHooks = function () {
	        var e_1, _a;
	        var _this = this;
	        var nativeCb = this.getNativeControl();
	        var cbProto = Object.getPrototypeOf(nativeCb);
	        var _loop_1 = function (controlState) {
	            var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);
	            // We have to check for this descriptor, since some browsers (Safari) don't support its return.
	            // See: https://bugs.webkit.org/show_bug.cgi?id=49739
	            if (!validDescriptor(desc)) {
	                return { value: void 0 };
	            }
	            // Type cast is needed for compatibility with Closure Compiler.
	            var nativeGetter = desc.get;
	            var nativeCbDesc = {
	                configurable: desc.configurable,
	                enumerable: desc.enumerable,
	                get: nativeGetter,
	                set: function (state) {
	                    desc.set.call(nativeCb, state);
	                    _this.foundation.handleChange();
	                },
	            };
	            Object.defineProperty(nativeCb, controlState, nativeCbDesc);
	        };
	        try {
	            for (var CB_PROTO_PROPS_1 = __values(CB_PROTO_PROPS), CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next(); !CB_PROTO_PROPS_1_1.done; CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next()) {
	                var controlState = CB_PROTO_PROPS_1_1.value;
	                var state_1 = _loop_1(controlState);
	                if (typeof state_1 === "object")
	                    return state_1.value;
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (CB_PROTO_PROPS_1_1 && !CB_PROTO_PROPS_1_1.done && (_a = CB_PROTO_PROPS_1.return)) _a.call(CB_PROTO_PROPS_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    MDCCheckbox.prototype.uninstallPropertyChangeHooks = function () {
	        var e_2, _a;
	        var nativeCb = this.getNativeControl();
	        var cbProto = Object.getPrototypeOf(nativeCb);
	        try {
	            for (var CB_PROTO_PROPS_2 = __values(CB_PROTO_PROPS), CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next(); !CB_PROTO_PROPS_2_1.done; CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next()) {
	                var controlState = CB_PROTO_PROPS_2_1.value;
	                var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);
	                if (!validDescriptor(desc)) {
	                    return;
	                }
	                Object.defineProperty(nativeCb, controlState, desc);
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (CB_PROTO_PROPS_2_1 && !CB_PROTO_PROPS_2_1.done && (_a = CB_PROTO_PROPS_2.return)) _a.call(CB_PROTO_PROPS_2);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    };
	    MDCCheckbox.prototype.getNativeControl = function () {
	        var NATIVE_CONTROL_SELECTOR = strings$y.NATIVE_CONTROL_SELECTOR;
	        var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);
	        if (!el) {
	            throw new Error("Checkbox component requires a " + NATIVE_CONTROL_SELECTOR + " element");
	        }
	        return el;
	    };
	    return MDCCheckbox;
	}(MDCComponent));
	function validDescriptor(inputPropDesc) {
	    return !!inputPropDesc && typeof inputPropDesc.set === 'function';
	}

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$u = {
		__proto__: null,
		MDCCheckbox: MDCCheckbox,
		cssClasses: cssClasses$w,
		strings: strings$y,
		numbers: numbers$c,
		MDCCheckboxFoundation: MDCCheckboxFoundation
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var InteractionTrigger;
	(function (InteractionTrigger) {
	    InteractionTrigger[InteractionTrigger["UNSPECIFIED"] = 0] = "UNSPECIFIED";
	    InteractionTrigger[InteractionTrigger["CLICK"] = 1] = "CLICK";
	    InteractionTrigger[InteractionTrigger["BACKSPACE_KEY"] = 2] = "BACKSPACE_KEY";
	    InteractionTrigger[InteractionTrigger["DELETE_KEY"] = 3] = "DELETE_KEY";
	    InteractionTrigger[InteractionTrigger["SPACEBAR_KEY"] = 4] = "SPACEBAR_KEY";
	    InteractionTrigger[InteractionTrigger["ENTER_KEY"] = 5] = "ENTER_KEY";
	})(InteractionTrigger || (InteractionTrigger = {}));
	var strings$x = {
	    ARIA_HIDDEN: 'aria-hidden',
	    INTERACTION_EVENT: 'MDCChipTrailingAction:interaction',
	    NAVIGATION_EVENT: 'MDCChipTrailingAction:navigation',
	    TAB_INDEX: 'tabindex',
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * KEY provides normalized string values for keys.
	 */
	var KEY = {
	    UNKNOWN: 'Unknown',
	    BACKSPACE: 'Backspace',
	    ENTER: 'Enter',
	    SPACEBAR: 'Spacebar',
	    PAGE_UP: 'PageUp',
	    PAGE_DOWN: 'PageDown',
	    END: 'End',
	    HOME: 'Home',
	    ARROW_LEFT: 'ArrowLeft',
	    ARROW_UP: 'ArrowUp',
	    ARROW_RIGHT: 'ArrowRight',
	    ARROW_DOWN: 'ArrowDown',
	    DELETE: 'Delete',
	    ESCAPE: 'Escape',
	    TAB: 'Tab',
	};
	var normalizedKeys = new Set();
	// IE11 has no support for new Map with iterable so we need to initialize this
	// by hand.
	normalizedKeys.add(KEY.BACKSPACE);
	normalizedKeys.add(KEY.ENTER);
	normalizedKeys.add(KEY.SPACEBAR);
	normalizedKeys.add(KEY.PAGE_UP);
	normalizedKeys.add(KEY.PAGE_DOWN);
	normalizedKeys.add(KEY.END);
	normalizedKeys.add(KEY.HOME);
	normalizedKeys.add(KEY.ARROW_LEFT);
	normalizedKeys.add(KEY.ARROW_UP);
	normalizedKeys.add(KEY.ARROW_RIGHT);
	normalizedKeys.add(KEY.ARROW_DOWN);
	normalizedKeys.add(KEY.DELETE);
	normalizedKeys.add(KEY.ESCAPE);
	normalizedKeys.add(KEY.TAB);
	var KEY_CODE = {
	    BACKSPACE: 8,
	    ENTER: 13,
	    SPACEBAR: 32,
	    PAGE_UP: 33,
	    PAGE_DOWN: 34,
	    END: 35,
	    HOME: 36,
	    ARROW_LEFT: 37,
	    ARROW_UP: 38,
	    ARROW_RIGHT: 39,
	    ARROW_DOWN: 40,
	    DELETE: 46,
	    ESCAPE: 27,
	    TAB: 9,
	};
	var mappedKeyCodes = new Map();
	// IE11 has no support for new Map with iterable so we need to initialize this
	// by hand.
	mappedKeyCodes.set(KEY_CODE.BACKSPACE, KEY.BACKSPACE);
	mappedKeyCodes.set(KEY_CODE.ENTER, KEY.ENTER);
	mappedKeyCodes.set(KEY_CODE.SPACEBAR, KEY.SPACEBAR);
	mappedKeyCodes.set(KEY_CODE.PAGE_UP, KEY.PAGE_UP);
	mappedKeyCodes.set(KEY_CODE.PAGE_DOWN, KEY.PAGE_DOWN);
	mappedKeyCodes.set(KEY_CODE.END, KEY.END);
	mappedKeyCodes.set(KEY_CODE.HOME, KEY.HOME);
	mappedKeyCodes.set(KEY_CODE.ARROW_LEFT, KEY.ARROW_LEFT);
	mappedKeyCodes.set(KEY_CODE.ARROW_UP, KEY.ARROW_UP);
	mappedKeyCodes.set(KEY_CODE.ARROW_RIGHT, KEY.ARROW_RIGHT);
	mappedKeyCodes.set(KEY_CODE.ARROW_DOWN, KEY.ARROW_DOWN);
	mappedKeyCodes.set(KEY_CODE.DELETE, KEY.DELETE);
	mappedKeyCodes.set(KEY_CODE.ESCAPE, KEY.ESCAPE);
	mappedKeyCodes.set(KEY_CODE.TAB, KEY.TAB);
	var navigationKeys$1 = new Set();
	// IE11 has no support for new Set with iterable so we need to initialize this
	// by hand.
	navigationKeys$1.add(KEY.PAGE_UP);
	navigationKeys$1.add(KEY.PAGE_DOWN);
	navigationKeys$1.add(KEY.END);
	navigationKeys$1.add(KEY.HOME);
	navigationKeys$1.add(KEY.ARROW_LEFT);
	navigationKeys$1.add(KEY.ARROW_UP);
	navigationKeys$1.add(KEY.ARROW_RIGHT);
	navigationKeys$1.add(KEY.ARROW_DOWN);
	/**
	 * normalizeKey returns the normalized string for a navigational action.
	 */
	function normalizeKey(evt) {
	    var key = evt.key;
	    // If the event already has a normalized key, return it
	    if (normalizedKeys.has(key)) {
	        return key;
	    }
	    // tslint:disable-next-line:deprecation
	    var mappedKey = mappedKeyCodes.get(evt.keyCode);
	    if (mappedKey) {
	        return mappedKey;
	    }
	    return KEY.UNKNOWN;
	}
	/**
	 * isNavigationEvent returns whether the event is a navigation event
	 */
	function isNavigationEvent(evt) {
	    return navigationKeys$1.has(normalizeKey(evt));
	}

	var keyboard = {
		__proto__: null,
		KEY: KEY,
		normalizeKey: normalizeKey,
		isNavigationEvent: isNavigationEvent
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCChipTrailingActionFoundation = /** @class */ (function (_super) {
	    __extends(MDCChipTrailingActionFoundation, _super);
	    function MDCChipTrailingActionFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCChipTrailingActionFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCChipTrailingActionFoundation, "strings", {
	        get: function () {
	            return strings$x;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCChipTrailingActionFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                focus: function () { return undefined; },
	                getAttribute: function () { return null; },
	                setAttribute: function () { return undefined; },
	                notifyInteraction: function () { return undefined; },
	                notifyNavigation: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCChipTrailingActionFoundation.prototype.handleClick = function (evt) {
	        evt.stopPropagation();
	        this.adapter.notifyInteraction(InteractionTrigger.CLICK);
	    };
	    MDCChipTrailingActionFoundation.prototype.handleKeydown = function (evt) {
	        evt.stopPropagation();
	        var key = normalizeKey(evt);
	        if (this.shouldNotifyInteractionFromKey(key)) {
	            var trigger = this.getTriggerFromKey(key);
	            this.adapter.notifyInteraction(trigger);
	            return;
	        }
	        if (isNavigationEvent(evt)) {
	            this.adapter.notifyNavigation(key);
	            return;
	        }
	    };
	    MDCChipTrailingActionFoundation.prototype.removeFocus = function () {
	        this.adapter.setAttribute(strings$x.TAB_INDEX, '-1');
	    };
	    MDCChipTrailingActionFoundation.prototype.focus = function () {
	        this.adapter.setAttribute(strings$x.TAB_INDEX, '0');
	        this.adapter.focus();
	    };
	    MDCChipTrailingActionFoundation.prototype.isNavigable = function () {
	        return this.adapter.getAttribute(strings$x.ARIA_HIDDEN) !== 'true';
	    };
	    MDCChipTrailingActionFoundation.prototype.shouldNotifyInteractionFromKey = function (key) {
	        var isFromActionKey = key === KEY.ENTER || key === KEY.SPACEBAR;
	        var isFromDeleteKey = key === KEY.BACKSPACE || key === KEY.DELETE;
	        return isFromActionKey || isFromDeleteKey;
	    };
	    MDCChipTrailingActionFoundation.prototype.getTriggerFromKey = function (key) {
	        if (key === KEY.SPACEBAR) {
	            return InteractionTrigger.SPACEBAR_KEY;
	        }
	        if (key === KEY.ENTER) {
	            return InteractionTrigger.ENTER_KEY;
	        }
	        if (key === KEY.DELETE) {
	            return InteractionTrigger.DELETE_KEY;
	        }
	        if (key === KEY.BACKSPACE) {
	            return InteractionTrigger.BACKSPACE_KEY;
	        }
	        // Default case, should never be returned
	        return InteractionTrigger.UNSPECIFIED;
	    };
	    return MDCChipTrailingActionFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCChipTrailingAction = /** @class */ (function (_super) {
	    __extends(MDCChipTrailingAction, _super);
	    function MDCChipTrailingAction() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(MDCChipTrailingAction.prototype, "ripple", {
	        get: function () {
	            return this.rippleSurface;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCChipTrailingAction.attachTo = function (root) {
	        return new MDCChipTrailingAction(root);
	    };
	    MDCChipTrailingAction.prototype.initialize = function (rippleFactory) {
	        if (rippleFactory === void 0) { rippleFactory = function (el, foundation) {
	            return new MDCRipple(el, foundation);
	        }; }
	        // DO NOT INLINE this variable. For backward compatibility, foundations take
	        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
	        // methods, we need a separate, strongly typed adapter variable.
	        var rippleAdapter = MDCRipple.createAdapter(this);
	        this.rippleSurface =
	            rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
	    };
	    MDCChipTrailingAction.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.handleClick = function (evt) {
	            _this.foundation.handleClick(evt);
	        };
	        this.handleKeydown = function (evt) {
	            _this.foundation.handleKeydown(evt);
	        };
	        this.listen('click', this.handleClick);
	        this.listen('keydown', this.handleKeydown);
	    };
	    MDCChipTrailingAction.prototype.destroy = function () {
	        this.rippleSurface.destroy();
	        this.unlisten('click', this.handleClick);
	        this.unlisten('keydown', this.handleKeydown);
	        _super.prototype.destroy.call(this);
	    };
	    MDCChipTrailingAction.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take
	        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
	        // methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            focus: function () {
	                // TODO(b/157231863): Migate MDCComponent#root to HTMLElement
	                _this.root.focus();
	            },
	            getAttribute: function (attr) { return _this.root.getAttribute(attr); },
	            notifyInteraction: function (trigger) {
	                return _this.emit(strings$x.INTERACTION_EVENT, { trigger: trigger }, true /* shouldBubble */);
	            },
	            notifyNavigation: function (key) {
	                _this.emit(strings$x.NAVIGATION_EVENT, { key: key }, true /* shouldBubble */);
	            },
	            setAttribute: function (attr, value) {
	                _this.root.setAttribute(attr, value);
	            },
	        };
	        return new MDCChipTrailingActionFoundation(adapter);
	    };
	    MDCChipTrailingAction.prototype.isNavigable = function () {
	        return this.foundation.isNavigable();
	    };
	    MDCChipTrailingAction.prototype.focus = function () {
	        this.foundation.focus();
	    };
	    MDCChipTrailingAction.prototype.removeFocus = function () {
	        this.foundation.removeFocus();
	    };
	    return MDCChipTrailingAction;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var Direction;
	(function (Direction) {
	    Direction["LEFT"] = "left";
	    Direction["RIGHT"] = "right";
	})(Direction || (Direction = {}));
	var EventSource;
	(function (EventSource) {
	    EventSource["PRIMARY"] = "primary";
	    EventSource["TRAILING"] = "trailing";
	    EventSource["NONE"] = "none";
	})(EventSource || (EventSource = {}));
	var strings$w = {
	    ADDED_ANNOUNCEMENT_ATTRIBUTE: 'data-mdc-chip-added-announcement',
	    ARIA_CHECKED: 'aria-checked',
	    ARROW_DOWN_KEY: 'ArrowDown',
	    ARROW_LEFT_KEY: 'ArrowLeft',
	    ARROW_RIGHT_KEY: 'ArrowRight',
	    ARROW_UP_KEY: 'ArrowUp',
	    BACKSPACE_KEY: 'Backspace',
	    CHECKMARK_SELECTOR: '.mdc-chip__checkmark',
	    DELETE_KEY: 'Delete',
	    END_KEY: 'End',
	    ENTER_KEY: 'Enter',
	    ENTRY_ANIMATION_NAME: 'mdc-chip-entry',
	    HOME_KEY: 'Home',
	    IE_ARROW_DOWN_KEY: 'Down',
	    IE_ARROW_LEFT_KEY: 'Left',
	    IE_ARROW_RIGHT_KEY: 'Right',
	    IE_ARROW_UP_KEY: 'Up',
	    IE_DELETE_KEY: 'Del',
	    INTERACTION_EVENT: 'MDCChip:interaction',
	    LEADING_ICON_SELECTOR: '.mdc-chip__icon--leading',
	    NAVIGATION_EVENT: 'MDCChip:navigation',
	    PRIMARY_ACTION_SELECTOR: '.mdc-chip__primary-action',
	    REMOVED_ANNOUNCEMENT_ATTRIBUTE: 'data-mdc-chip-removed-announcement',
	    REMOVAL_EVENT: 'MDCChip:removal',
	    SELECTION_EVENT: 'MDCChip:selection',
	    SPACEBAR_KEY: ' ',
	    TAB_INDEX: 'tabindex',
	    TRAILING_ACTION_SELECTOR: '.mdc-chip-trailing-action',
	    TRAILING_ICON_INTERACTION_EVENT: 'MDCChip:trailingIconInteraction',
	    TRAILING_ICON_SELECTOR: '.mdc-chip__icon--trailing',
	};
	var cssClasses$v = {
	    CHECKMARK: 'mdc-chip__checkmark',
	    CHIP_EXIT: 'mdc-chip--exit',
	    DELETABLE: 'mdc-chip--deletable',
	    EDITABLE: 'mdc-chip--editable',
	    EDITING: 'mdc-chip--editing',
	    HIDDEN_LEADING_ICON: 'mdc-chip__icon--leading-hidden',
	    LEADING_ICON: 'mdc-chip__icon--leading',
	    PRIMARY_ACTION: 'mdc-chip__primary-action',
	    PRIMARY_ACTION_FOCUSED: 'mdc-chip--primary-action-focused',
	    SELECTED: 'mdc-chip--selected',
	    TEXT: 'mdc-chip__text',
	    TRAILING_ACTION: 'mdc-chip__trailing-action',
	    TRAILING_ICON: 'mdc-chip__icon--trailing',
	};
	var navigationKeys = new Set();
	// IE11 has no support for new Set with iterable so we need to initialize this by hand
	navigationKeys.add(strings$w.ARROW_LEFT_KEY);
	navigationKeys.add(strings$w.ARROW_RIGHT_KEY);
	navigationKeys.add(strings$w.ARROW_DOWN_KEY);
	navigationKeys.add(strings$w.ARROW_UP_KEY);
	navigationKeys.add(strings$w.END_KEY);
	navigationKeys.add(strings$w.HOME_KEY);
	navigationKeys.add(strings$w.IE_ARROW_LEFT_KEY);
	navigationKeys.add(strings$w.IE_ARROW_RIGHT_KEY);
	navigationKeys.add(strings$w.IE_ARROW_DOWN_KEY);
	navigationKeys.add(strings$w.IE_ARROW_UP_KEY);
	var jumpChipKeys = new Set();
	// IE11 has no support for new Set with iterable so we need to initialize this by hand
	jumpChipKeys.add(strings$w.ARROW_UP_KEY);
	jumpChipKeys.add(strings$w.ARROW_DOWN_KEY);
	jumpChipKeys.add(strings$w.HOME_KEY);
	jumpChipKeys.add(strings$w.END_KEY);
	jumpChipKeys.add(strings$w.IE_ARROW_UP_KEY);
	jumpChipKeys.add(strings$w.IE_ARROW_DOWN_KEY);

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var emptyClientRect$1 = {
	    bottom: 0,
	    height: 0,
	    left: 0,
	    right: 0,
	    top: 0,
	    width: 0,
	};
	var FocusBehavior;
	(function (FocusBehavior) {
	    FocusBehavior[FocusBehavior["SHOULD_FOCUS"] = 0] = "SHOULD_FOCUS";
	    FocusBehavior[FocusBehavior["SHOULD_NOT_FOCUS"] = 1] = "SHOULD_NOT_FOCUS";
	})(FocusBehavior || (FocusBehavior = {}));
	var MDCChipFoundation = /** @class */ (function (_super) {
	    __extends(MDCChipFoundation, _super);
	    function MDCChipFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCChipFoundation.defaultAdapter), adapter)) || this;
	        /** Whether a trailing icon click should immediately trigger exit/removal of the chip. */
	        _this.shouldRemoveOnTrailingIconClick = true;
	        /**
	         * Whether the primary action should receive focus on click. Should only be
	         * set to true for clients who programmatically give focus to a different
	         * element on the page when a chip is clicked (like a menu).
	         */
	        _this.shouldFocusPrimaryActionOnClick = true;
	        return _this;
	    }
	    Object.defineProperty(MDCChipFoundation, "strings", {
	        get: function () {
	            return strings$w;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCChipFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$v;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCChipFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                addClassToLeadingIcon: function () { return undefined; },
	                eventTargetHasClass: function () { return false; },
	                focusPrimaryAction: function () { return undefined; },
	                focusTrailingAction: function () { return undefined; },
	                getAttribute: function () { return null; },
	                getCheckmarkBoundingClientRect: function () { return emptyClientRect$1; },
	                getComputedStyleValue: function () { return ''; },
	                getRootBoundingClientRect: function () { return emptyClientRect$1; },
	                hasClass: function () { return false; },
	                hasLeadingIcon: function () { return false; },
	                isRTL: function () { return false; },
	                isTrailingActionNavigable: function () { return false; },
	                notifyEditFinish: function () { return undefined; },
	                notifyEditStart: function () { return undefined; },
	                notifyInteraction: function () { return undefined; },
	                notifyNavigation: function () { return undefined; },
	                notifyRemoval: function () { return undefined; },
	                notifySelection: function () { return undefined; },
	                notifyTrailingIconInteraction: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                removeClassFromLeadingIcon: function () { return undefined; },
	                removeTrailingActionFocus: function () { return undefined; },
	                setPrimaryActionAttr: function () { return undefined; },
	                setStyleProperty: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCChipFoundation.prototype.isSelected = function () {
	        return this.adapter.hasClass(cssClasses$v.SELECTED);
	    };
	    MDCChipFoundation.prototype.isEditable = function () {
	        return this.adapter.hasClass(cssClasses$v.EDITABLE);
	    };
	    MDCChipFoundation.prototype.isEditing = function () {
	        return this.adapter.hasClass(cssClasses$v.EDITING);
	    };
	    MDCChipFoundation.prototype.setSelected = function (selected) {
	        this.setSelectedImpl(selected);
	        this.notifySelection(selected);
	    };
	    MDCChipFoundation.prototype.setSelectedFromChipSet = function (selected, shouldNotifyClients) {
	        this.setSelectedImpl(selected);
	        if (shouldNotifyClients) {
	            this.notifyIgnoredSelection(selected);
	        }
	    };
	    MDCChipFoundation.prototype.getShouldRemoveOnTrailingIconClick = function () {
	        return this.shouldRemoveOnTrailingIconClick;
	    };
	    MDCChipFoundation.prototype.setShouldRemoveOnTrailingIconClick = function (shouldRemove) {
	        this.shouldRemoveOnTrailingIconClick = shouldRemove;
	    };
	    MDCChipFoundation.prototype.setShouldFocusPrimaryActionOnClick = function (shouldFocus) {
	        this.shouldFocusPrimaryActionOnClick = shouldFocus;
	    };
	    MDCChipFoundation.prototype.getDimensions = function () {
	        var _this = this;
	        var getRootRect = function () { return _this.adapter.getRootBoundingClientRect(); };
	        var getCheckmarkRect = function () {
	            return _this.adapter.getCheckmarkBoundingClientRect();
	        };
	        // When a chip has a checkmark and not a leading icon, the bounding rect changes in size depending on the current
	        // size of the checkmark.
	        if (!this.adapter.hasLeadingIcon()) {
	            var checkmarkRect = getCheckmarkRect();
	            if (checkmarkRect) {
	                var rootRect = getRootRect();
	                // Checkmark is a square, meaning the client rect's width and height are identical once the animation completes.
	                // However, the checkbox is initially hidden by setting the width to 0.
	                // To account for an initial width of 0, we use the checkbox's height instead (which equals the end-state width)
	                // when adding it to the root client rect's width.
	                return {
	                    bottom: rootRect.bottom,
	                    height: rootRect.height,
	                    left: rootRect.left,
	                    right: rootRect.right,
	                    top: rootRect.top,
	                    width: rootRect.width + checkmarkRect.height,
	                };
	            }
	        }
	        return getRootRect();
	    };
	    /**
	     * Begins the exit animation which leads to removal of the chip.
	     */
	    MDCChipFoundation.prototype.beginExit = function () {
	        this.adapter.addClass(cssClasses$v.CHIP_EXIT);
	    };
	    MDCChipFoundation.prototype.handleClick = function () {
	        this.adapter.notifyInteraction();
	        this.setPrimaryActionFocusable(this.getFocusBehavior());
	    };
	    MDCChipFoundation.prototype.handleDoubleClick = function () {
	        if (this.isEditable()) {
	            this.startEditing();
	        }
	    };
	    /**
	     * Handles a transition end event on the root element.
	     */
	    MDCChipFoundation.prototype.handleTransitionEnd = function (evt) {
	        var _this = this;
	        // Handle transition end event on the chip when it is about to be removed.
	        var shouldHandle = this.adapter.eventTargetHasClass(evt.target, cssClasses$v.CHIP_EXIT);
	        var widthIsAnimating = evt.propertyName === 'width';
	        var opacityIsAnimating = evt.propertyName === 'opacity';
	        if (shouldHandle && opacityIsAnimating) {
	            // See: https://css-tricks.com/using-css-transitions-auto-dimensions/#article-header-id-5
	            var chipWidth_1 = this.adapter.getComputedStyleValue('width');
	            // On the next frame (once we get the computed width), explicitly set the chip's width
	            // to its current pixel width, so we aren't transitioning out of 'auto'.
	            requestAnimationFrame(function () {
	                _this.adapter.setStyleProperty('width', chipWidth_1);
	                // To mitigate jitter, start transitioning padding and margin before width.
	                _this.adapter.setStyleProperty('padding', '0');
	                _this.adapter.setStyleProperty('margin', '0');
	                // On the next frame (once width is explicitly set), transition width to 0.
	                requestAnimationFrame(function () {
	                    _this.adapter.setStyleProperty('width', '0');
	                });
	            });
	            return;
	        }
	        if (shouldHandle && widthIsAnimating) {
	            this.removeFocus();
	            var removedAnnouncement = this.adapter.getAttribute(strings$w.REMOVED_ANNOUNCEMENT_ATTRIBUTE);
	            this.adapter.notifyRemoval(removedAnnouncement);
	        }
	        // Handle a transition end event on the leading icon or checkmark, since the transition end event bubbles.
	        if (!opacityIsAnimating) {
	            return;
	        }
	        var shouldHideLeadingIcon = this.adapter.eventTargetHasClass(evt.target, cssClasses$v.LEADING_ICON) &&
	            this.adapter.hasClass(cssClasses$v.SELECTED);
	        var shouldShowLeadingIcon = this.adapter.eventTargetHasClass(evt.target, cssClasses$v.CHECKMARK) &&
	            !this.adapter.hasClass(cssClasses$v.SELECTED);
	        if (shouldHideLeadingIcon) {
	            this.adapter.addClassToLeadingIcon(cssClasses$v.HIDDEN_LEADING_ICON);
	            return;
	        }
	        if (shouldShowLeadingIcon) {
	            this.adapter.removeClassFromLeadingIcon(cssClasses$v.HIDDEN_LEADING_ICON);
	            return;
	        }
	    };
	    MDCChipFoundation.prototype.handleFocusIn = function (evt) {
	        // Early exit if the event doesn't come from the primary action
	        if (!this.eventFromPrimaryAction(evt)) {
	            return;
	        }
	        this.adapter.addClass(cssClasses$v.PRIMARY_ACTION_FOCUSED);
	    };
	    MDCChipFoundation.prototype.handleFocusOut = function (evt) {
	        // Early exit if the event doesn't come from the primary action
	        if (!this.eventFromPrimaryAction(evt)) {
	            return;
	        }
	        if (this.isEditing()) {
	            this.finishEditing();
	        }
	        this.adapter.removeClass(cssClasses$v.PRIMARY_ACTION_FOCUSED);
	    };
	    /**
	     * Handles an interaction event on the trailing icon element. This is used to
	     * prevent the ripple from activating on interaction with the trailing icon.
	     */
	    MDCChipFoundation.prototype.handleTrailingActionInteraction = function () {
	        this.adapter.notifyTrailingIconInteraction();
	        this.removeChip();
	    };
	    /**
	     * Handles a keydown event from the root element.
	     */
	    MDCChipFoundation.prototype.handleKeydown = function (evt) {
	        if (this.isEditing()) {
	            if (this.shouldFinishEditing(evt)) {
	                evt.preventDefault();
	                this.finishEditing();
	            }
	            // When editing, the foundation should only handle key events that finish
	            // the editing process.
	            return;
	        }
	        if (this.isEditable()) {
	            if (this.shouldStartEditing(evt)) {
	                evt.preventDefault();
	                this.startEditing();
	            }
	        }
	        if (this.shouldNotifyInteraction(evt)) {
	            this.adapter.notifyInteraction();
	            this.setPrimaryActionFocusable(this.getFocusBehavior());
	            return;
	        }
	        if (this.isDeleteAction(evt)) {
	            evt.preventDefault();
	            this.removeChip();
	            return;
	        }
	        // Early exit if the key is not usable
	        if (!navigationKeys.has(evt.key)) {
	            return;
	        }
	        // Prevent default behavior for movement keys which could include scrolling
	        evt.preventDefault();
	        this.focusNextAction(evt.key, EventSource.PRIMARY);
	    };
	    MDCChipFoundation.prototype.handleTrailingActionNavigation = function (evt) {
	        this.focusNextAction(evt.detail.key, EventSource.TRAILING);
	    };
	    /**
	     * Called by the chip set to remove focus from the chip actions.
	     */
	    MDCChipFoundation.prototype.removeFocus = function () {
	        this.adapter.setPrimaryActionAttr(strings$w.TAB_INDEX, '-1');
	        this.adapter.removeTrailingActionFocus();
	    };
	    /**
	     * Called by the chip set to focus the primary action.
	     *
	     */
	    MDCChipFoundation.prototype.focusPrimaryAction = function () {
	        this.setPrimaryActionFocusable(FocusBehavior.SHOULD_FOCUS);
	    };
	    /**
	     * Called by the chip set to focus the trailing action (if present), otherwise
	     * gives focus to the trailing action.
	     */
	    MDCChipFoundation.prototype.focusTrailingAction = function () {
	        var trailingActionIsNavigable = this.adapter.isTrailingActionNavigable();
	        if (trailingActionIsNavigable) {
	            this.adapter.setPrimaryActionAttr(strings$w.TAB_INDEX, '-1');
	            this.adapter.focusTrailingAction();
	            return;
	        }
	        this.focusPrimaryAction();
	    };
	    MDCChipFoundation.prototype.setPrimaryActionFocusable = function (focusBehavior) {
	        this.adapter.setPrimaryActionAttr(strings$w.TAB_INDEX, '0');
	        if (focusBehavior === FocusBehavior.SHOULD_FOCUS) {
	            this.adapter.focusPrimaryAction();
	        }
	        this.adapter.removeTrailingActionFocus();
	    };
	    MDCChipFoundation.prototype.getFocusBehavior = function () {
	        if (this.shouldFocusPrimaryActionOnClick) {
	            return FocusBehavior.SHOULD_FOCUS;
	        }
	        return FocusBehavior.SHOULD_NOT_FOCUS;
	    };
	    MDCChipFoundation.prototype.focusNextAction = function (key, source) {
	        var isTrailingActionNavigable = this.adapter.isTrailingActionNavigable();
	        var dir = this.getDirection(key);
	        // Early exit if the key should jump chips
	        if (jumpChipKeys.has(key) || !isTrailingActionNavigable) {
	            this.adapter.notifyNavigation(key, source);
	            return;
	        }
	        if (source === EventSource.PRIMARY && dir === Direction.RIGHT) {
	            this.focusTrailingAction();
	            return;
	        }
	        if (source === EventSource.TRAILING && dir === Direction.LEFT) {
	            this.focusPrimaryAction();
	            return;
	        }
	        this.adapter.notifyNavigation(key, EventSource.NONE);
	    };
	    MDCChipFoundation.prototype.getDirection = function (key) {
	        var isRTL = this.adapter.isRTL();
	        var isLeftKey = key === strings$w.ARROW_LEFT_KEY || key === strings$w.IE_ARROW_LEFT_KEY;
	        var isRightKey = key === strings$w.ARROW_RIGHT_KEY || key === strings$w.IE_ARROW_RIGHT_KEY;
	        if (!isRTL && isLeftKey || isRTL && isRightKey) {
	            return Direction.LEFT;
	        }
	        return Direction.RIGHT;
	    };
	    MDCChipFoundation.prototype.removeChip = function () {
	        if (this.shouldRemoveOnTrailingIconClick) {
	            this.beginExit();
	        }
	    };
	    MDCChipFoundation.prototype.shouldStartEditing = function (evt) {
	        return this.eventFromPrimaryAction(evt) && evt.key === strings$w.ENTER_KEY;
	    };
	    MDCChipFoundation.prototype.shouldFinishEditing = function (evt) {
	        return evt.key === strings$w.ENTER_KEY;
	    };
	    MDCChipFoundation.prototype.shouldNotifyInteraction = function (evt) {
	        return evt.key === strings$w.ENTER_KEY || evt.key === strings$w.SPACEBAR_KEY;
	    };
	    MDCChipFoundation.prototype.isDeleteAction = function (evt) {
	        var isDeletable = this.adapter.hasClass(cssClasses$v.DELETABLE);
	        return isDeletable &&
	            (evt.key === strings$w.BACKSPACE_KEY || evt.key === strings$w.DELETE_KEY ||
	                evt.key === strings$w.IE_DELETE_KEY);
	    };
	    MDCChipFoundation.prototype.setSelectedImpl = function (selected) {
	        if (selected) {
	            this.adapter.addClass(cssClasses$v.SELECTED);
	            this.adapter.setPrimaryActionAttr(strings$w.ARIA_CHECKED, 'true');
	        }
	        else {
	            this.adapter.removeClass(cssClasses$v.SELECTED);
	            this.adapter.setPrimaryActionAttr(strings$w.ARIA_CHECKED, 'false');
	        }
	    };
	    MDCChipFoundation.prototype.notifySelection = function (selected) {
	        this.adapter.notifySelection(selected, false);
	    };
	    MDCChipFoundation.prototype.notifyIgnoredSelection = function (selected) {
	        this.adapter.notifySelection(selected, true);
	    };
	    MDCChipFoundation.prototype.eventFromPrimaryAction = function (evt) {
	        return this.adapter.eventTargetHasClass(evt.target, cssClasses$v.PRIMARY_ACTION);
	    };
	    MDCChipFoundation.prototype.startEditing = function () {
	        this.adapter.addClass(cssClasses$v.EDITING);
	        this.adapter.notifyEditStart();
	    };
	    MDCChipFoundation.prototype.finishEditing = function () {
	        this.adapter.removeClass(cssClasses$v.EDITING);
	        this.adapter.notifyEditFinish();
	    };
	    return MDCChipFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCChip = /** @class */ (function (_super) {
	    __extends(MDCChip, _super);
	    function MDCChip() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(MDCChip.prototype, "selected", {
	        /**
	         * @return Whether the chip is selected.
	         */
	        get: function () {
	            return this.foundation.isSelected();
	        },
	        /**
	         * Sets selected state on the chip.
	         */
	        set: function (selected) {
	            this.foundation.setSelected(selected);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCChip.prototype, "shouldRemoveOnTrailingIconClick", {
	        /**
	         * @return Whether a trailing icon click should trigger exit/removal of the chip.
	         */
	        get: function () {
	            return this.foundation.getShouldRemoveOnTrailingIconClick();
	        },
	        /**
	         * Sets whether a trailing icon click should trigger exit/removal of the chip.
	         */
	        set: function (shouldRemove) {
	            this.foundation.setShouldRemoveOnTrailingIconClick(shouldRemove);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCChip.prototype, "setShouldFocusPrimaryActionOnClick", {
	        /**
	         * Sets whether a clicking on the chip should focus the primary action.
	         */
	        set: function (shouldFocus) {
	            this.foundation.setShouldFocusPrimaryActionOnClick(shouldFocus);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCChip.prototype, "ripple", {
	        get: function () {
	            return this.rippleSurface;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCChip.prototype, "id", {
	        get: function () {
	            return this.root.id;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCChip.attachTo = function (root) {
	        return new MDCChip(root);
	    };
	    MDCChip.prototype.initialize = function (rippleFactory, trailingActionFactory) {
	        var _this = this;
	        if (rippleFactory === void 0) { rippleFactory = function (el, foundation) { return new MDCRipple(el, foundation); }; }
	        if (trailingActionFactory === void 0) { trailingActionFactory = function (el) { return new MDCChipTrailingAction(el); }; }
	        this.leadingIcon = this.root.querySelector(strings$w.LEADING_ICON_SELECTOR);
	        this.checkmark = this.root.querySelector(strings$w.CHECKMARK_SELECTOR);
	        this.primaryAction =
	            this.root.querySelector(strings$w.PRIMARY_ACTION_SELECTOR);
	        var trailingActionEl = this.root.querySelector(strings$w.TRAILING_ACTION_SELECTOR);
	        if (trailingActionEl) {
	            this.trailingAction = trailingActionFactory(trailingActionEl);
	        }
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var rippleAdapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function () { return _this.foundation.getDimensions(); } });
	        this.rippleSurface =
	            rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
	    };
	    MDCChip.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        // Custom events
	        this.handleTrailingActionInteraction = function () {
	            _this.foundation.handleTrailingActionInteraction();
	        };
	        this.handleTrailingActionNavigation =
	            function (evt) {
	                _this.foundation.handleTrailingActionNavigation(evt);
	            };
	        // Native events
	        this.handleClick = function () {
	            _this.foundation.handleClick();
	        };
	        this.handleKeydown = function (evt) {
	            _this.foundation.handleKeydown(evt);
	        };
	        this.handleTransitionEnd = function (evt) {
	            _this.foundation.handleTransitionEnd(evt);
	        };
	        this.handleFocusIn = function (evt) {
	            _this.foundation.handleFocusIn(evt);
	        };
	        this.handleFocusOut = function (evt) {
	            _this.foundation.handleFocusOut(evt);
	        };
	        this.listen('transitionend', this.handleTransitionEnd);
	        this.listen('click', this.handleClick);
	        this.listen('keydown', this.handleKeydown);
	        this.listen('focusin', this.handleFocusIn);
	        this.listen('focusout', this.handleFocusOut);
	        if (this.trailingAction) {
	            this.listen(strings$x.INTERACTION_EVENT, this.handleTrailingActionInteraction);
	            this.listen(strings$x.NAVIGATION_EVENT, this.handleTrailingActionNavigation);
	        }
	    };
	    MDCChip.prototype.destroy = function () {
	        this.rippleSurface.destroy();
	        this.unlisten('transitionend', this.handleTransitionEnd);
	        this.unlisten('keydown', this.handleKeydown);
	        this.unlisten('click', this.handleClick);
	        this.unlisten('focusin', this.handleFocusIn);
	        this.unlisten('focusout', this.handleFocusOut);
	        if (this.trailingAction) {
	            this.unlisten(strings$x.INTERACTION_EVENT, this.handleTrailingActionInteraction);
	            this.unlisten(strings$x.NAVIGATION_EVENT, this.handleTrailingActionNavigation);
	        }
	        _super.prototype.destroy.call(this);
	    };
	    /**
	     * Begins the exit animation which leads to removal of the chip.
	     */
	    MDCChip.prototype.beginExit = function () {
	        this.foundation.beginExit();
	    };
	    MDCChip.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            addClassToLeadingIcon: function (className) {
	                if (_this.leadingIcon) {
	                    _this.leadingIcon.classList.add(className);
	                }
	            },
	            eventTargetHasClass: function (target, className) {
	                return target ? target.classList.contains(className) : false;
	            },
	            focusPrimaryAction: function () {
	                if (_this.primaryAction) {
	                    _this.primaryAction.focus();
	                }
	            },
	            focusTrailingAction: function () {
	                if (_this.trailingAction) {
	                    _this.trailingAction.focus();
	                }
	            },
	            getAttribute: function (attr) { return _this.root.getAttribute(attr); },
	            getCheckmarkBoundingClientRect: function () {
	                return _this.checkmark ? _this.checkmark.getBoundingClientRect() : null;
	            },
	            getComputedStyleValue: function (propertyName) {
	                return window.getComputedStyle(_this.root).getPropertyValue(propertyName);
	            },
	            getRootBoundingClientRect: function () { return _this.root.getBoundingClientRect(); },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            hasLeadingIcon: function () { return !!_this.leadingIcon; },
	            isRTL: function () { return window.getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl'; },
	            isTrailingActionNavigable: function () {
	                if (_this.trailingAction) {
	                    return _this.trailingAction.isNavigable();
	                }
	                return false;
	            },
	            notifyInteraction: function () { return _this.emit(strings$w.INTERACTION_EVENT, { chipId: _this.id }, true /* shouldBubble */); },
	            notifyNavigation: function (key, source) {
	                return _this.emit(strings$w.NAVIGATION_EVENT, { chipId: _this.id, key: key, source: source }, true /* shouldBubble */);
	            },
	            notifyRemoval: function (removedAnnouncement) {
	                _this.emit(strings$w.REMOVAL_EVENT, { chipId: _this.id, removedAnnouncement: removedAnnouncement }, true /* shouldBubble */);
	            },
	            notifySelection: function (selected, shouldIgnore) {
	                return _this.emit(strings$w.SELECTION_EVENT, { chipId: _this.id, selected: selected, shouldIgnore: shouldIgnore }, true /* shouldBubble */);
	            },
	            notifyTrailingIconInteraction: function () {
	                return _this.emit(strings$w.TRAILING_ICON_INTERACTION_EVENT, { chipId: _this.id }, true /* shouldBubble */);
	            },
	            notifyEditStart: function () { },
	            notifyEditFinish: function () { },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            removeClassFromLeadingIcon: function (className) {
	                if (_this.leadingIcon) {
	                    _this.leadingIcon.classList.remove(className);
	                }
	            },
	            removeTrailingActionFocus: function () {
	                if (_this.trailingAction) {
	                    _this.trailingAction.removeFocus();
	                }
	            },
	            setPrimaryActionAttr: function (attr, value) {
	                if (_this.primaryAction) {
	                    _this.primaryAction.setAttribute(attr, value);
	                }
	            },
	            setStyleProperty: function (propertyName, value) {
	                return _this.root.style.setProperty(propertyName, value);
	            },
	        };
	        return new MDCChipFoundation(adapter);
	    };
	    MDCChip.prototype.setSelectedFromChipSet = function (selected, shouldNotifyClients) {
	        this.foundation.setSelectedFromChipSet(selected, shouldNotifyClients);
	    };
	    MDCChip.prototype.focusPrimaryAction = function () {
	        this.foundation.focusPrimaryAction();
	    };
	    MDCChip.prototype.focusTrailingAction = function () {
	        this.foundation.focusTrailingAction();
	    };
	    MDCChip.prototype.removeFocus = function () {
	        this.foundation.removeFocus();
	    };
	    MDCChip.prototype.remove = function () {
	        var parent = this.root.parentNode;
	        if (parent !== null) {
	            parent.removeChild(this.root);
	        }
	    };
	    return MDCChip;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Priorities for the announce function.
	 */
	var AnnouncerPriority;
	(function (AnnouncerPriority) {
	    AnnouncerPriority["POLITE"] = "polite";
	    AnnouncerPriority["ASSERTIVE"] = "assertive";
	})(AnnouncerPriority || (AnnouncerPriority = {}));
	/**
	 * Data attribute added to live region element.
	 */
	var DATA_MDC_DOM_ANNOUNCE = 'data-mdc-dom-announce';
	/**
	 * Announces the given message with optional priority, defaulting to "polite"
	 */
	function announce$1(message, options) {
	    Announcer.getInstance().say(message, options);
	}
	var Announcer = /** @class */ (function () {
	    // Constructor made private to ensure only the singleton is used
	    function Announcer() {
	        this.liveRegions = new Map();
	    }
	    Announcer.getInstance = function () {
	        if (!Announcer.instance) {
	            Announcer.instance = new Announcer();
	        }
	        return Announcer.instance;
	    };
	    Announcer.prototype.say = function (message, options) {
	        var _a, _b;
	        var priority = (_a = options === null || options === void 0 ? void 0 : options.priority) !== null && _a !== void 0 ? _a : AnnouncerPriority.POLITE;
	        var ownerDocument = (_b = options === null || options === void 0 ? void 0 : options.ownerDocument) !== null && _b !== void 0 ? _b : document;
	        var liveRegion = this.getLiveRegion(priority, ownerDocument);
	        // Reset the region to pick up the message, even if the message is the
	        // exact same as before.
	        liveRegion.textContent = '';
	        // Timeout is necessary for screen readers like NVDA and VoiceOver.
	        setTimeout(function () {
	            liveRegion.textContent = message;
	            ownerDocument.addEventListener('click', clearLiveRegion);
	        }, 1);
	        function clearLiveRegion() {
	            liveRegion.textContent = '';
	            ownerDocument.removeEventListener('click', clearLiveRegion);
	        }
	    };
	    Announcer.prototype.getLiveRegion = function (priority, ownerDocument) {
	        var documentLiveRegions = this.liveRegions.get(ownerDocument);
	        if (!documentLiveRegions) {
	            documentLiveRegions = new Map();
	            this.liveRegions.set(ownerDocument, documentLiveRegions);
	        }
	        var existingLiveRegion = documentLiveRegions.get(priority);
	        if (existingLiveRegion &&
	            ownerDocument.body.contains(existingLiveRegion)) {
	            return existingLiveRegion;
	        }
	        var liveRegion = this.createLiveRegion(priority, ownerDocument);
	        documentLiveRegions.set(priority, liveRegion);
	        return liveRegion;
	    };
	    Announcer.prototype.createLiveRegion = function (priority, ownerDocument) {
	        var el = ownerDocument.createElement('div');
	        el.style.position = 'absolute';
	        el.style.top = '-9999px';
	        el.style.left = '-9999px';
	        el.style.height = '1px';
	        el.style.overflow = 'hidden';
	        el.setAttribute('aria-atomic', 'true');
	        el.setAttribute('aria-live', priority);
	        el.setAttribute(DATA_MDC_DOM_ANNOUNCE, 'true');
	        ownerDocument.body.appendChild(el);
	        return el;
	    };
	    return Announcer;
	}());

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$v = {
	    CHIP_SELECTOR: '.mdc-chip',
	};
	var cssClasses$u = {
	    CHOICE: 'mdc-chip-set--choice',
	    FILTER: 'mdc-chip-set--filter',
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCChipSetFoundation = /** @class */ (function (_super) {
	    __extends(MDCChipSetFoundation, _super);
	    function MDCChipSetFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCChipSetFoundation.defaultAdapter), adapter)) || this;
	        /**
	         * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.
	         */
	        _this.selectedChipIds = [];
	        return _this;
	    }
	    Object.defineProperty(MDCChipSetFoundation, "strings", {
	        get: function () {
	            return strings$v;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCChipSetFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$u;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCChipSetFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                announceMessage: function () { return undefined; },
	                focusChipPrimaryActionAtIndex: function () { return undefined; },
	                focusChipTrailingActionAtIndex: function () { return undefined; },
	                getChipListCount: function () { return -1; },
	                getIndexOfChipById: function () { return -1; },
	                hasClass: function () { return false; },
	                isRTL: function () { return false; },
	                removeChipAtIndex: function () { return undefined; },
	                removeFocusFromChipAtIndex: function () { return undefined; },
	                selectChipAtIndex: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Returns an array of the IDs of all selected chips.
	     */
	    MDCChipSetFoundation.prototype.getSelectedChipIds = function () {
	        return this.selectedChipIds.slice();
	    };
	    /**
	     * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.
	     * Does not notify clients of the updated selection state.
	     */
	    MDCChipSetFoundation.prototype.select = function (chipId) {
	        this.selectImpl(chipId, false);
	    };
	    /**
	     * Handles a chip interaction event
	     */
	    MDCChipSetFoundation.prototype.handleChipInteraction = function (_a) {
	        var chipId = _a.chipId;
	        var index = this.adapter.getIndexOfChipById(chipId);
	        this.removeFocusFromChipsExcept(index);
	        if (this.adapter.hasClass(cssClasses$u.CHOICE) ||
	            this.adapter.hasClass(cssClasses$u.FILTER)) {
	            this.toggleSelect(chipId);
	        }
	    };
	    /**
	     * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.
	     */
	    MDCChipSetFoundation.prototype.handleChipSelection = function (_a) {
	        var chipId = _a.chipId, selected = _a.selected, shouldIgnore = _a.shouldIgnore;
	        // Early exit if we should ignore the event
	        if (shouldIgnore) {
	            return;
	        }
	        var chipIsSelected = this.selectedChipIds.indexOf(chipId) >= 0;
	        if (selected && !chipIsSelected) {
	            this.select(chipId);
	        }
	        else if (!selected && chipIsSelected) {
	            this.deselectImpl(chipId);
	        }
	    };
	    /**
	     * Handles the event when a chip is removed.
	     */
	    MDCChipSetFoundation.prototype.handleChipRemoval = function (_a) {
	        var chipId = _a.chipId, removedAnnouncement = _a.removedAnnouncement;
	        if (removedAnnouncement) {
	            this.adapter.announceMessage(removedAnnouncement);
	        }
	        var index = this.adapter.getIndexOfChipById(chipId);
	        this.deselectAndNotifyClients(chipId);
	        this.adapter.removeChipAtIndex(index);
	        var maxIndex = this.adapter.getChipListCount() - 1;
	        if (maxIndex < 0) {
	            return;
	        }
	        var nextIndex = Math.min(index, maxIndex);
	        this.removeFocusFromChipsExcept(nextIndex);
	        // After removing a chip, we should focus the trailing action for the next chip.
	        this.adapter.focusChipTrailingActionAtIndex(nextIndex);
	    };
	    /**
	     * Handles a chip navigation event.
	     */
	    MDCChipSetFoundation.prototype.handleChipNavigation = function (_a) {
	        var chipId = _a.chipId, key = _a.key, source = _a.source;
	        var maxIndex = this.adapter.getChipListCount() - 1;
	        var index = this.adapter.getIndexOfChipById(chipId);
	        // Early exit if the index is out of range or the key is unusable
	        if (index === -1 || !navigationKeys.has(key)) {
	            return;
	        }
	        var isRTL = this.adapter.isRTL();
	        var isLeftKey = key === strings$w.ARROW_LEFT_KEY ||
	            key === strings$w.IE_ARROW_LEFT_KEY;
	        var isRightKey = key === strings$w.ARROW_RIGHT_KEY ||
	            key === strings$w.IE_ARROW_RIGHT_KEY;
	        var isDownKey = key === strings$w.ARROW_DOWN_KEY ||
	            key === strings$w.IE_ARROW_DOWN_KEY;
	        var shouldIncrement = !isRTL && isRightKey || isRTL && isLeftKey || isDownKey;
	        var isHome = key === strings$w.HOME_KEY;
	        var isEnd = key === strings$w.END_KEY;
	        if (shouldIncrement) {
	            index++;
	        }
	        else if (isHome) {
	            index = 0;
	        }
	        else if (isEnd) {
	            index = maxIndex;
	        }
	        else {
	            index--;
	        }
	        // Early exit if the index is out of bounds
	        if (index < 0 || index > maxIndex) {
	            return;
	        }
	        this.removeFocusFromChipsExcept(index);
	        this.focusChipAction(index, key, source);
	    };
	    MDCChipSetFoundation.prototype.focusChipAction = function (index, key, source) {
	        var shouldJumpChips = jumpChipKeys.has(key);
	        if (shouldJumpChips && source === EventSource.PRIMARY) {
	            return this.adapter.focusChipPrimaryActionAtIndex(index);
	        }
	        if (shouldJumpChips && source === EventSource.TRAILING) {
	            return this.adapter.focusChipTrailingActionAtIndex(index);
	        }
	        var dir = this.getDirection(key);
	        if (dir === Direction.LEFT) {
	            return this.adapter.focusChipTrailingActionAtIndex(index);
	        }
	        if (dir === Direction.RIGHT) {
	            return this.adapter.focusChipPrimaryActionAtIndex(index);
	        }
	    };
	    MDCChipSetFoundation.prototype.getDirection = function (key) {
	        var isRTL = this.adapter.isRTL();
	        var isLeftKey = key === strings$w.ARROW_LEFT_KEY ||
	            key === strings$w.IE_ARROW_LEFT_KEY;
	        var isRightKey = key === strings$w.ARROW_RIGHT_KEY ||
	            key === strings$w.IE_ARROW_RIGHT_KEY;
	        if (!isRTL && isLeftKey || isRTL && isRightKey) {
	            return Direction.LEFT;
	        }
	        return Direction.RIGHT;
	    };
	    /**
	     * Deselects the chip with the given id and optionally notifies clients.
	     */
	    MDCChipSetFoundation.prototype.deselectImpl = function (chipId, shouldNotifyClients) {
	        if (shouldNotifyClients === void 0) { shouldNotifyClients = false; }
	        var index = this.selectedChipIds.indexOf(chipId);
	        if (index >= 0) {
	            this.selectedChipIds.splice(index, 1);
	            var chipIndex = this.adapter.getIndexOfChipById(chipId);
	            this.adapter.selectChipAtIndex(chipIndex, /** isSelected */ false, shouldNotifyClients);
	        }
	    };
	    /**
	     * Deselects the chip with the given id and notifies clients.
	     */
	    MDCChipSetFoundation.prototype.deselectAndNotifyClients = function (chipId) {
	        this.deselectImpl(chipId, true);
	    };
	    /**
	     * Toggles selection of the chip with the given id.
	     */
	    MDCChipSetFoundation.prototype.toggleSelect = function (chipId) {
	        if (this.selectedChipIds.indexOf(chipId) >= 0) {
	            this.deselectAndNotifyClients(chipId);
	        }
	        else {
	            this.selectAndNotifyClients(chipId);
	        }
	    };
	    MDCChipSetFoundation.prototype.removeFocusFromChipsExcept = function (index) {
	        var chipCount = this.adapter.getChipListCount();
	        for (var i = 0; i < chipCount; i++) {
	            if (i !== index) {
	                this.adapter.removeFocusFromChipAtIndex(i);
	            }
	        }
	    };
	    MDCChipSetFoundation.prototype.selectAndNotifyClients = function (chipId) {
	        this.selectImpl(chipId, true);
	    };
	    MDCChipSetFoundation.prototype.selectImpl = function (chipId, shouldNotifyClients) {
	        if (this.selectedChipIds.indexOf(chipId) >= 0) {
	            return;
	        }
	        if (this.adapter.hasClass(cssClasses$u.CHOICE) &&
	            this.selectedChipIds.length > 0) {
	            var previouslySelectedChip = this.selectedChipIds[0];
	            var previouslySelectedIndex = this.adapter.getIndexOfChipById(previouslySelectedChip);
	            this.selectedChipIds = [];
	            this.adapter.selectChipAtIndex(previouslySelectedIndex, /** isSelected */ false, shouldNotifyClients);
	        }
	        this.selectedChipIds.push(chipId);
	        var index = this.adapter.getIndexOfChipById(chipId);
	        this.adapter.selectChipAtIndex(index, /** isSelected */ true, shouldNotifyClients);
	    };
	    return MDCChipSetFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var _a$1 = MDCChipFoundation.strings, INTERACTION_EVENT = _a$1.INTERACTION_EVENT, SELECTION_EVENT = _a$1.SELECTION_EVENT, REMOVAL_EVENT = _a$1.REMOVAL_EVENT, NAVIGATION_EVENT = _a$1.NAVIGATION_EVENT;
	var CHIP_SELECTOR = MDCChipSetFoundation.strings.CHIP_SELECTOR;
	var idCounter = 0;
	var MDCChipSet = /** @class */ (function (_super) {
	    __extends(MDCChipSet, _super);
	    function MDCChipSet() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCChipSet.attachTo = function (root) {
	        return new MDCChipSet(root);
	    };
	    Object.defineProperty(MDCChipSet.prototype, "chips", {
	        get: function () {
	            return this.chipsList.slice();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCChipSet.prototype, "selectedChipIds", {
	        /**
	         * @return An array of the IDs of all selected chips.
	         */
	        get: function () {
	            return this.foundation.getSelectedChipIds();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * @param chipFactory A function which creates a new MDCChip.
	     */
	    MDCChipSet.prototype.initialize = function (chipFactory) {
	        if (chipFactory === void 0) { chipFactory = function (el) { return new MDCChip(el); }; }
	        this.chipFactory = chipFactory;
	        this.chipsList = this.instantiateChips(this.chipFactory);
	    };
	    MDCChipSet.prototype.initialSyncWithDOM = function () {
	        var e_1, _a;
	        var _this = this;
	        try {
	            for (var _b = __values(this.chipsList), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var chip = _c.value;
	                if (chip.id && chip.selected) {
	                    this.foundation.select(chip.id);
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        this.handleChipInteraction = function (evt) {
	            return _this.foundation.handleChipInteraction(evt.detail);
	        };
	        this.handleChipSelection = function (evt) {
	            return _this.foundation.handleChipSelection(evt.detail);
	        };
	        this.handleChipRemoval = function (evt) {
	            return _this.foundation.handleChipRemoval(evt.detail);
	        };
	        this.handleChipNavigation = function (evt) {
	            return _this.foundation.handleChipNavigation(evt.detail);
	        };
	        this.listen(INTERACTION_EVENT, this.handleChipInteraction);
	        this.listen(SELECTION_EVENT, this.handleChipSelection);
	        this.listen(REMOVAL_EVENT, this.handleChipRemoval);
	        this.listen(NAVIGATION_EVENT, this.handleChipNavigation);
	    };
	    MDCChipSet.prototype.destroy = function () {
	        var e_2, _a;
	        try {
	            for (var _b = __values(this.chipsList), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var chip = _c.value;
	                chip.destroy();
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	        this.unlisten(INTERACTION_EVENT, this.handleChipInteraction);
	        this.unlisten(SELECTION_EVENT, this.handleChipSelection);
	        this.unlisten(REMOVAL_EVENT, this.handleChipRemoval);
	        this.unlisten(NAVIGATION_EVENT, this.handleChipNavigation);
	        _super.prototype.destroy.call(this);
	    };
	    /**
	     * Adds a new chip object to the chip set from the given chip element.
	     */
	    MDCChipSet.prototype.addChip = function (chipEl) {
	        chipEl.id = chipEl.id || "mdc-chip-" + ++idCounter;
	        this.chipsList.push(this.chipFactory(chipEl));
	    };
	    MDCChipSet.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            announceMessage: function (message) {
	                announce$1(message);
	            },
	            focusChipPrimaryActionAtIndex: function (index) {
	                _this.chipsList[index].focusPrimaryAction();
	            },
	            focusChipTrailingActionAtIndex: function (index) {
	                _this.chipsList[index].focusTrailingAction();
	            },
	            getChipListCount: function () { return _this.chips.length; },
	            getIndexOfChipById: function (chipId) {
	                return _this.findChipIndex(chipId);
	            },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            isRTL: function () { return window.getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl'; },
	            removeChipAtIndex: function (index) {
	                if (index >= 0 && index < _this.chips.length) {
	                    _this.chipsList[index].destroy();
	                    _this.chipsList[index].remove();
	                    _this.chipsList.splice(index, 1);
	                }
	            },
	            removeFocusFromChipAtIndex: function (index) {
	                _this.chipsList[index].removeFocus();
	            },
	            selectChipAtIndex: function (index, selected, shouldNotifyClients) {
	                if (index >= 0 && index < _this.chips.length) {
	                    _this.chipsList[index].setSelectedFromChipSet(selected, shouldNotifyClients);
	                }
	            },
	        };
	        return new MDCChipSetFoundation(adapter);
	    };
	    /**
	     * Instantiates chip components on all of the chip set's child chip elements.
	     */
	    MDCChipSet.prototype.instantiateChips = function (chipFactory) {
	        var chipElements = [].slice.call(this.root.querySelectorAll(CHIP_SELECTOR));
	        return chipElements.map(function (el) {
	            el.id = el.id || "mdc-chip-" + ++idCounter;
	            return chipFactory(el);
	        });
	    };
	    /**
	     * Returns the index of the chip with the given id, or -1 if the chip does not exist.
	     */
	    MDCChipSet.prototype.findChipIndex = function (chipId) {
	        for (var i = 0; i < this.chips.length; i++) {
	            if (this.chipsList[i].id === chipId) {
	                return i;
	            }
	        }
	        return -1;
	    };
	    return MDCChipSet;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$t = {
		__proto__: null,
		trailingActionStrings: strings$x,
		MDCChipTrailingAction: MDCChipTrailingAction,
		MDCChipTrailingActionFoundation: MDCChipTrailingActionFoundation,
		chipCssClasses: cssClasses$v,
		chipStrings: strings$w,
		MDCChip: MDCChip,
		MDCChipFoundation: MDCChipFoundation,
		chipSetCssClasses: cssClasses$u,
		chipSetStrings: strings$v,
		MDCChipSet: MDCChipSet,
		MDCChipSetFoundation: MDCChipSetFoundation
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * CSS class names used in component.
	 */
	var cssClasses$t = {
	    INDETERMINATE_CLASS: 'mdc-circular-progress--indeterminate',
	    CLOSED_CLASS: 'mdc-circular-progress--closed',
	};
	/**
	 * Attributes and selectors used in component.
	 */
	var strings$u = {
	    ARIA_HIDDEN: 'aria-hidden',
	    ARIA_VALUENOW: 'aria-valuenow',
	    DETERMINATE_CIRCLE_SELECTOR: '.mdc-circular-progress__determinate-circle',
	    RADIUS: 'r',
	    STROKE_DASHOFFSET: 'stroke-dashoffset',
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCCircularProgressFoundation = /** @class */ (function (_super) {
	    __extends(MDCCircularProgressFoundation, _super);
	    function MDCCircularProgressFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCCircularProgressFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCCircularProgressFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$t;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCCircularProgressFoundation, "strings", {
	        get: function () {
	            return strings$u;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCCircularProgressFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                getDeterminateCircleAttribute: function () { return null; },
	                hasClass: function () { return false; },
	                removeClass: function () { return undefined; },
	                removeAttribute: function () { return undefined; },
	                setAttribute: function () { return undefined; },
	                setDeterminateCircleAttribute: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCCircularProgressFoundation.prototype.init = function () {
	        this.closed = this.adapter.hasClass(cssClasses$t.CLOSED_CLASS);
	        this.determinate = !this.adapter.hasClass(cssClasses$t.INDETERMINATE_CLASS);
	        this.progress = 0;
	        if (this.determinate) {
	            this.adapter.setAttribute(strings$u.ARIA_VALUENOW, this.progress.toString());
	        }
	        this.radius =
	            Number(this.adapter.getDeterminateCircleAttribute(strings$u.RADIUS));
	    };
	    /**
	     * Sets whether the progress indicator is in determinate mode.
	     * @param determinate Whether the indicator should be determinate.
	     */
	    MDCCircularProgressFoundation.prototype.setDeterminate = function (determinate) {
	        this.determinate = determinate;
	        if (this.determinate) {
	            this.adapter.removeClass(cssClasses$t.INDETERMINATE_CLASS);
	            this.setProgress(this.progress);
	        }
	        else {
	            this.adapter.addClass(cssClasses$t.INDETERMINATE_CLASS);
	            this.adapter.removeAttribute(strings$u.ARIA_VALUENOW);
	        }
	    };
	    MDCCircularProgressFoundation.prototype.isDeterminate = function () {
	        return this.determinate;
	    };
	    /**
	     * Sets the current progress value. In indeterminate mode, this has no
	     * visual effect but will be reflected if the indicator is switched to
	     * determinate mode.
	     * @param value The current progress value, which must be between 0 and 1.
	     */
	    MDCCircularProgressFoundation.prototype.setProgress = function (value) {
	        this.progress = value;
	        if (this.determinate) {
	            var unfilledArcLength = (1 - this.progress) * (2 * Math.PI * this.radius);
	            this.adapter.setDeterminateCircleAttribute(strings$u.STROKE_DASHOFFSET, "" + unfilledArcLength);
	            this.adapter.setAttribute(strings$u.ARIA_VALUENOW, this.progress.toString());
	        }
	    };
	    MDCCircularProgressFoundation.prototype.getProgress = function () {
	        return this.progress;
	    };
	    /**
	     * Shows the progress indicator.
	     */
	    MDCCircularProgressFoundation.prototype.open = function () {
	        this.closed = false;
	        this.adapter.removeClass(cssClasses$t.CLOSED_CLASS);
	        this.adapter.removeAttribute(strings$u.ARIA_HIDDEN);
	    };
	    /**
	     * Hides the progress indicator
	     */
	    MDCCircularProgressFoundation.prototype.close = function () {
	        this.closed = true;
	        this.adapter.addClass(cssClasses$t.CLOSED_CLASS);
	        this.adapter.setAttribute(strings$u.ARIA_HIDDEN, 'true');
	    };
	    /**
	     * @return Returns whether the progress indicator is hidden.
	     */
	    MDCCircularProgressFoundation.prototype.isClosed = function () {
	        return this.closed;
	    };
	    return MDCCircularProgressFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCCircularProgress = /** @class */ (function (_super) {
	    __extends(MDCCircularProgress, _super);
	    function MDCCircularProgress() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCCircularProgress.prototype.initialize = function () {
	        this.determinateCircle = this.root.querySelector(MDCCircularProgressFoundation.strings.DETERMINATE_CIRCLE_SELECTOR);
	    };
	    MDCCircularProgress.attachTo = function (root) {
	        return new MDCCircularProgress(root);
	    };
	    Object.defineProperty(MDCCircularProgress.prototype, "determinate", {
	        /**
	         * Sets whether the progress indicator is in determinate mode.
	         * @param isDeterminate Whether the indicator should be determinate.
	         */
	        set: function (value) {
	            this.foundation.setDeterminate(value);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCCircularProgress.prototype, "progress", {
	        /**
	         * Sets the current progress value. In indeterminate mode, this has no
	         * visual effect but will be reflected if the indicator is switched to
	         * determinate mode.
	         * @param value The current progress value, which must be between 0 and 1.
	         */
	        set: function (value) {
	            this.foundation.setProgress(value);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCCircularProgress.prototype, "isClosed", {
	        /**
	         * Whether the progress indicator is hidden.
	         */
	        get: function () {
	            return this.foundation.isClosed();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Shows the progress indicator.
	     */
	    MDCCircularProgress.prototype.open = function () {
	        this.foundation.open();
	    };
	    /**
	     * Hides the progress indicator.
	     */
	    MDCCircularProgress.prototype.close = function () {
	        this.foundation.close();
	    };
	    MDCCircularProgress.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take
	        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
	        // methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            getDeterminateCircleAttribute: function (attributeName) {
	                return _this.determinateCircle.getAttribute(attributeName);
	            },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            removeAttribute: function (attributeName) {
	                _this.root.removeAttribute(attributeName);
	            },
	            setAttribute: function (attributeName, value) {
	                _this.root.setAttribute(attributeName, value);
	            },
	            setDeterminateCircleAttribute: function (attributeName, value) {
	                _this.determinateCircle.setAttribute(attributeName, value);
	            },
	        };
	        return new MDCCircularProgressFoundation(adapter);
	    };
	    return MDCCircularProgress;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$s = {
		__proto__: null,
		MDCCircularProgress: MDCCircularProgress,
		cssClasses: cssClasses$t,
		strings: strings$u,
		MDCCircularProgressFoundation: MDCCircularProgressFoundation
	};

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$s = {
	    CLOSED_CLASS: 'mdc-linear-progress--closed',
	    CLOSED_ANIMATION_OFF_CLASS: 'mdc-linear-progress--closed-animation-off',
	    INDETERMINATE_CLASS: 'mdc-linear-progress--indeterminate',
	    REVERSED_CLASS: 'mdc-linear-progress--reversed',
	    ANIMATION_READY_CLASS: 'mdc-linear-progress--animation-ready',
	};
	var strings$t = {
	    ARIA_HIDDEN: 'aria-hidden',
	    ARIA_VALUEMAX: 'aria-valuemax',
	    ARIA_VALUEMIN: 'aria-valuemin',
	    ARIA_VALUENOW: 'aria-valuenow',
	    BUFFER_BAR_SELECTOR: '.mdc-linear-progress__buffer-bar',
	    FLEX_BASIS: 'flex-basis',
	    PRIMARY_BAR_SELECTOR: '.mdc-linear-progress__primary-bar',
	};
	// these are percentages pulled from keyframes.scss
	var animationDimensionPercentages = {
	    PRIMARY_HALF: .8367142,
	    PRIMARY_FULL: 2.00611057,
	    SECONDARY_QUARTER: .37651913,
	    SECONDARY_HALF: .84386165,
	    SECONDARY_FULL: 1.60277782,
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCLinearProgressFoundation = /** @class */ (function (_super) {
	    __extends(MDCLinearProgressFoundation, _super);
	    function MDCLinearProgressFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCLinearProgressFoundation.defaultAdapter), adapter)) || this;
	        _this.observer = null;
	        return _this;
	    }
	    Object.defineProperty(MDCLinearProgressFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$s;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCLinearProgressFoundation, "strings", {
	        get: function () {
	            return strings$t;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCLinearProgressFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                attachResizeObserver: function () { return null; },
	                forceLayout: function () { return undefined; },
	                getWidth: function () { return 0; },
	                hasClass: function () { return false; },
	                setBufferBarStyle: function () { return null; },
	                setPrimaryBarStyle: function () { return null; },
	                setStyle: function () { return undefined; },
	                removeAttribute: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                setAttribute: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCLinearProgressFoundation.prototype.init = function () {
	        var _this = this;
	        this.determinate = !this.adapter.hasClass(cssClasses$s.INDETERMINATE_CLASS);
	        this.adapter.addClass(cssClasses$s.ANIMATION_READY_CLASS);
	        this.progress = 0;
	        this.buffer = 1;
	        this.observer = this.adapter.attachResizeObserver(function (entries) {
	            var e_1, _a;
	            if (_this.determinate) {
	                return;
	            }
	            try {
	                for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
	                    var entry = entries_1_1.value;
	                    if (entry.contentRect) {
	                        _this.calculateAndSetDimensions(entry.contentRect.width);
	                    }
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        });
	        if (!this.determinate && this.observer) {
	            this.calculateAndSetDimensions(this.adapter.getWidth());
	        }
	    };
	    MDCLinearProgressFoundation.prototype.setDeterminate = function (isDeterminate) {
	        this.determinate = isDeterminate;
	        if (this.determinate) {
	            this.adapter.removeClass(cssClasses$s.INDETERMINATE_CLASS);
	            this.adapter.setAttribute(strings$t.ARIA_VALUENOW, this.progress.toString());
	            this.adapter.setAttribute(strings$t.ARIA_VALUEMAX, '1');
	            this.adapter.setAttribute(strings$t.ARIA_VALUEMIN, '0');
	            this.setPrimaryBarProgress(this.progress);
	            this.setBufferBarProgress(this.buffer);
	            return;
	        }
	        if (this.observer) {
	            this.calculateAndSetDimensions(this.adapter.getWidth());
	        }
	        this.adapter.addClass(cssClasses$s.INDETERMINATE_CLASS);
	        this.adapter.removeAttribute(strings$t.ARIA_VALUENOW);
	        this.adapter.removeAttribute(strings$t.ARIA_VALUEMAX);
	        this.adapter.removeAttribute(strings$t.ARIA_VALUEMIN);
	        this.setPrimaryBarProgress(1);
	        this.setBufferBarProgress(1);
	    };
	    MDCLinearProgressFoundation.prototype.isDeterminate = function () {
	        return this.determinate;
	    };
	    MDCLinearProgressFoundation.prototype.setProgress = function (value) {
	        this.progress = value;
	        if (this.determinate) {
	            this.setPrimaryBarProgress(value);
	            this.adapter.setAttribute(strings$t.ARIA_VALUENOW, value.toString());
	        }
	    };
	    MDCLinearProgressFoundation.prototype.getProgress = function () {
	        return this.progress;
	    };
	    MDCLinearProgressFoundation.prototype.setBuffer = function (value) {
	        this.buffer = value;
	        if (this.determinate) {
	            this.setBufferBarProgress(value);
	        }
	    };
	    MDCLinearProgressFoundation.prototype.getBuffer = function () {
	        return this.buffer;
	    };
	    MDCLinearProgressFoundation.prototype.open = function () {
	        this.adapter.removeClass(cssClasses$s.CLOSED_CLASS);
	        this.adapter.removeClass(cssClasses$s.CLOSED_ANIMATION_OFF_CLASS);
	        this.adapter.removeAttribute(strings$t.ARIA_HIDDEN);
	    };
	    MDCLinearProgressFoundation.prototype.close = function () {
	        this.adapter.addClass(cssClasses$s.CLOSED_CLASS);
	        this.adapter.setAttribute(strings$t.ARIA_HIDDEN, 'true');
	    };
	    MDCLinearProgressFoundation.prototype.isClosed = function () {
	        return this.adapter.hasClass(cssClasses$s.CLOSED_CLASS);
	    };
	    /**
	     * Handles the transitionend event emitted after `close()` is called and the
	     * opacity fades out. This is so that animations are removed only after the
	     * progress indicator is completely hidden.
	     */
	    MDCLinearProgressFoundation.prototype.handleTransitionEnd = function () {
	        if (this.adapter.hasClass(cssClasses$s.CLOSED_CLASS)) {
	            this.adapter.addClass(cssClasses$s.CLOSED_ANIMATION_OFF_CLASS);
	        }
	    };
	    MDCLinearProgressFoundation.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        if (this.observer) {
	            this.observer.disconnect();
	        }
	    };
	    MDCLinearProgressFoundation.prototype.restartAnimation = function () {
	        this.adapter.removeClass(cssClasses$s.ANIMATION_READY_CLASS);
	        this.adapter.forceLayout();
	        this.adapter.addClass(cssClasses$s.ANIMATION_READY_CLASS);
	    };
	    MDCLinearProgressFoundation.prototype.setPrimaryBarProgress = function (progressValue) {
	        var value = "scaleX(" + progressValue + ")";
	        // Accessing `window` without a `typeof` check will throw on Node
	        // environments.
	        var transformProp = typeof window !== 'undefined' ?
	            getCorrectPropertyName(window, 'transform') :
	            'transform';
	        this.adapter.setPrimaryBarStyle(transformProp, value);
	    };
	    MDCLinearProgressFoundation.prototype.setBufferBarProgress = function (progressValue) {
	        var value = progressValue * 100 + "%";
	        this.adapter.setBufferBarStyle(strings$t.FLEX_BASIS, value);
	    };
	    MDCLinearProgressFoundation.prototype.calculateAndSetDimensions = function (width) {
	        var primaryHalf = width * animationDimensionPercentages.PRIMARY_HALF;
	        var primaryFull = width * animationDimensionPercentages.PRIMARY_FULL;
	        var secondaryQuarter = width * animationDimensionPercentages.SECONDARY_QUARTER;
	        var secondaryHalf = width * animationDimensionPercentages.SECONDARY_HALF;
	        var secondaryFull = width * animationDimensionPercentages.SECONDARY_FULL;
	        this.adapter.setStyle('--mdc-linear-progress-primary-half', primaryHalf + "px");
	        this.adapter.setStyle('--mdc-linear-progress-primary-half-neg', -primaryHalf + "px");
	        this.adapter.setStyle('--mdc-linear-progress-primary-full', primaryFull + "px");
	        this.adapter.setStyle('--mdc-linear-progress-primary-full-neg', -primaryFull + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-quarter', secondaryQuarter + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-quarter-neg', -secondaryQuarter + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-half', secondaryHalf + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-half-neg', -secondaryHalf + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-full', secondaryFull + "px");
	        this.adapter.setStyle('--mdc-linear-progress-secondary-full-neg', -secondaryFull + "px");
	        // need to restart animation for custom props to apply to keyframes
	        this.restartAnimation();
	    };
	    return MDCLinearProgressFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCLinearProgress = /** @class */ (function (_super) {
	    __extends(MDCLinearProgress, _super);
	    function MDCLinearProgress() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCLinearProgress.attachTo = function (root) {
	        return new MDCLinearProgress(root);
	    };
	    Object.defineProperty(MDCLinearProgress.prototype, "determinate", {
	        set: function (value) {
	            this.foundation.setDeterminate(value);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCLinearProgress.prototype, "progress", {
	        set: function (value) {
	            this.foundation.setProgress(value);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCLinearProgress.prototype, "buffer", {
	        set: function (value) {
	            this.foundation.setBuffer(value);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCLinearProgress.prototype.open = function () {
	        this.foundation.open();
	    };
	    MDCLinearProgress.prototype.close = function () {
	        this.foundation.close();
	    };
	    MDCLinearProgress.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.root.addEventListener('transitionend', function () {
	            _this.foundation.handleTransitionEnd();
	        });
	    };
	    MDCLinearProgress.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take
	        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
	        // methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            forceLayout: function () {
	                _this.root.getBoundingClientRect();
	            },
	            setBufferBarStyle: function (styleProperty, value) {
	                var bufferBar = _this.root.querySelector(MDCLinearProgressFoundation.strings.BUFFER_BAR_SELECTOR);
	                if (bufferBar) {
	                    bufferBar.style.setProperty(styleProperty, value);
	                }
	            },
	            setPrimaryBarStyle: function (styleProperty, value) {
	                var primaryBar = _this.root.querySelector(MDCLinearProgressFoundation.strings.PRIMARY_BAR_SELECTOR);
	                if (primaryBar) {
	                    primaryBar.style.setProperty(styleProperty, value);
	                }
	            },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            removeAttribute: function (attributeName) {
	                _this.root.removeAttribute(attributeName);
	            },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            setAttribute: function (attributeName, value) {
	                _this.root.setAttribute(attributeName, value);
	            },
	            setStyle: function (name, value) {
	                _this.root.style.setProperty(name, value);
	            },
	            attachResizeObserver: function (callback) {
	                var RO = window.ResizeObserver;
	                if (RO) {
	                    var ro = new RO(callback);
	                    ro.observe(_this.root);
	                    return ro;
	                }
	                return null;
	            },
	            getWidth: function () { return _this.root.offsetWidth; },
	        };
	        return new MDCLinearProgressFoundation(adapter);
	    };
	    return MDCLinearProgress;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * CSS class names used in component.
	 */
	var cssClasses$r = {
	    CELL: 'mdc-data-table__cell',
	    CELL_NUMERIC: 'mdc-data-table__cell--numeric',
	    CONTENT: 'mdc-data-table__content',
	    HEADER_CELL: 'mdc-data-table__header-cell',
	    HEADER_CELL_LABEL: 'mdc-data-table__header-cell-label',
	    HEADER_CELL_SORTED: 'mdc-data-table__header-cell--sorted',
	    HEADER_CELL_SORTED_DESCENDING: 'mdc-data-table__header-cell--sorted-descending',
	    HEADER_CELL_WITH_SORT: 'mdc-data-table__header-cell--with-sort',
	    HEADER_CELL_WRAPPER: 'mdc-data-table__header-cell-wrapper',
	    HEADER_ROW: 'mdc-data-table__header-row',
	    HEADER_ROW_CHECKBOX: 'mdc-data-table__header-row-checkbox',
	    IN_PROGRESS: 'mdc-data-table--in-progress',
	    LINEAR_PROGRESS: 'mdc-data-table__linear-progress',
	    PAGINATION_ROWS_PER_PAGE_LABEL: 'mdc-data-table__pagination-rows-per-page-label',
	    PAGINATION_ROWS_PER_PAGE_SELECT: 'mdc-data-table__pagination-rows-per-page-select',
	    PROGRESS_INDICATOR: 'mdc-data-table__progress-indicator',
	    ROOT: 'mdc-data-table',
	    ROW: 'mdc-data-table__row',
	    ROW_CHECKBOX: 'mdc-data-table__row-checkbox',
	    ROW_SELECTED: 'mdc-data-table__row--selected',
	    SORT_ICON_BUTTON: 'mdc-data-table__sort-icon-button',
	    SORT_STATUS_LABEL: 'mdc-data-table__sort-status-label',
	    TABLE_CONTAINER: 'mdc-data-table__table-container',
	};
	/**
	 * DOM attributes used in component.
	 */
	var attributes$3 = {
	    ARIA_SELECTED: 'aria-selected',
	    ARIA_SORT: 'aria-sort',
	};
	/**
	 * List of data attributes used in component.
	 */
	var dataAttributes = {
	    COLUMN_ID: 'data-column-id',
	    ROW_ID: 'data-row-id',
	};
	/**
	 * CSS selectors used in component.
	 */
	var selectors$1 = {
	    CONTENT: "." + cssClasses$r.CONTENT,
	    HEADER_CELL: "." + cssClasses$r.HEADER_CELL,
	    HEADER_CELL_WITH_SORT: "." + cssClasses$r.HEADER_CELL_WITH_SORT,
	    HEADER_ROW: "." + cssClasses$r.HEADER_ROW,
	    HEADER_ROW_CHECKBOX: "." + cssClasses$r.HEADER_ROW_CHECKBOX,
	    PROGRESS_INDICATOR: "." + cssClasses$r.PROGRESS_INDICATOR,
	    ROW: "." + cssClasses$r.ROW,
	    ROW_CHECKBOX: "." + cssClasses$r.ROW_CHECKBOX,
	    ROW_SELECTED: "." + cssClasses$r.ROW_SELECTED,
	    SORT_ICON_BUTTON: "." + cssClasses$r.SORT_ICON_BUTTON,
	    SORT_STATUS_LABEL: "." + cssClasses$r.SORT_STATUS_LABEL,
	};
	/**
	 * Messages used in component.
	 */
	var messages = {
	    SORTED_IN_DESCENDING: 'Sorted in descending order',
	    SORTED_IN_ASCENDING: 'Sorted in ascending order',
	};
	/**
	 * Attributes and selectors used in component.
	 * @deprecated Use `attributes`, `dataAttributes` and `selectors` instead.
	 */
	var strings$s = {
	    ARIA_SELECTED: attributes$3.ARIA_SELECTED,
	    ARIA_SORT: attributes$3.ARIA_SORT,
	    DATA_ROW_ID_ATTR: dataAttributes.ROW_ID,
	    HEADER_ROW_CHECKBOX_SELECTOR: selectors$1.HEADER_ROW_CHECKBOX,
	    ROW_CHECKBOX_SELECTOR: selectors$1.ROW_CHECKBOX,
	    ROW_SELECTED_SELECTOR: selectors$1.ROW_SELECTED,
	    ROW_SELECTOR: selectors$1.ROW,
	};
	/**
	 * Sort values defined by ARIA.
	 * See https://www.w3.org/WAI/PF/aria/states_and_properties#aria-sort
	 */
	var SortValue;
	(function (SortValue) {
	    // Items are sorted in ascending order by this column.
	    SortValue["ASCENDING"] = "ascending";
	    // Items are sorted in descending order by this column.
	    SortValue["DESCENDING"] = "descending";
	    // There is no defined sort applied to the column.
	    SortValue["NONE"] = "none";
	    // A sort algorithm other than ascending or descending has been applied.
	    SortValue["OTHER"] = "other";
	})(SortValue || (SortValue = {}));
	/**
	 * Event names used in component.
	 */
	var events$4 = {
	    ROW_CLICK: 'MDCDataTable:rowClick',
	    ROW_SELECTION_CHANGED: 'MDCDataTable:rowSelectionChanged',
	    SELECTED_ALL: 'MDCDataTable:selectedAll',
	    SORTED: 'MDCDataTable:sorted',
	    UNSELECTED_ALL: 'MDCDataTable:unselectedAll',
	};

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * The Foundation of data table component containing pure business logic, any
	 * logic requiring DOM manipulation are delegated to adapter methods.
	 */
	var MDCDataTableFoundation = /** @class */ (function (_super) {
	    __extends(MDCDataTableFoundation, _super);
	    function MDCDataTableFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCDataTableFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCDataTableFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                addClassAtRowIndex: function () { return undefined; },
	                getAttributeByHeaderCellIndex: function () { return ''; },
	                getHeaderCellCount: function () { return 0; },
	                getHeaderCellElements: function () { return []; },
	                getRowCount: function () { return 0; },
	                getRowElements: function () { return []; },
	                getRowIdAtIndex: function () { return ''; },
	                getRowIndexByChildElement: function () { return 0; },
	                getSelectedRowCount: function () { return 0; },
	                getTableContainerHeight: function () { return 0; },
	                getTableHeaderHeight: function () { return 0; },
	                isCheckboxAtRowIndexChecked: function () { return false; },
	                isHeaderRowCheckboxChecked: function () { return false; },
	                isRowsSelectable: function () { return false; },
	                notifyRowSelectionChanged: function () { return undefined; },
	                notifySelectedAll: function () { return undefined; },
	                notifySortAction: function () { return undefined; },
	                notifyUnselectedAll: function () { return undefined; },
	                notifyRowClick: function () { return undefined; },
	                registerHeaderRowCheckbox: function () { return undefined; },
	                registerRowCheckboxes: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                removeClassAtRowIndex: function () { return undefined; },
	                removeClassNameByHeaderCellIndex: function () { return undefined; },
	                setAttributeAtRowIndex: function () { return undefined; },
	                setAttributeByHeaderCellIndex: function () { return undefined; },
	                setClassNameByHeaderCellIndex: function () { return undefined; },
	                setHeaderRowCheckboxChecked: function () { return undefined; },
	                setHeaderRowCheckboxIndeterminate: function () { return undefined; },
	                setProgressIndicatorStyles: function () { return undefined; },
	                setRowCheckboxCheckedAtIndex: function () { return undefined; },
	                setSortStatusLabelByHeaderCellIndex: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Re-initializes header row checkbox and row checkboxes when selectable rows
	     * are added or removed from table. Use this if registering checkbox is
	     * synchronous.
	     */
	    MDCDataTableFoundation.prototype.layout = function () {
	        if (this.adapter.isRowsSelectable()) {
	            this.adapter.registerHeaderRowCheckbox();
	            this.adapter.registerRowCheckboxes();
	            this.setHeaderRowCheckboxState();
	        }
	    };
	    /**
	     * Re-initializes header row checkbox and row checkboxes when selectable rows
	     * are added or removed from table. Use this if registering checkbox is
	     * asynchronous.
	     */
	    MDCDataTableFoundation.prototype.layoutAsync = function () {
	        return __awaiter(this, void 0, void 0, function () {
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        if (!this.adapter.isRowsSelectable()) return [3 /*break*/, 3];
	                        return [4 /*yield*/, this.adapter.registerHeaderRowCheckbox()];
	                    case 1:
	                        _a.sent();
	                        return [4 /*yield*/, this.adapter.registerRowCheckboxes()];
	                    case 2:
	                        _a.sent();
	                        this.setHeaderRowCheckboxState();
	                        _a.label = 3;
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    /**
	     * @return Returns array of row elements.
	     */
	    MDCDataTableFoundation.prototype.getRows = function () {
	        return this.adapter.getRowElements();
	    };
	    /**
	     * @return Array of header cell elements.
	     */
	    MDCDataTableFoundation.prototype.getHeaderCells = function () {
	        return this.adapter.getHeaderCellElements();
	    };
	    /**
	     * Sets selected row ids. Overwrites previously selected rows.
	     * @param rowIds Array of row ids that needs to be selected.
	     */
	    MDCDataTableFoundation.prototype.setSelectedRowIds = function (rowIds) {
	        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
	            var rowId = this.adapter.getRowIdAtIndex(rowIndex);
	            var isSelected = false;
	            if (rowId && rowIds.indexOf(rowId) >= 0) {
	                isSelected = true;
	            }
	            this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);
	            this.selectRowAtIndex(rowIndex, isSelected);
	        }
	        this.setHeaderRowCheckboxState();
	    };
	    /**
	     * @return Returns array of all row ids.
	     */
	    MDCDataTableFoundation.prototype.getRowIds = function () {
	        var rowIds = [];
	        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
	            rowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
	        }
	        return rowIds;
	    };
	    /**
	     * @return Returns array of selected row ids.
	     */
	    MDCDataTableFoundation.prototype.getSelectedRowIds = function () {
	        var selectedRowIds = [];
	        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
	            if (this.adapter.isCheckboxAtRowIndexChecked(rowIndex)) {
	                selectedRowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
	            }
	        }
	        return selectedRowIds;
	    };
	    /**
	     * Handles header row checkbox change event.
	     */
	    MDCDataTableFoundation.prototype.handleHeaderRowCheckboxChange = function () {
	        var isHeaderChecked = this.adapter.isHeaderRowCheckboxChecked();
	        for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
	            this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);
	            this.selectRowAtIndex(rowIndex, isHeaderChecked);
	        }
	        if (isHeaderChecked) {
	            this.adapter.notifySelectedAll();
	        }
	        else {
	            this.adapter.notifyUnselectedAll();
	        }
	    };
	    /**
	     * Handles change event originated from row checkboxes.
	     */
	    MDCDataTableFoundation.prototype.handleRowCheckboxChange = function (event) {
	        var rowIndex = this.adapter.getRowIndexByChildElement(event.target);
	        if (rowIndex === -1) {
	            return;
	        }
	        var selected = this.adapter.isCheckboxAtRowIndexChecked(rowIndex);
	        this.selectRowAtIndex(rowIndex, selected);
	        this.setHeaderRowCheckboxState();
	        var rowId = this.adapter.getRowIdAtIndex(rowIndex);
	        this.adapter.notifyRowSelectionChanged({ rowId: rowId, rowIndex: rowIndex, selected: selected });
	    };
	    /**
	     * Handles sort action on sortable header cell.
	     */
	    MDCDataTableFoundation.prototype.handleSortAction = function (eventData) {
	        var columnId = eventData.columnId, columnIndex = eventData.columnIndex, headerCell = eventData.headerCell;
	        // Reset sort attributes / classes on other header cells.
	        for (var index = 0; index < this.adapter.getHeaderCellCount(); index++) {
	            if (index === columnIndex) {
	                continue;
	            }
	            this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses$r.HEADER_CELL_SORTED);
	            this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses$r.HEADER_CELL_SORTED_DESCENDING);
	            this.adapter.setAttributeByHeaderCellIndex(index, strings$s.ARIA_SORT, SortValue.NONE);
	            this.adapter.setSortStatusLabelByHeaderCellIndex(index, SortValue.NONE);
	        }
	        // Set appropriate sort attributes / classes on target header cell.
	        this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses$r.HEADER_CELL_SORTED);
	        var currentSortValue = this.adapter.getAttributeByHeaderCellIndex(columnIndex, strings$s.ARIA_SORT);
	        var sortValue = SortValue.NONE;
	        // Set to descending if sorted on ascending order.
	        if (currentSortValue === SortValue.ASCENDING) {
	            this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses$r.HEADER_CELL_SORTED_DESCENDING);
	            this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings$s.ARIA_SORT, SortValue.DESCENDING);
	            sortValue = SortValue.DESCENDING;
	            // Set to ascending if sorted on descending order.
	        }
	        else if (currentSortValue === SortValue.DESCENDING) {
	            this.adapter.removeClassNameByHeaderCellIndex(columnIndex, cssClasses$r.HEADER_CELL_SORTED_DESCENDING);
	            this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings$s.ARIA_SORT, SortValue.ASCENDING);
	            sortValue = SortValue.ASCENDING;
	        }
	        else {
	            // Set to ascending by default when not sorted.
	            this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings$s.ARIA_SORT, SortValue.ASCENDING);
	            sortValue = SortValue.ASCENDING;
	        }
	        this.adapter.setSortStatusLabelByHeaderCellIndex(columnIndex, sortValue);
	        this.adapter.notifySortAction({
	            columnId: columnId,
	            columnIndex: columnIndex,
	            headerCell: headerCell,
	            sortValue: sortValue,
	        });
	    };
	    /**
	     * Handles data table row click event.
	     */
	    MDCDataTableFoundation.prototype.handleRowClick = function (_a) {
	        var rowId = _a.rowId, row = _a.row;
	        this.adapter.notifyRowClick({
	            rowId: rowId,
	            row: row,
	        });
	    };
	    /**
	     * Shows progress indicator blocking only the table body content when in
	     * loading state.
	     */
	    MDCDataTableFoundation.prototype.showProgress = function () {
	        var tableHeaderHeight = this.adapter.getTableHeaderHeight();
	        // Calculate the height of table content (Not scroll content) excluding
	        // header row height.
	        var height = this.adapter.getTableContainerHeight() - tableHeaderHeight;
	        var top = tableHeaderHeight;
	        this.adapter.setProgressIndicatorStyles({
	            height: height + "px",
	            top: top + "px",
	        });
	        this.adapter.addClass(cssClasses$r.IN_PROGRESS);
	    };
	    /**
	     * Hides progress indicator when data table is finished loading.
	     */
	    MDCDataTableFoundation.prototype.hideProgress = function () {
	        this.adapter.removeClass(cssClasses$r.IN_PROGRESS);
	    };
	    /**
	     * Updates header row checkbox state based on number of rows selected.
	     */
	    MDCDataTableFoundation.prototype.setHeaderRowCheckboxState = function () {
	        if (this.adapter.getSelectedRowCount() === 0) {
	            this.adapter.setHeaderRowCheckboxChecked(false);
	            this.adapter.setHeaderRowCheckboxIndeterminate(false);
	        }
	        else if (this.adapter.getSelectedRowCount() === this.adapter.getRowCount()) {
	            this.adapter.setHeaderRowCheckboxChecked(true);
	            this.adapter.setHeaderRowCheckboxIndeterminate(false);
	        }
	        else {
	            this.adapter.setHeaderRowCheckboxIndeterminate(true);
	            this.adapter.setHeaderRowCheckboxChecked(false);
	        }
	    };
	    /**
	     * Sets the attributes of row element based on selection state.
	     */
	    MDCDataTableFoundation.prototype.selectRowAtIndex = function (rowIndex, selected) {
	        if (selected) {
	            this.adapter.addClassAtRowIndex(rowIndex, cssClasses$r.ROW_SELECTED);
	            this.adapter.setAttributeAtRowIndex(rowIndex, strings$s.ARIA_SELECTED, 'true');
	        }
	        else {
	            this.adapter.removeClassAtRowIndex(rowIndex, cssClasses$r.ROW_SELECTED);
	            this.adapter.setAttributeAtRowIndex(rowIndex, strings$s.ARIA_SELECTED, 'false');
	        }
	    };
	    return MDCDataTableFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Implementation of `MDCDataTableFoundation`
	 */
	var MDCDataTable = /** @class */ (function (_super) {
	    __extends(MDCDataTable, _super);
	    function MDCDataTable() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCDataTable.attachTo = function (root) {
	        return new MDCDataTable(root);
	    };
	    MDCDataTable.prototype.initialize = function (checkboxFactory) {
	        if (checkboxFactory === void 0) { checkboxFactory = function (el) { return new MDCCheckbox(el); }; }
	        this.checkboxFactory = checkboxFactory;
	    };
	    MDCDataTable.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.headerRow =
	            this.root.querySelector("." + cssClasses$r.HEADER_ROW);
	        this.handleHeaderRowCheckboxChange = function () {
	            _this.foundation.handleHeaderRowCheckboxChange();
	        };
	        this.headerRow.addEventListener('change', this.handleHeaderRowCheckboxChange);
	        this.headerRowClickListener = function (event) {
	            _this.handleHeaderRowClick(event);
	        };
	        this.headerRow.addEventListener('click', this.headerRowClickListener);
	        this.content =
	            this.root.querySelector("." + cssClasses$r.CONTENT);
	        this.handleContentClick = function (event) {
	            var dataRowEl = closest(event.target, selectors$1.ROW);
	            if (!dataRowEl)
	                return;
	            _this.foundation.handleRowClick({
	                rowId: _this.getRowIdByRowElement(dataRowEl),
	                row: dataRowEl,
	            });
	        };
	        this.content.addEventListener('click', this.handleContentClick);
	        this.handleRowCheckboxChange = function (event) {
	            _this.foundation.handleRowCheckboxChange(event);
	        };
	        this.content.addEventListener('change', this.handleRowCheckboxChange);
	        this.layout();
	    };
	    /**
	     * Re-initializes header row checkbox and row checkboxes when selectable rows
	     * are added or removed from table.
	     */
	    MDCDataTable.prototype.layout = function () {
	        this.foundation.layout();
	    };
	    /**
	     * @return Returns array of header row cell elements.
	     */
	    MDCDataTable.prototype.getHeaderCells = function () {
	        return [].slice.call(this.root.querySelectorAll(selectors$1.HEADER_CELL));
	    };
	    /**
	     * @return Returns array of row elements.
	     */
	    MDCDataTable.prototype.getRows = function () {
	        return this.foundation.getRows();
	    };
	    /**
	     * @return Returns array of selected row ids.
	     */
	    MDCDataTable.prototype.getSelectedRowIds = function () {
	        return this.foundation.getSelectedRowIds();
	    };
	    /**
	     * Sets selected row ids. Overwrites previously selected rows.
	     * @param rowIds Array of row ids that needs to be selected.
	     */
	    MDCDataTable.prototype.setSelectedRowIds = function (rowIds) {
	        this.foundation.setSelectedRowIds(rowIds);
	    };
	    /**
	     * Shows progress indicator when data table is in loading state.
	     */
	    MDCDataTable.prototype.showProgress = function () {
	        this.getLinearProgress().open();
	        this.foundation.showProgress();
	    };
	    /**
	     * Hides progress indicator after data table is finished loading.
	     */
	    MDCDataTable.prototype.hideProgress = function () {
	        this.foundation.hideProgress();
	        this.getLinearProgress().close();
	    };
	    MDCDataTable.prototype.destroy = function () {
	        var e_1, _a;
	        if (this.handleHeaderRowCheckboxChange) {
	            this.headerRow.removeEventListener('change', this.handleHeaderRowCheckboxChange);
	        }
	        if (this.headerRowClickListener) {
	            this.headerRow.removeEventListener('click', this.headerRowClickListener);
	        }
	        if (this.handleRowCheckboxChange) {
	            this.content.removeEventListener('change', this.handleRowCheckboxChange);
	        }
	        if (this.headerRowCheckbox) {
	            this.headerRowCheckbox.destroy();
	        }
	        if (this.rowCheckboxList) {
	            try {
	                for (var _b = __values(this.rowCheckboxList), _c = _b.next(); !_c.done; _c = _b.next()) {
	                    var checkbox = _c.value;
	                    checkbox.destroy();
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }
	        if (this.handleContentClick) {
	            this.content.removeEventListener('click', this.handleContentClick);
	        }
	    };
	    MDCDataTable.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take
	        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
	        // methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            getHeaderCellElements: function () { return _this.getHeaderCells(); },
	            getHeaderCellCount: function () { return _this.getHeaderCells().length; },
	            getAttributeByHeaderCellIndex: function (index, attribute) {
	                return _this.getHeaderCells()[index].getAttribute(attribute);
	            },
	            setAttributeByHeaderCellIndex: function (index, attribute, value) {
	                _this.getHeaderCells()[index].setAttribute(attribute, value);
	            },
	            setClassNameByHeaderCellIndex: function (index, className) {
	                _this.getHeaderCells()[index].classList.add(className);
	            },
	            removeClassNameByHeaderCellIndex: function (index, className) {
	                _this.getHeaderCells()[index].classList.remove(className);
	            },
	            notifySortAction: function (data) {
	                _this.emit(events$4.SORTED, data, /** shouldBubble */ true);
	            },
	            getTableContainerHeight: function () {
	                var tableContainer = _this.root.querySelector("." + cssClasses$r.TABLE_CONTAINER);
	                if (!tableContainer) {
	                    throw new Error('MDCDataTable: Table container element not found.');
	                }
	                return tableContainer.getBoundingClientRect().height;
	            },
	            getTableHeaderHeight: function () {
	                var tableHeader = _this.root.querySelector(selectors$1.HEADER_ROW);
	                if (!tableHeader) {
	                    throw new Error('MDCDataTable: Table header element not found.');
	                }
	                return tableHeader.getBoundingClientRect().height;
	            },
	            setProgressIndicatorStyles: function (styles) {
	                var progressIndicator = _this.root.querySelector(selectors$1.PROGRESS_INDICATOR);
	                if (!progressIndicator) {
	                    throw new Error('MDCDataTable: Progress indicator element not found.');
	                }
	                progressIndicator.style.setProperty('height', styles.height);
	                progressIndicator.style.setProperty('top', styles.top);
	            },
	            addClassAtRowIndex: function (rowIndex, className) {
	                _this.getRows()[rowIndex].classList.add(className);
	            },
	            getRowCount: function () { return _this.getRows().length; },
	            getRowElements: function () { return [].slice.call(_this.root.querySelectorAll(selectors$1.ROW)); },
	            getRowIdAtIndex: function (rowIndex) {
	                return _this.getRows()[rowIndex].getAttribute(dataAttributes.ROW_ID);
	            },
	            getRowIndexByChildElement: function (el) {
	                return _this.getRows().indexOf(closest(el, selectors$1.ROW));
	            },
	            getSelectedRowCount: function () {
	                return _this.root.querySelectorAll(selectors$1.ROW_SELECTED).length;
	            },
	            isCheckboxAtRowIndexChecked: function (rowIndex) {
	                return _this.rowCheckboxList[rowIndex].checked;
	            },
	            isHeaderRowCheckboxChecked: function () { return _this.headerRowCheckbox.checked; },
	            isRowsSelectable: function () {
	                return !!_this.root.querySelector(selectors$1.ROW_CHECKBOX) ||
	                    !!_this.root.querySelector(selectors$1.HEADER_ROW_CHECKBOX);
	            },
	            notifyRowSelectionChanged: function (data) {
	                _this.emit(events$4.ROW_SELECTION_CHANGED, {
	                    row: _this.getRowByIndex(data.rowIndex),
	                    rowId: _this.getRowIdByIndex(data.rowIndex),
	                    rowIndex: data.rowIndex,
	                    selected: data.selected,
	                }, 
	                /** shouldBubble */ true);
	            },
	            notifySelectedAll: function () {
	                _this.emit(events$4.SELECTED_ALL, {}, /** shouldBubble */ true);
	            },
	            notifyUnselectedAll: function () {
	                _this.emit(events$4.UNSELECTED_ALL, {}, /** shouldBubble */ true);
	            },
	            notifyRowClick: function (data) {
	                _this.emit(events$4.ROW_CLICK, data, /** shouldBubble */ true);
	            },
	            registerHeaderRowCheckbox: function () {
	                if (_this.headerRowCheckbox) {
	                    _this.headerRowCheckbox.destroy();
	                }
	                var checkboxEl = _this.root.querySelector(selectors$1.HEADER_ROW_CHECKBOX);
	                _this.headerRowCheckbox = _this.checkboxFactory(checkboxEl);
	            },
	            registerRowCheckboxes: function () {
	                if (_this.rowCheckboxList) {
	                    _this.rowCheckboxList.forEach(function (checkbox) {
	                        checkbox.destroy();
	                    });
	                }
	                _this.rowCheckboxList = [];
	                _this.getRows().forEach(function (rowEl) {
	                    var checkbox = _this.checkboxFactory(rowEl.querySelector(selectors$1.ROW_CHECKBOX));
	                    _this.rowCheckboxList.push(checkbox);
	                });
	            },
	            removeClassAtRowIndex: function (rowIndex, className) {
	                _this.getRows()[rowIndex].classList.remove(className);
	            },
	            setAttributeAtRowIndex: function (rowIndex, attr, value) {
	                _this.getRows()[rowIndex].setAttribute(attr, value);
	            },
	            setHeaderRowCheckboxChecked: function (checked) {
	                _this.headerRowCheckbox.checked = checked;
	            },
	            setHeaderRowCheckboxIndeterminate: function (indeterminate) {
	                _this.headerRowCheckbox.indeterminate = indeterminate;
	            },
	            setRowCheckboxCheckedAtIndex: function (rowIndex, checked) {
	                _this.rowCheckboxList[rowIndex].checked = checked;
	            },
	            setSortStatusLabelByHeaderCellIndex: function (columnIndex, sortValue) {
	                var headerCell = _this.getHeaderCells()[columnIndex];
	                var sortStatusLabel = headerCell.querySelector(selectors$1.SORT_STATUS_LABEL);
	                if (!sortStatusLabel)
	                    return;
	                sortStatusLabel.textContent =
	                    _this.getSortStatusMessageBySortValue(sortValue);
	            },
	        };
	        return new MDCDataTableFoundation(adapter);
	    };
	    MDCDataTable.prototype.getRowByIndex = function (index) {
	        return this.getRows()[index];
	    };
	    MDCDataTable.prototype.getRowIdByIndex = function (index) {
	        return this.getRowByIndex(index).getAttribute(dataAttributes.ROW_ID);
	    };
	    MDCDataTable.prototype.handleHeaderRowClick = function (event) {
	        var headerCell = closest(event.target, selectors$1.HEADER_CELL_WITH_SORT);
	        if (!headerCell) {
	            return;
	        }
	        var columnId = headerCell.getAttribute(dataAttributes.COLUMN_ID);
	        var columnIndex = this.getHeaderCells().indexOf(headerCell);
	        if (columnIndex === -1) {
	            return;
	        }
	        this.foundation.handleSortAction({ columnId: columnId, columnIndex: columnIndex, headerCell: headerCell });
	    };
	    MDCDataTable.prototype.getSortStatusMessageBySortValue = function (sortValue) {
	        switch (sortValue) {
	            case SortValue.ASCENDING:
	                return messages.SORTED_IN_ASCENDING;
	            case SortValue.DESCENDING:
	                return messages.SORTED_IN_DESCENDING;
	            default:
	                return '';
	        }
	    };
	    MDCDataTable.prototype.getLinearProgressElement = function () {
	        var el = this.root.querySelector("." + cssClasses$r.LINEAR_PROGRESS);
	        if (!el) {
	            throw new Error('MDCDataTable: linear progress element is not found.');
	        }
	        return el;
	    };
	    MDCDataTable.prototype.getLinearProgress = function () {
	        if (!this.linearProgress) {
	            var el = this.getLinearProgressElement();
	            this.linearProgress = new MDCLinearProgress(el);
	        }
	        return this.linearProgress;
	    };
	    MDCDataTable.prototype.getRowIdByRowElement = function (rowElement) {
	        return rowElement.getAttribute(dataAttributes.ROW_ID);
	    };
	    return MDCDataTable;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	;

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$r = {
		__proto__: null,
		MDCDataTable: MDCDataTable,
		MDCDataTableFoundation: MDCDataTableFoundation,
		cssClasses: cssClasses$r,
		attributes: attributes$3,
		dataAttributes: dataAttributes,
		selectors: selectors$1,
		messages: messages,
		strings: strings$s,
		get SortValue () { return SortValue; },
		events: events$4
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	function createFocusTrapInstance$1(surfaceEl, focusTrapFactory, initialFocusEl) {
	    return focusTrapFactory(surfaceEl, { initialFocusEl: initialFocusEl });
	}
	function isScrollable(el) {
	    return el ? el.scrollHeight > el.offsetHeight : false;
	}
	/**
	 * For scrollable content, returns true if the content has not been scrolled
	 * (that is, the scroll content is as the "top"). This is used in full-screen
	 * dialogs, where the scroll divider is expected only to appear once the
	 * content has been scrolled "underneath" the header bar.
	 */
	function isScrollAtTop(el) {
	    return el ? el.scrollTop === 0 : false;
	}
	/**
	 * For scrollable content, returns true if the content has been scrolled all the
	 * way to the bottom. This is used in full-screen dialogs, where the footer
	 * scroll divider is expected only to appear when the content is "cut-off" by
	 * the footer bar.
	 */
	function isScrollAtBottom(el) {
	    return el ? Math.ceil(el.scrollHeight - el.scrollTop) === el.clientHeight :
	        false;
	}
	function areTopsMisaligned(els) {
	    var tops = new Set();
	    [].forEach.call(els, function (el) { return tops.add(el.offsetTop); });
	    return tops.size > 1;
	}

	var util$3 = {
		__proto__: null,
		createFocusTrapInstance: createFocusTrapInstance$1,
		isScrollable: isScrollable,
		isScrollAtTop: isScrollAtTop,
		isScrollAtBottom: isScrollAtBottom,
		areTopsMisaligned: areTopsMisaligned
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * AnimationFrame provides a user-friendly abstraction around requesting
	 * and canceling animation frames.
	 */
	var AnimationFrame = /** @class */ (function () {
	    function AnimationFrame() {
	        this.rafIDs = new Map();
	    }
	    /**
	     * Requests an animation frame. Cancels any existing frame with the same key.
	     * @param {string} key The key for this callback.
	     * @param {FrameRequestCallback} callback The callback to be executed.
	     */
	    AnimationFrame.prototype.request = function (key, callback) {
	        var _this = this;
	        this.cancel(key);
	        var frameID = requestAnimationFrame(function (frame) {
	            _this.rafIDs.delete(key);
	            // Callback must come *after* the key is deleted so that nested calls to
	            // request with the same key are not deleted.
	            callback(frame);
	        });
	        this.rafIDs.set(key, frameID);
	    };
	    /**
	     * Cancels a queued callback with the given key.
	     * @param {string} key The key for this callback.
	     */
	    AnimationFrame.prototype.cancel = function (key) {
	        var rafID = this.rafIDs.get(key);
	        if (rafID) {
	            cancelAnimationFrame(rafID);
	            this.rafIDs.delete(key);
	        }
	    };
	    /**
	     * Cancels all queued callback.
	     */
	    AnimationFrame.prototype.cancelAll = function () {
	        var _this = this;
	        // Need to use forEach because it's the only iteration method supported
	        // by IE11. Suppress the underscore because we don't need it.
	        // tslint:disable-next-line:enforce-name-casing
	        this.rafIDs.forEach(function (_, key) {
	            _this.cancel(key);
	        });
	    };
	    /**
	     * Returns the queue of unexecuted callback keys.
	     */
	    AnimationFrame.prototype.getQueue = function () {
	        var queue = [];
	        // Need to use forEach because it's the only iteration method supported
	        // by IE11. Suppress the underscore because we don't need it.
	        // tslint:disable-next-line:enforce-name-casing
	        this.rafIDs.forEach(function (_, key) {
	            queue.push(key);
	        });
	        return queue;
	    };
	    return AnimationFrame;
	}());

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$q = {
	    CLOSING: 'mdc-dialog--closing',
	    OPEN: 'mdc-dialog--open',
	    OPENING: 'mdc-dialog--opening',
	    SCROLLABLE: 'mdc-dialog--scrollable',
	    SCROLL_LOCK: 'mdc-dialog-scroll-lock',
	    STACKED: 'mdc-dialog--stacked',
	    FULLSCREEN: 'mdc-dialog--fullscreen',
	    // Class for showing a scroll divider on full-screen dialog header element.
	    // Should only be displayed on scrollable content, when the dialog content is
	    // scrolled "underneath" the header.
	    SCROLL_DIVIDER_HEADER: 'mdc-dialog-scroll-divider-header',
	    // Class for showing a scroll divider on a full-screen dialog footer element.
	    // Should only be displayed on scrolalble content, when the dialog content is
	    // obscured "underneath" the footer.
	    SCROLL_DIVIDER_FOOTER: 'mdc-dialog-scroll-divider-footer',
	    // The "surface scrim" is a scrim covering only the surface of a dialog. This
	    // is used in situations where a confirmation dialog is shown over an already
	    // opened full-screen dialog. On larger screen-sizes, the full-screen dialog
	    // is sized as a modal and so in these situations we display a "surface scrim"
	    // to prevent a "double scrim" (where the scrim from the secondary
	    // confirmation dialog would overlap with the scrim from the full-screen
	    // dialog).
	    SURFACE_SCRIM_SHOWN: 'mdc-dialog__surface-scrim--shown',
	    // "Showing" animating class for the surface-scrim.
	    SURFACE_SCRIM_SHOWING: 'mdc-dialog__surface-scrim--showing',
	    // "Hiding" animating class for the surface-scrim.
	    SURFACE_SCRIM_HIDING: 'mdc-dialog__surface-scrim--hiding',
	    // Class to hide a dialog's scrim (used in conjunction with a surface-scrim).
	    // Note that we only hide the original scrim rather than removing it entirely
	    // to prevent interactions with the content behind this scrim, and to capture
	    // scrim clicks.
	    SCRIM_HIDDEN: 'mdc-dialog__scrim--hidden',
	};
	var strings$r = {
	    ACTION_ATTRIBUTE: 'data-mdc-dialog-action',
	    BUTTON_DEFAULT_ATTRIBUTE: 'data-mdc-dialog-button-default',
	    BUTTON_SELECTOR: '.mdc-dialog__button',
	    CLOSED_EVENT: 'MDCDialog:closed',
	    CLOSE_ACTION: 'close',
	    CLOSING_EVENT: 'MDCDialog:closing',
	    CONTAINER_SELECTOR: '.mdc-dialog__container',
	    CONTENT_SELECTOR: '.mdc-dialog__content',
	    DESTROY_ACTION: 'destroy',
	    INITIAL_FOCUS_ATTRIBUTE: 'data-mdc-dialog-initial-focus',
	    OPENED_EVENT: 'MDCDialog:opened',
	    OPENING_EVENT: 'MDCDialog:opening',
	    SCRIM_SELECTOR: '.mdc-dialog__scrim',
	    SUPPRESS_DEFAULT_PRESS_SELECTOR: [
	        'textarea',
	        '.mdc-menu .mdc-list-item',
	        '.mdc-menu .mdc-deprecated-list-item',
	    ].join(', '),
	    SURFACE_SELECTOR: '.mdc-dialog__surface',
	};
	var numbers$b = {
	    DIALOG_ANIMATION_CLOSE_TIME_MS: 75,
	    DIALOG_ANIMATION_OPEN_TIME_MS: 150,
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var AnimationKeys$2;
	(function (AnimationKeys) {
	    AnimationKeys["POLL_SCROLL_POS"] = "poll_scroll_position";
	    AnimationKeys["POLL_LAYOUT_CHANGE"] = "poll_layout_change";
	})(AnimationKeys$2 || (AnimationKeys$2 = {}));
	var MDCDialogFoundation = /** @class */ (function (_super) {
	    __extends(MDCDialogFoundation, _super);
	    function MDCDialogFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCDialogFoundation.defaultAdapter), adapter)) || this;
	        _this.dialogOpen = false;
	        _this.isFullscreen = false;
	        _this.animationFrame = 0;
	        _this.animationTimer = 0;
	        _this.escapeKeyAction = strings$r.CLOSE_ACTION;
	        _this.scrimClickAction = strings$r.CLOSE_ACTION;
	        _this.autoStackButtons = true;
	        _this.areButtonsStacked = false;
	        _this.suppressDefaultPressSelector = strings$r.SUPPRESS_DEFAULT_PRESS_SELECTOR;
	        _this.animFrame = new AnimationFrame();
	        _this.contentScrollHandler = function () {
	            _this.handleScrollEvent();
	        };
	        _this.windowResizeHandler = function () {
	            _this.layout();
	        };
	        _this.windowOrientationChangeHandler = function () {
	            _this.layout();
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCDialogFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$q;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCDialogFoundation, "strings", {
	        get: function () {
	            return strings$r;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCDialogFoundation, "numbers", {
	        get: function () {
	            return numbers$b;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCDialogFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addBodyClass: function () { return undefined; },
	                addClass: function () { return undefined; },
	                areButtonsStacked: function () { return false; },
	                clickDefaultButton: function () { return undefined; },
	                eventTargetMatches: function () { return false; },
	                getActionFromEvent: function () { return ''; },
	                getInitialFocusEl: function () { return null; },
	                hasClass: function () { return false; },
	                isContentScrollable: function () { return false; },
	                notifyClosed: function () { return undefined; },
	                notifyClosing: function () { return undefined; },
	                notifyOpened: function () { return undefined; },
	                notifyOpening: function () { return undefined; },
	                releaseFocus: function () { return undefined; },
	                removeBodyClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                reverseButtons: function () { return undefined; },
	                trapFocus: function () { return undefined; },
	                registerContentEventHandler: function () { return undefined; },
	                deregisterContentEventHandler: function () { return undefined; },
	                isScrollableContentAtTop: function () { return false; },
	                isScrollableContentAtBottom: function () { return false; },
	                registerWindowEventHandler: function () { return undefined; },
	                deregisterWindowEventHandler: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCDialogFoundation.prototype.init = function () {
	        if (this.adapter.hasClass(cssClasses$q.STACKED)) {
	            this.setAutoStackButtons(false);
	        }
	        this.isFullscreen = this.adapter.hasClass(cssClasses$q.FULLSCREEN);
	    };
	    MDCDialogFoundation.prototype.destroy = function () {
	        if (this.animationTimer) {
	            clearTimeout(this.animationTimer);
	            this.handleAnimationTimerEnd();
	        }
	        if (this.isFullscreen) {
	            this.adapter.deregisterContentEventHandler('scroll', this.contentScrollHandler);
	        }
	        this.animFrame.cancelAll();
	        this.adapter.deregisterWindowEventHandler('resize', this.windowResizeHandler);
	        this.adapter.deregisterWindowEventHandler('orientationchange', this.windowOrientationChangeHandler);
	    };
	    MDCDialogFoundation.prototype.open = function (dialogOptions) {
	        var _this = this;
	        this.dialogOpen = true;
	        this.adapter.notifyOpening();
	        this.adapter.addClass(cssClasses$q.OPENING);
	        if (this.isFullscreen) {
	            // A scroll event listener is registered even if the dialog is not
	            // scrollable on open, since the window resize event, or orientation
	            // change may make the dialog scrollable after it is opened.
	            this.adapter.registerContentEventHandler('scroll', this.contentScrollHandler);
	        }
	        if (dialogOptions && dialogOptions.isAboveFullscreenDialog) {
	            this.adapter.addClass(cssClasses$q.SCRIM_HIDDEN);
	        }
	        this.adapter.registerWindowEventHandler('resize', this.windowResizeHandler);
	        this.adapter.registerWindowEventHandler('orientationchange', this.windowOrientationChangeHandler);
	        // Wait a frame once display is no longer "none", to establish basis for
	        // animation
	        this.runNextAnimationFrame(function () {
	            _this.adapter.addClass(cssClasses$q.OPEN);
	            _this.adapter.addBodyClass(cssClasses$q.SCROLL_LOCK);
	            _this.layout();
	            _this.animationTimer = setTimeout(function () {
	                _this.handleAnimationTimerEnd();
	                _this.adapter.trapFocus(_this.adapter.getInitialFocusEl());
	                _this.adapter.notifyOpened();
	            }, numbers$b.DIALOG_ANIMATION_OPEN_TIME_MS);
	        });
	    };
	    MDCDialogFoundation.prototype.close = function (action) {
	        var _this = this;
	        if (action === void 0) { action = ''; }
	        if (!this.dialogOpen) {
	            // Avoid redundant close calls (and events), e.g. from keydown on elements
	            // that inherently emit click
	            return;
	        }
	        this.dialogOpen = false;
	        this.adapter.notifyClosing(action);
	        this.adapter.addClass(cssClasses$q.CLOSING);
	        this.adapter.removeClass(cssClasses$q.OPEN);
	        this.adapter.removeBodyClass(cssClasses$q.SCROLL_LOCK);
	        if (this.isFullscreen) {
	            this.adapter.deregisterContentEventHandler('scroll', this.contentScrollHandler);
	        }
	        this.adapter.deregisterWindowEventHandler('resize', this.windowResizeHandler);
	        this.adapter.deregisterWindowEventHandler('orientationchange', this.windowOrientationChangeHandler);
	        cancelAnimationFrame(this.animationFrame);
	        this.animationFrame = 0;
	        clearTimeout(this.animationTimer);
	        this.animationTimer = setTimeout(function () {
	            _this.adapter.releaseFocus();
	            _this.handleAnimationTimerEnd();
	            _this.adapter.notifyClosed(action);
	        }, numbers$b.DIALOG_ANIMATION_CLOSE_TIME_MS);
	    };
	    /**
	     * Used only in instances of showing a secondary dialog over a full-screen
	     * dialog. Shows the "surface scrim" displayed over the full-screen dialog.
	     */
	    MDCDialogFoundation.prototype.showSurfaceScrim = function () {
	        var _this = this;
	        this.adapter.addClass(cssClasses$q.SURFACE_SCRIM_SHOWING);
	        this.runNextAnimationFrame(function () {
	            _this.adapter.addClass(cssClasses$q.SURFACE_SCRIM_SHOWN);
	        });
	    };
	    /**
	     * Used only in instances of showing a secondary dialog over a full-screen
	     * dialog. Hides the "surface scrim" displayed over the full-screen dialog.
	     */
	    MDCDialogFoundation.prototype.hideSurfaceScrim = function () {
	        this.adapter.removeClass(cssClasses$q.SURFACE_SCRIM_SHOWN);
	        this.adapter.addClass(cssClasses$q.SURFACE_SCRIM_HIDING);
	    };
	    /**
	     * Handles `transitionend` event triggered when surface scrim animation is
	     * finished.
	     */
	    MDCDialogFoundation.prototype.handleSurfaceScrimTransitionEnd = function () {
	        this.adapter.removeClass(cssClasses$q.SURFACE_SCRIM_HIDING);
	        this.adapter.removeClass(cssClasses$q.SURFACE_SCRIM_SHOWING);
	    };
	    MDCDialogFoundation.prototype.isOpen = function () {
	        return this.dialogOpen;
	    };
	    MDCDialogFoundation.prototype.getEscapeKeyAction = function () {
	        return this.escapeKeyAction;
	    };
	    MDCDialogFoundation.prototype.setEscapeKeyAction = function (action) {
	        this.escapeKeyAction = action;
	    };
	    MDCDialogFoundation.prototype.getScrimClickAction = function () {
	        return this.scrimClickAction;
	    };
	    MDCDialogFoundation.prototype.setScrimClickAction = function (action) {
	        this.scrimClickAction = action;
	    };
	    MDCDialogFoundation.prototype.getAutoStackButtons = function () {
	        return this.autoStackButtons;
	    };
	    MDCDialogFoundation.prototype.setAutoStackButtons = function (autoStack) {
	        this.autoStackButtons = autoStack;
	    };
	    MDCDialogFoundation.prototype.getSuppressDefaultPressSelector = function () {
	        return this.suppressDefaultPressSelector;
	    };
	    MDCDialogFoundation.prototype.setSuppressDefaultPressSelector = function (selector) {
	        this.suppressDefaultPressSelector = selector;
	    };
	    MDCDialogFoundation.prototype.layout = function () {
	        var _this = this;
	        this.animFrame.request(AnimationKeys$2.POLL_LAYOUT_CHANGE, function () {
	            _this.layoutInternal();
	        });
	    };
	    /** Handles click on the dialog root element. */
	    MDCDialogFoundation.prototype.handleClick = function (evt) {
	        var isScrim = this.adapter.eventTargetMatches(evt.target, strings$r.SCRIM_SELECTOR);
	        // Check for scrim click first since it doesn't require querying ancestors.
	        if (isScrim && this.scrimClickAction !== '') {
	            this.close(this.scrimClickAction);
	        }
	        else {
	            var action = this.adapter.getActionFromEvent(evt);
	            if (action) {
	                this.close(action);
	            }
	        }
	    };
	    /** Handles keydown on the dialog root element. */
	    MDCDialogFoundation.prototype.handleKeydown = function (evt) {
	        var isEnter = evt.key === 'Enter' || evt.keyCode === 13;
	        if (!isEnter) {
	            return;
	        }
	        var action = this.adapter.getActionFromEvent(evt);
	        if (action) {
	            // Action button callback is handled in `handleClick`,
	            // since space/enter keydowns on buttons trigger click events.
	            return;
	        }
	        // `composedPath` is used here, when available, to account for use cases
	        // where a target meant to suppress the default press behaviour
	        // may exist in a shadow root.
	        // For example, a textarea inside a web component:
	        // <mwc-dialog>
	        //   <horizontal-layout>
	        //     #shadow-root (open)
	        //       <mwc-textarea>
	        //         #shadow-root (open)
	        //           <textarea></textarea>
	        //       </mwc-textarea>
	        //   </horizontal-layout>
	        // </mwc-dialog>
	        var target = evt.composedPath ? evt.composedPath()[0] : evt.target;
	        var isDefault = this.suppressDefaultPressSelector ?
	            !this.adapter.eventTargetMatches(target, this.suppressDefaultPressSelector) :
	            true;
	        if (isEnter && isDefault) {
	            this.adapter.clickDefaultButton();
	        }
	    };
	    /** Handles keydown on the document. */
	    MDCDialogFoundation.prototype.handleDocumentKeydown = function (evt) {
	        var isEscape = evt.key === 'Escape' || evt.keyCode === 27;
	        if (isEscape && this.escapeKeyAction !== '') {
	            this.close(this.escapeKeyAction);
	        }
	    };
	    /**
	     * Handles scroll event on the dialog's content element -- showing a scroll
	     * divider on the header or footer based on the scroll position. This handler
	     * should only be registered on full-screen dialogs with scrollable content.
	     */
	    MDCDialogFoundation.prototype.handleScrollEvent = function () {
	        var _this = this;
	        // Since scroll events can fire at a high rate, we throttle these events by
	        // using requestAnimationFrame.
	        this.animFrame.request(AnimationKeys$2.POLL_SCROLL_POS, function () {
	            _this.toggleScrollDividerHeader();
	            _this.toggleScrollDividerFooter();
	        });
	    };
	    MDCDialogFoundation.prototype.layoutInternal = function () {
	        if (this.autoStackButtons) {
	            this.detectStackedButtons();
	        }
	        this.toggleScrollableClasses();
	    };
	    MDCDialogFoundation.prototype.handleAnimationTimerEnd = function () {
	        this.animationTimer = 0;
	        this.adapter.removeClass(cssClasses$q.OPENING);
	        this.adapter.removeClass(cssClasses$q.CLOSING);
	    };
	    /**
	     * Runs the given logic on the next animation frame, using setTimeout to
	     * factor in Firefox reflow behavior.
	     */
	    MDCDialogFoundation.prototype.runNextAnimationFrame = function (callback) {
	        var _this = this;
	        cancelAnimationFrame(this.animationFrame);
	        this.animationFrame = requestAnimationFrame(function () {
	            _this.animationFrame = 0;
	            clearTimeout(_this.animationTimer);
	            _this.animationTimer = setTimeout(callback, 0);
	        });
	    };
	    MDCDialogFoundation.prototype.detectStackedButtons = function () {
	        // Remove the class first to let us measure the buttons' natural positions.
	        this.adapter.removeClass(cssClasses$q.STACKED);
	        var areButtonsStacked = this.adapter.areButtonsStacked();
	        if (areButtonsStacked) {
	            this.adapter.addClass(cssClasses$q.STACKED);
	        }
	        if (areButtonsStacked !== this.areButtonsStacked) {
	            this.adapter.reverseButtons();
	            this.areButtonsStacked = areButtonsStacked;
	        }
	    };
	    MDCDialogFoundation.prototype.toggleScrollableClasses = function () {
	        // Remove the class first to let us measure the natural height of the
	        // content.
	        this.adapter.removeClass(cssClasses$q.SCROLLABLE);
	        if (this.adapter.isContentScrollable()) {
	            this.adapter.addClass(cssClasses$q.SCROLLABLE);
	            if (this.isFullscreen) {
	                // If dialog is full-screen and scrollable, check if a scroll divider
	                // should be shown.
	                this.toggleScrollDividerHeader();
	                this.toggleScrollDividerFooter();
	            }
	        }
	    };
	    MDCDialogFoundation.prototype.toggleScrollDividerHeader = function () {
	        if (!this.adapter.isScrollableContentAtTop()) {
	            this.adapter.addClass(cssClasses$q.SCROLL_DIVIDER_HEADER);
	        }
	        else if (this.adapter.hasClass(cssClasses$q.SCROLL_DIVIDER_HEADER)) {
	            this.adapter.removeClass(cssClasses$q.SCROLL_DIVIDER_HEADER);
	        }
	    };
	    MDCDialogFoundation.prototype.toggleScrollDividerFooter = function () {
	        if (!this.adapter.isScrollableContentAtBottom()) {
	            this.adapter.addClass(cssClasses$q.SCROLL_DIVIDER_FOOTER);
	        }
	        else if (this.adapter.hasClass(cssClasses$q.SCROLL_DIVIDER_FOOTER)) {
	            this.adapter.removeClass(cssClasses$q.SCROLL_DIVIDER_FOOTER);
	        }
	    };
	    return MDCDialogFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$q = MDCDialogFoundation.strings;
	var MDCDialog = /** @class */ (function (_super) {
	    __extends(MDCDialog, _super);
	    function MDCDialog() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(MDCDialog.prototype, "isOpen", {
	        get: function () {
	            return this.foundation.isOpen();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCDialog.prototype, "escapeKeyAction", {
	        get: function () {
	            return this.foundation.getEscapeKeyAction();
	        },
	        set: function (action) {
	            this.foundation.setEscapeKeyAction(action);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCDialog.prototype, "scrimClickAction", {
	        get: function () {
	            return this.foundation.getScrimClickAction();
	        },
	        set: function (action) {
	            this.foundation.setScrimClickAction(action);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCDialog.prototype, "autoStackButtons", {
	        get: function () {
	            return this.foundation.getAutoStackButtons();
	        },
	        set: function (autoStack) {
	            this.foundation.setAutoStackButtons(autoStack);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCDialog.attachTo = function (root) {
	        return new MDCDialog(root);
	    };
	    MDCDialog.prototype.initialize = function (focusTrapFactory) {
	        var e_1, _a;
	        if (focusTrapFactory === void 0) { focusTrapFactory = function (el, focusOptions) {
	            return new FocusTrap(el, focusOptions);
	        }; }
	        var container = this.root.querySelector(strings$q.CONTAINER_SELECTOR);
	        if (!container) {
	            throw new Error("Dialog component requires a " + strings$q.CONTAINER_SELECTOR + " container element");
	        }
	        this.container = container;
	        this.content =
	            this.root.querySelector(strings$q.CONTENT_SELECTOR);
	        this.buttons = [].slice.call(this.root.querySelectorAll(strings$q.BUTTON_SELECTOR));
	        this.defaultButton = this.root.querySelector("[" + strings$q.BUTTON_DEFAULT_ATTRIBUTE + "]");
	        this.focusTrapFactory = focusTrapFactory;
	        this.buttonRipples = [];
	        try {
	            for (var _b = __values(this.buttons), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var buttonEl = _c.value;
	                this.buttonRipples.push(new MDCRipple(buttonEl));
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    MDCDialog.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.focusTrap = createFocusTrapInstance$1(this.container, this.focusTrapFactory, this.getInitialFocusEl() || undefined);
	        this.handleClick = this.foundation.handleClick.bind(this.foundation);
	        this.handleKeydown = this.foundation.handleKeydown.bind(this.foundation);
	        this.handleDocumentKeydown =
	            this.foundation.handleDocumentKeydown.bind(this.foundation);
	        // this.handleLayout = this.layout.bind(this);
	        this.handleOpening = function () {
	            document.addEventListener('keydown', _this.handleDocumentKeydown);
	        };
	        this.handleClosing = function () {
	            document.removeEventListener('keydown', _this.handleDocumentKeydown);
	        };
	        this.listen('click', this.handleClick);
	        this.listen('keydown', this.handleKeydown);
	        this.listen(strings$q.OPENING_EVENT, this.handleOpening);
	        this.listen(strings$q.CLOSING_EVENT, this.handleClosing);
	    };
	    MDCDialog.prototype.destroy = function () {
	        this.unlisten('click', this.handleClick);
	        this.unlisten('keydown', this.handleKeydown);
	        this.unlisten(strings$q.OPENING_EVENT, this.handleOpening);
	        this.unlisten(strings$q.CLOSING_EVENT, this.handleClosing);
	        this.handleClosing();
	        this.buttonRipples.forEach(function (ripple) {
	            ripple.destroy();
	        });
	        _super.prototype.destroy.call(this);
	    };
	    MDCDialog.prototype.layout = function () {
	        this.foundation.layout();
	    };
	    MDCDialog.prototype.open = function () {
	        this.foundation.open();
	    };
	    MDCDialog.prototype.close = function (action) {
	        if (action === void 0) { action = ''; }
	        this.foundation.close(action);
	    };
	    MDCDialog.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            addBodyClass: function (className) { return document.body.classList.add(className); },
	            addClass: function (className) { return _this.root.classList.add(className); },
	            areButtonsStacked: function () { return areTopsMisaligned(_this.buttons); },
	            clickDefaultButton: function () {
	                if (_this.defaultButton && !_this.defaultButton.disabled) {
	                    _this.defaultButton.click();
	                }
	            },
	            eventTargetMatches: function (target, selector) {
	                return target ? matches$2(target, selector) : false;
	            },
	            getActionFromEvent: function (evt) {
	                if (!evt.target) {
	                    return '';
	                }
	                var element = closest(evt.target, "[" + strings$q.ACTION_ATTRIBUTE + "]");
	                return element && element.getAttribute(strings$q.ACTION_ATTRIBUTE);
	            },
	            getInitialFocusEl: function () { return _this.getInitialFocusEl(); },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            isContentScrollable: function () { return isScrollable(_this.content); },
	            notifyClosed: function (action) { return _this.emit(strings$q.CLOSED_EVENT, action ? { action: action } : {}); },
	            notifyClosing: function (action) { return _this.emit(strings$q.CLOSING_EVENT, action ? { action: action } : {}); },
	            notifyOpened: function () { return _this.emit(strings$q.OPENED_EVENT, {}); },
	            notifyOpening: function () { return _this.emit(strings$q.OPENING_EVENT, {}); },
	            releaseFocus: function () {
	                _this.focusTrap.releaseFocus();
	            },
	            removeBodyClass: function (className) { return document.body.classList.remove(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            reverseButtons: function () {
	                _this.buttons.reverse();
	                _this.buttons.forEach(function (button) {
	                    button.parentElement.appendChild(button);
	                });
	            },
	            trapFocus: function () {
	                _this.focusTrap.trapFocus();
	            },
	            registerContentEventHandler: function (evt, handler) {
	                if (_this.content instanceof HTMLElement) {
	                    _this.content.addEventListener(evt, handler);
	                }
	            },
	            deregisterContentEventHandler: function (evt, handler) {
	                if (_this.content instanceof HTMLElement) {
	                    _this.content.removeEventListener(evt, handler);
	                }
	            },
	            isScrollableContentAtTop: function () {
	                return isScrollAtTop(_this.content);
	            },
	            isScrollableContentAtBottom: function () {
	                return isScrollAtBottom(_this.content);
	            },
	            registerWindowEventHandler: function (evt, handler) {
	                window.addEventListener(evt, handler);
	            },
	            deregisterWindowEventHandler: function (evt, handler) {
	                window.removeEventListener(evt, handler);
	            },
	        };
	        return new MDCDialogFoundation(adapter);
	    };
	    MDCDialog.prototype.getInitialFocusEl = function () {
	        return this.root.querySelector("[" + strings$q.INITIAL_FOCUS_ATTRIBUTE + "]");
	    };
	    return MDCDialog;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$q = {
		__proto__: null,
		util: util$3,
		MDCDialog: MDCDialog,
		cssClasses: cssClasses$q,
		strings: strings$r,
		numbers: numbers$b,
		MDCDialogFoundation: MDCDialogFoundation
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$p = {
		__proto__: null,
		events: events$5,
		focusTrap: focusTrap,
		keyboard: keyboard,
		ponyfill: ponyfill
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	function createFocusTrapInstance(surfaceEl, focusTrapFactory) {
	    return focusTrapFactory(surfaceEl, {
	        // Component handles focusing on active nav item.
	        skipInitialFocus: true,
	    });
	}

	var util$2 = {
		__proto__: null,
		createFocusTrapInstance: createFocusTrapInstance
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var _a, _b;
	var cssClasses$p = {
	    LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated',
	    LIST_ITEM_CLASS: 'mdc-list-item',
	    LIST_ITEM_DISABLED_CLASS: 'mdc-list-item--disabled',
	    LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',
	    LIST_ITEM_TEXT_CLASS: 'mdc-list-item__text',
	    LIST_ITEM_PRIMARY_TEXT_CLASS: 'mdc-list-item__primary-text',
	    ROOT: 'mdc-list',
	};
	var evolutionClassNameMap = (_a = {},
	    _a["" + cssClasses$p.LIST_ITEM_ACTIVATED_CLASS] = 'mdc-list-item--activated',
	    _a["" + cssClasses$p.LIST_ITEM_CLASS] = 'mdc-list-item',
	    _a["" + cssClasses$p.LIST_ITEM_DISABLED_CLASS] = 'mdc-list-item--disabled',
	    _a["" + cssClasses$p.LIST_ITEM_SELECTED_CLASS] = 'mdc-list-item--selected',
	    _a["" + cssClasses$p.LIST_ITEM_PRIMARY_TEXT_CLASS] = 'mdc-list-item__primary-text',
	    _a["" + cssClasses$p.ROOT] = 'mdc-list',
	    _a);
	var deprecatedClassNameMap = (_b = {},
	    _b["" + cssClasses$p.LIST_ITEM_ACTIVATED_CLASS] = 'mdc-deprecated-list-item--activated',
	    _b["" + cssClasses$p.LIST_ITEM_CLASS] = 'mdc-deprecated-list-item',
	    _b["" + cssClasses$p.LIST_ITEM_DISABLED_CLASS] = 'mdc-deprecated-list-item--disabled',
	    _b["" + cssClasses$p.LIST_ITEM_SELECTED_CLASS] = 'mdc-deprecated-list-item--selected',
	    _b["" + cssClasses$p.LIST_ITEM_TEXT_CLASS] = 'mdc-deprecated-list-item__text',
	    _b["" + cssClasses$p.LIST_ITEM_PRIMARY_TEXT_CLASS] = 'mdc-deprecated-list-item__primary-text',
	    _b["" + cssClasses$p.ROOT] = 'mdc-deprecated-list',
	    _b);
	var strings$p = {
	    ACTION_EVENT: 'MDCList:action',
	    ARIA_CHECKED: 'aria-checked',
	    ARIA_CHECKED_CHECKBOX_SELECTOR: '[role="checkbox"][aria-checked="true"]',
	    ARIA_CHECKED_RADIO_SELECTOR: '[role="radio"][aria-checked="true"]',
	    ARIA_CURRENT: 'aria-current',
	    ARIA_DISABLED: 'aria-disabled',
	    ARIA_ORIENTATION: 'aria-orientation',
	    ARIA_ORIENTATION_HORIZONTAL: 'horizontal',
	    ARIA_ROLE_CHECKBOX_SELECTOR: '[role="checkbox"]',
	    ARIA_SELECTED: 'aria-selected',
	    ARIA_INTERACTIVE_ROLES_SELECTOR: '[role="listbox"], [role="menu"]',
	    ARIA_MULTI_SELECTABLE_SELECTOR: '[aria-multiselectable="true"]',
	    CHECKBOX_RADIO_SELECTOR: 'input[type="checkbox"], input[type="radio"]',
	    CHECKBOX_SELECTOR: 'input[type="checkbox"]',
	    CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: "\n    ." + cssClasses$p.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$p.LIST_ITEM_CLASS + " a,\n    ." + deprecatedClassNameMap[cssClasses$p.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$p.LIST_ITEM_CLASS] + " a\n  ",
	    DEPRECATED_SELECTOR: '.mdc-deprecated-list',
	    FOCUSABLE_CHILD_ELEMENTS: "\n    ." + cssClasses$p.LIST_ITEM_CLASS + " button:not(:disabled),\n    ." + cssClasses$p.LIST_ITEM_CLASS + " a,\n    ." + cssClasses$p.LIST_ITEM_CLASS + " input[type=\"radio\"]:not(:disabled),\n    ." + cssClasses$p.LIST_ITEM_CLASS + " input[type=\"checkbox\"]:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$p.LIST_ITEM_CLASS] + " button:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$p.LIST_ITEM_CLASS] + " a,\n    ." + deprecatedClassNameMap[cssClasses$p.LIST_ITEM_CLASS] + " input[type=\"radio\"]:not(:disabled),\n    ." + deprecatedClassNameMap[cssClasses$p.LIST_ITEM_CLASS] + " input[type=\"checkbox\"]:not(:disabled)\n  ",
	    RADIO_SELECTOR: 'input[type="radio"]',
	    SELECTED_ITEM_SELECTOR: '[aria-selected="true"], [aria-current="true"]',
	};
	var numbers$a = {
	    UNSET_INDEX: -1,
	    TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS: 300
	};
	var evolutionAttribute = 'evolution';

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];
	/**
	 * Ensures that preventDefault is only called if the containing element
	 * doesn't consume the event, and it will cause an unintended scroll.
	 *
	 * @param evt keyboard event to be prevented.
	 */
	var preventDefaultEvent = function (evt) {
	    var target = evt.target;
	    if (!target) {
	        return;
	    }
	    var tagName = ("" + target.tagName).toLowerCase();
	    if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {
	        evt.preventDefault();
	    }
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Initializes a state object for typeahead. Use the same reference for calls to
	 * typeahead functions.
	 *
	 * @return The current state of the typeahead process. Each state reference
	 *     represents a typeahead instance as the reference is typically mutated
	 *     in-place.
	 */
	function initState() {
	    var state = {
	        bufferClearTimeout: 0,
	        currentFirstChar: '',
	        sortedIndexCursor: 0,
	        typeaheadBuffer: '',
	    };
	    return state;
	}
	/**
	 * Initializes typeahead state by indexing the current list items by primary
	 * text into the sortedIndexByFirstChar data structure.
	 *
	 * @param listItemCount numer of items in the list
	 * @param getPrimaryTextByItemIndex function that returns the primary text at a
	 *     given index
	 *
	 * @return Map that maps the first character of the primary text to the full
	 *     list text and it's index
	 */
	function initSortedIndex(listItemCount, getPrimaryTextByItemIndex) {
	    var sortedIndexByFirstChar = new Map();
	    // Aggregate item text to index mapping
	    for (var i = 0; i < listItemCount; i++) {
	        var primaryText = getPrimaryTextByItemIndex(i).trim();
	        if (!primaryText) {
	            continue;
	        }
	        var firstChar = primaryText[0].toLowerCase();
	        if (!sortedIndexByFirstChar.has(firstChar)) {
	            sortedIndexByFirstChar.set(firstChar, []);
	        }
	        sortedIndexByFirstChar.get(firstChar).push({ text: primaryText.toLowerCase(), index: i });
	    }
	    // Sort the mapping
	    // TODO(b/157162694): Investigate replacing forEach with Map.values()
	    sortedIndexByFirstChar.forEach(function (values) {
	        values.sort(function (first, second) {
	            return first.index - second.index;
	        });
	    });
	    return sortedIndexByFirstChar;
	}
	/**
	 * Given the next desired character from the user, it attempts to find the next
	 * list option matching the buffer. Wraps around if at the end of options.
	 *
	 * @param opts Options and accessors
	 *   - nextChar - the next character to match against items
	 *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`
	 *   - focusedItemIndex - the index of the currently focused item
	 *   - focusItemAtIndex - function that focuses a list item at given index
	 *   - skipFocus - whether or not to focus the matched item
	 *   - isItemAtIndexDisabled - function that determines whether an item at a
	 *        given index is disabled
	 * @param state The typeahead state instance. See `initState`.
	 *
	 * @return The index of the matched item, or -1 if no match.
	 */
	function matchItem(opts, state) {
	    var nextChar = opts.nextChar, focusItemAtIndex = opts.focusItemAtIndex, sortedIndexByFirstChar = opts.sortedIndexByFirstChar, focusedItemIndex = opts.focusedItemIndex, skipFocus = opts.skipFocus, isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
	    clearTimeout(state.bufferClearTimeout);
	    state.bufferClearTimeout = setTimeout(function () {
	        clearBuffer(state);
	    }, numbers$a.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);
	    state.typeaheadBuffer = state.typeaheadBuffer + nextChar;
	    var index;
	    if (state.typeaheadBuffer.length === 1) {
	        index = matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state);
	    }
	    else {
	        index = matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state);
	    }
	    if (index !== -1 && !skipFocus) {
	        focusItemAtIndex(index);
	    }
	    return index;
	}
	/**
	 * Matches the user's single input character in the buffer to the
	 * next option that begins with such character. Wraps around if at
	 * end of options. Returns -1 if no match is found.
	 */
	function matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state) {
	    var firstChar = state.typeaheadBuffer[0];
	    var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
	    if (!itemsMatchingFirstChar) {
	        return -1;
	    }
	    // Has the same firstChar been recently matched?
	    // Also, did starting index remain the same between key presses?
	    // If both hold true, simply increment index.
	    if (firstChar === state.currentFirstChar &&
	        itemsMatchingFirstChar[state.sortedIndexCursor].index ===
	            focusedItemIndex) {
	        state.sortedIndexCursor =
	            (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
	        var newIndex = itemsMatchingFirstChar[state.sortedIndexCursor].index;
	        if (!isItemAtIndexDisabled(newIndex)) {
	            return newIndex;
	        }
	    }
	    // If we're here, it means one of the following happened:
	    // - either firstChar or startingIndex has changed, invalidating the
	    // cursor.
	    // - The next item of typeahead is disabled, so we have to look further.
	    state.currentFirstChar = firstChar;
	    var newCursorPosition = -1;
	    var cursorPosition;
	    // Find the first non-disabled item as a fallback.
	    for (cursorPosition = 0; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {
	        if (!isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
	            newCursorPosition = cursorPosition;
	            break;
	        }
	    }
	    // Advance cursor to first item matching the firstChar that is positioned
	    // after starting item. Cursor is unchanged from fallback if there's no
	    // such item.
	    for (; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {
	        if (itemsMatchingFirstChar[cursorPosition].index > focusedItemIndex &&
	            !isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {
	            newCursorPosition = cursorPosition;
	            break;
	        }
	    }
	    if (newCursorPosition !== -1) {
	        state.sortedIndexCursor = newCursorPosition;
	        return itemsMatchingFirstChar[state.sortedIndexCursor].index;
	    }
	    return -1;
	}
	/**
	 * Attempts to find the next item that matches all of the typeahead buffer.
	 * Wraps around if at end of options. Returns -1 if no match is found.
	 */
	function matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state) {
	    var firstChar = state.typeaheadBuffer[0];
	    var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);
	    if (!itemsMatchingFirstChar) {
	        return -1;
	    }
	    // Do nothing if text already matches
	    var startingItem = itemsMatchingFirstChar[state.sortedIndexCursor];
	    if (startingItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0 &&
	        !isItemAtIndexDisabled(startingItem.index)) {
	        return startingItem.index;
	    }
	    // Find next item that matches completely; if no match, we'll eventually
	    // loop around to same position
	    var cursorPosition = (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;
	    var nextCursorPosition = -1;
	    while (cursorPosition !== state.sortedIndexCursor) {
	        var currentItem = itemsMatchingFirstChar[cursorPosition];
	        var matches = currentItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0;
	        var isEnabled = !isItemAtIndexDisabled(currentItem.index);
	        if (matches && isEnabled) {
	            nextCursorPosition = cursorPosition;
	            break;
	        }
	        cursorPosition = (cursorPosition + 1) % itemsMatchingFirstChar.length;
	    }
	    if (nextCursorPosition !== -1) {
	        state.sortedIndexCursor = nextCursorPosition;
	        return itemsMatchingFirstChar[state.sortedIndexCursor].index;
	    }
	    return -1;
	}
	/**
	 * Whether or not the given typeahead instaance state is currently typing.
	 *
	 * @param state The typeahead state instance. See `initState`.
	 */
	function isTypingInProgress(state) {
	    return state.typeaheadBuffer.length > 0;
	}
	/**
	 * Clears the typeahaed buffer so that it resets item matching to the first
	 * character.
	 *
	 * @param state The typeahead state instance. See `initState`.
	 */
	function clearBuffer(state) {
	    state.typeaheadBuffer = '';
	}
	/**
	 * Given a keydown event, it calculates whether or not to automatically focus a
	 * list item depending on what was typed mimicing the typeahead functionality of
	 * a standard <select> element that is open.
	 *
	 * @param opts Options and accessors
	 *   - event - the KeyboardEvent to handle and parse
	 *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`
	 *   - focusedItemIndex - the index of the currently focused item
	 *   - focusItemAtIndex - function that focuses a list item at given index
	 *   - isItemAtFocusedIndexDisabled - whether or not the currently focused item
	 *      is disabled
	 *   - isTargetListItem - whether or not the event target is a list item
	 * @param state The typeahead state instance. See `initState`.
	 *
	 * @returns index of the item matched by the keydown. -1 if not matched.
	 */
	function handleKeydown(opts, state) {
	    var event = opts.event, isTargetListItem = opts.isTargetListItem, focusedItemIndex = opts.focusedItemIndex, focusItemAtIndex = opts.focusItemAtIndex, sortedIndexByFirstChar = opts.sortedIndexByFirstChar, isItemAtIndexDisabled = opts.isItemAtIndexDisabled;
	    var isArrowLeft = normalizeKey(event) === 'ArrowLeft';
	    var isArrowUp = normalizeKey(event) === 'ArrowUp';
	    var isArrowRight = normalizeKey(event) === 'ArrowRight';
	    var isArrowDown = normalizeKey(event) === 'ArrowDown';
	    var isHome = normalizeKey(event) === 'Home';
	    var isEnd = normalizeKey(event) === 'End';
	    var isEnter = normalizeKey(event) === 'Enter';
	    var isSpace = normalizeKey(event) === 'Spacebar';
	    if (event.ctrlKey || event.metaKey || isArrowLeft || isArrowUp ||
	        isArrowRight || isArrowDown || isHome || isEnd || isEnter) {
	        return -1;
	    }
	    var isCharacterKey = !isSpace && event.key.length === 1;
	    if (isCharacterKey) {
	        preventDefaultEvent(event);
	        var matchItemOpts = {
	            focusItemAtIndex: focusItemAtIndex,
	            focusedItemIndex: focusedItemIndex,
	            nextChar: event.key.toLowerCase(),
	            sortedIndexByFirstChar: sortedIndexByFirstChar,
	            skipFocus: false,
	            isItemAtIndexDisabled: isItemAtIndexDisabled,
	        };
	        return matchItem(matchItemOpts, state);
	    }
	    if (!isSpace) {
	        return -1;
	    }
	    if (isTargetListItem) {
	        preventDefaultEvent(event);
	    }
	    var typeaheadOnListItem = isTargetListItem && isTypingInProgress(state);
	    if (typeaheadOnListItem) {
	        var matchItemOpts = {
	            focusItemAtIndex: focusItemAtIndex,
	            focusedItemIndex: focusedItemIndex,
	            nextChar: ' ',
	            sortedIndexByFirstChar: sortedIndexByFirstChar,
	            skipFocus: false,
	            isItemAtIndexDisabled: isItemAtIndexDisabled,
	        };
	        // space participates in typeahead matching if in rapid typing mode
	        return matchItem(matchItemOpts, state);
	    }
	    return -1;
	}

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	function isNumberArray(selectedIndex) {
	    return selectedIndex instanceof Array;
	}
	var MDCListFoundation = /** @class */ (function (_super) {
	    __extends(MDCListFoundation, _super);
	    function MDCListFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCListFoundation.defaultAdapter), adapter)) || this;
	        _this.wrapFocus = false;
	        _this.isVertical = true;
	        _this.isSingleSelectionList = false;
	        _this.selectedIndex = numbers$a.UNSET_INDEX;
	        _this.focusedItemIndex = numbers$a.UNSET_INDEX;
	        _this.useActivatedClass = false;
	        _this.useSelectedAttr = false;
	        _this.ariaCurrentAttrValue = null;
	        _this.isCheckboxList = false;
	        _this.isRadioList = false;
	        _this.hasTypeahead = false;
	        // Transiently holds current typeahead prefix from user.
	        _this.typeaheadState = initState();
	        _this.sortedIndexByFirstChar = new Map();
	        return _this;
	    }
	    Object.defineProperty(MDCListFoundation, "strings", {
	        get: function () {
	            return strings$p;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCListFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$p;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCListFoundation, "numbers", {
	        get: function () {
	            return numbers$a;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCListFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClassForElementIndex: function () { return undefined; },
	                focusItemAtIndex: function () { return undefined; },
	                getAttributeForElementIndex: function () { return null; },
	                getFocusedElementIndex: function () { return 0; },
	                getListItemCount: function () { return 0; },
	                hasCheckboxAtIndex: function () { return false; },
	                hasRadioAtIndex: function () { return false; },
	                isCheckboxCheckedAtIndex: function () { return false; },
	                isFocusInsideList: function () { return false; },
	                isRootFocused: function () { return false; },
	                listItemAtIndexHasClass: function () { return false; },
	                notifyAction: function () { return undefined; },
	                removeClassForElementIndex: function () { return undefined; },
	                setAttributeForElementIndex: function () { return undefined; },
	                setCheckedCheckboxOrRadioAtIndex: function () { return undefined; },
	                setTabIndexForListItemChildren: function () { return undefined; },
	                getPrimaryTextAtIndex: function () { return ''; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCListFoundation.prototype.layout = function () {
	        if (this.adapter.getListItemCount() === 0) {
	            return;
	        }
	        // TODO(b/172274142): consider all items when determining the list's type.
	        if (this.adapter.hasCheckboxAtIndex(0)) {
	            this.isCheckboxList = true;
	        }
	        else if (this.adapter.hasRadioAtIndex(0)) {
	            this.isRadioList = true;
	        }
	        else {
	            this.maybeInitializeSingleSelection();
	        }
	        if (this.hasTypeahead) {
	            this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
	        }
	    };
	    /** Returns the index of the item that was last focused. */
	    MDCListFoundation.prototype.getFocusedItemIndex = function () {
	        return this.focusedItemIndex;
	    };
	    /** Toggles focus wrapping with keyboard navigation. */
	    MDCListFoundation.prototype.setWrapFocus = function (value) {
	        this.wrapFocus = value;
	    };
	    /**
	     * Toggles orientation direction for keyboard navigation (true for vertical,
	     * false for horizontal).
	     */
	    MDCListFoundation.prototype.setVerticalOrientation = function (value) {
	        this.isVertical = value;
	    };
	    /** Toggles single-selection behavior. */
	    MDCListFoundation.prototype.setSingleSelection = function (value) {
	        this.isSingleSelectionList = value;
	        if (value) {
	            this.maybeInitializeSingleSelection();
	            this.selectedIndex = this.getSelectedIndexFromDOM();
	        }
	    };
	    /**
	     * Automatically determines whether the list is single selection list. If so,
	     * initializes the internal state to match the selected item.
	     */
	    MDCListFoundation.prototype.maybeInitializeSingleSelection = function () {
	        var selectedItemIndex = this.getSelectedIndexFromDOM();
	        if (selectedItemIndex === numbers$a.UNSET_INDEX)
	            return;
	        var hasActivatedClass = this.adapter.listItemAtIndexHasClass(selectedItemIndex, cssClasses$p.LIST_ITEM_ACTIVATED_CLASS);
	        if (hasActivatedClass) {
	            this.setUseActivatedClass(true);
	        }
	        this.isSingleSelectionList = true;
	        this.selectedIndex = selectedItemIndex;
	    };
	    /** @return Index of the first selected item based on the DOM state. */
	    MDCListFoundation.prototype.getSelectedIndexFromDOM = function () {
	        var selectedIndex = numbers$a.UNSET_INDEX;
	        var listItemsCount = this.adapter.getListItemCount();
	        for (var i = 0; i < listItemsCount; i++) {
	            var hasSelectedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses$p.LIST_ITEM_SELECTED_CLASS);
	            var hasActivatedClass = this.adapter.listItemAtIndexHasClass(i, cssClasses$p.LIST_ITEM_ACTIVATED_CLASS);
	            if (!(hasSelectedClass || hasActivatedClass)) {
	                continue;
	            }
	            selectedIndex = i;
	            break;
	        }
	        return selectedIndex;
	    };
	    /**
	     * Sets whether typeahead is enabled on the list.
	     * @param hasTypeahead Whether typeahead is enabled.
	     */
	    MDCListFoundation.prototype.setHasTypeahead = function (hasTypeahead) {
	        this.hasTypeahead = hasTypeahead;
	        if (hasTypeahead) {
	            this.sortedIndexByFirstChar = this.typeaheadInitSortedIndex();
	        }
	    };
	    /**
	     * @return Whether typeahead is currently matching a user-specified prefix.
	     */
	    MDCListFoundation.prototype.isTypeaheadInProgress = function () {
	        return this.hasTypeahead &&
	            isTypingInProgress(this.typeaheadState);
	    };
	    /** Toggle use of the "activated" CSS class. */
	    MDCListFoundation.prototype.setUseActivatedClass = function (useActivated) {
	        this.useActivatedClass = useActivated;
	    };
	    /**
	     * Toggles use of the selected attribute (true for aria-selected, false for
	     * aria-checked).
	     */
	    MDCListFoundation.prototype.setUseSelectedAttribute = function (useSelected) {
	        this.useSelectedAttr = useSelected;
	    };
	    MDCListFoundation.prototype.getSelectedIndex = function () {
	        return this.selectedIndex;
	    };
	    MDCListFoundation.prototype.setSelectedIndex = function (index, _a) {
	        var _b = _a === void 0 ? {} : _a, forceUpdate = _b.forceUpdate;
	        if (!this.isIndexValid(index)) {
	            return;
	        }
	        if (this.isCheckboxList) {
	            this.setCheckboxAtIndex(index);
	        }
	        else if (this.isRadioList) {
	            this.setRadioAtIndex(index);
	        }
	        else {
	            this.setSingleSelectionAtIndex(index, { forceUpdate: forceUpdate });
	        }
	    };
	    /**
	     * Focus in handler for the list items.
	     */
	    MDCListFoundation.prototype.handleFocusIn = function (listItemIndex) {
	        if (listItemIndex >= 0) {
	            this.focusedItemIndex = listItemIndex;
	            this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '0');
	            this.adapter.setTabIndexForListItemChildren(listItemIndex, '0');
	        }
	    };
	    /**
	     * Focus out handler for the list items.
	     */
	    MDCListFoundation.prototype.handleFocusOut = function (listItemIndex) {
	        var _this = this;
	        if (listItemIndex >= 0) {
	            this.adapter.setAttributeForElementIndex(listItemIndex, 'tabindex', '-1');
	            this.adapter.setTabIndexForListItemChildren(listItemIndex, '-1');
	        }
	        /**
	         * Between Focusout & Focusin some browsers do not have focus on any
	         * element. Setting a delay to wait till the focus is moved to next element.
	         */
	        setTimeout(function () {
	            if (!_this.adapter.isFocusInsideList()) {
	                _this.setTabindexToFirstSelectedOrFocusedItem();
	            }
	        }, 0);
	    };
	    /**
	     * Key handler for the list.
	     */
	    MDCListFoundation.prototype.handleKeydown = function (event, isRootListItem, listItemIndex) {
	        var _this = this;
	        var isArrowLeft = normalizeKey(event) === 'ArrowLeft';
	        var isArrowUp = normalizeKey(event) === 'ArrowUp';
	        var isArrowRight = normalizeKey(event) === 'ArrowRight';
	        var isArrowDown = normalizeKey(event) === 'ArrowDown';
	        var isHome = normalizeKey(event) === 'Home';
	        var isEnd = normalizeKey(event) === 'End';
	        var isEnter = normalizeKey(event) === 'Enter';
	        var isSpace = normalizeKey(event) === 'Spacebar';
	        // Have to check both upper and lower case, because having caps lock on
	        // affects the value.
	        var isLetterA = event.key === 'A' || event.key === 'a';
	        if (this.adapter.isRootFocused()) {
	            if (isArrowUp || isEnd) {
	                event.preventDefault();
	                this.focusLastElement();
	            }
	            else if (isArrowDown || isHome) {
	                event.preventDefault();
	                this.focusFirstElement();
	            }
	            if (this.hasTypeahead) {
	                var handleKeydownOpts = {
	                    event: event,
	                    focusItemAtIndex: function (index) {
	                        _this.focusItemAtIndex(index);
	                    },
	                    focusedItemIndex: -1,
	                    isTargetListItem: isRootListItem,
	                    sortedIndexByFirstChar: this.sortedIndexByFirstChar,
	                    isItemAtIndexDisabled: function (index) {
	                        return _this.adapter.listItemAtIndexHasClass(index, cssClasses$p.LIST_ITEM_DISABLED_CLASS);
	                    },
	                };
	                handleKeydown(handleKeydownOpts, this.typeaheadState);
	            }
	            return;
	        }
	        var currentIndex = this.adapter.getFocusedElementIndex();
	        if (currentIndex === -1) {
	            currentIndex = listItemIndex;
	            if (currentIndex < 0) {
	                // If this event doesn't have a mdc-list-item ancestor from the
	                // current list (not from a sublist), return early.
	                return;
	            }
	        }
	        if ((this.isVertical && isArrowDown) ||
	            (!this.isVertical && isArrowRight)) {
	            preventDefaultEvent(event);
	            this.focusNextElement(currentIndex);
	        }
	        else if ((this.isVertical && isArrowUp) || (!this.isVertical && isArrowLeft)) {
	            preventDefaultEvent(event);
	            this.focusPrevElement(currentIndex);
	        }
	        else if (isHome) {
	            preventDefaultEvent(event);
	            this.focusFirstElement();
	        }
	        else if (isEnd) {
	            preventDefaultEvent(event);
	            this.focusLastElement();
	        }
	        else if (isLetterA && event.ctrlKey && this.isCheckboxList) {
	            event.preventDefault();
	            this.toggleAll(this.selectedIndex === numbers$a.UNSET_INDEX ?
	                [] :
	                this.selectedIndex);
	        }
	        else if (isEnter || isSpace) {
	            if (isRootListItem) {
	                // Return early if enter key is pressed on anchor element which triggers
	                // synthetic MouseEvent event.
	                var target = event.target;
	                if (target && target.tagName === 'A' && isEnter) {
	                    return;
	                }
	                preventDefaultEvent(event);
	                if (this.adapter.listItemAtIndexHasClass(currentIndex, cssClasses$p.LIST_ITEM_DISABLED_CLASS)) {
	                    return;
	                }
	                if (!this.isTypeaheadInProgress()) {
	                    if (this.isSelectableList()) {
	                        this.setSelectedIndexOnAction(currentIndex);
	                    }
	                    this.adapter.notifyAction(currentIndex);
	                }
	            }
	        }
	        if (this.hasTypeahead) {
	            var handleKeydownOpts = {
	                event: event,
	                focusItemAtIndex: function (index) {
	                    _this.focusItemAtIndex(index);
	                },
	                focusedItemIndex: this.focusedItemIndex,
	                isTargetListItem: isRootListItem,
	                sortedIndexByFirstChar: this.sortedIndexByFirstChar,
	                isItemAtIndexDisabled: function (index) { return _this.adapter.listItemAtIndexHasClass(index, cssClasses$p.LIST_ITEM_DISABLED_CLASS); },
	            };
	            handleKeydown(handleKeydownOpts, this.typeaheadState);
	        }
	    };
	    /**
	     * Click handler for the list.
	     */
	    MDCListFoundation.prototype.handleClick = function (index, toggleCheckbox) {
	        if (index === numbers$a.UNSET_INDEX) {
	            return;
	        }
	        if (this.adapter.listItemAtIndexHasClass(index, cssClasses$p.LIST_ITEM_DISABLED_CLASS)) {
	            return;
	        }
	        if (this.isSelectableList()) {
	            this.setSelectedIndexOnAction(index, toggleCheckbox);
	        }
	        this.adapter.notifyAction(index);
	    };
	    /**
	     * Focuses the next element on the list.
	     */
	    MDCListFoundation.prototype.focusNextElement = function (index) {
	        var count = this.adapter.getListItemCount();
	        var nextIndex = index + 1;
	        if (nextIndex >= count) {
	            if (this.wrapFocus) {
	                nextIndex = 0;
	            }
	            else {
	                // Return early because last item is already focused.
	                return index;
	            }
	        }
	        this.focusItemAtIndex(nextIndex);
	        return nextIndex;
	    };
	    /**
	     * Focuses the previous element on the list.
	     */
	    MDCListFoundation.prototype.focusPrevElement = function (index) {
	        var prevIndex = index - 1;
	        if (prevIndex < 0) {
	            if (this.wrapFocus) {
	                prevIndex = this.adapter.getListItemCount() - 1;
	            }
	            else {
	                // Return early because first item is already focused.
	                return index;
	            }
	        }
	        this.focusItemAtIndex(prevIndex);
	        return prevIndex;
	    };
	    MDCListFoundation.prototype.focusFirstElement = function () {
	        this.focusItemAtIndex(0);
	        return 0;
	    };
	    MDCListFoundation.prototype.focusLastElement = function () {
	        var lastIndex = this.adapter.getListItemCount() - 1;
	        this.focusItemAtIndex(lastIndex);
	        return lastIndex;
	    };
	    MDCListFoundation.prototype.focusInitialElement = function () {
	        var initialIndex = this.getFirstSelectedOrFocusedItemIndex();
	        this.focusItemAtIndex(initialIndex);
	        return initialIndex;
	    };
	    /**
	     * @param itemIndex Index of the list item
	     * @param isEnabled Sets the list item to enabled or disabled.
	     */
	    MDCListFoundation.prototype.setEnabled = function (itemIndex, isEnabled) {
	        if (!this.isIndexValid(itemIndex)) {
	            return;
	        }
	        if (isEnabled) {
	            this.adapter.removeClassForElementIndex(itemIndex, cssClasses$p.LIST_ITEM_DISABLED_CLASS);
	            this.adapter.setAttributeForElementIndex(itemIndex, strings$p.ARIA_DISABLED, 'false');
	        }
	        else {
	            this.adapter.addClassForElementIndex(itemIndex, cssClasses$p.LIST_ITEM_DISABLED_CLASS);
	            this.adapter.setAttributeForElementIndex(itemIndex, strings$p.ARIA_DISABLED, 'true');
	        }
	    };
	    MDCListFoundation.prototype.setSingleSelectionAtIndex = function (index, _a) {
	        var _b = _a === void 0 ? {} : _a, forceUpdate = _b.forceUpdate;
	        if (this.selectedIndex === index && !forceUpdate) {
	            return;
	        }
	        var selectedClassName = cssClasses$p.LIST_ITEM_SELECTED_CLASS;
	        if (this.useActivatedClass) {
	            selectedClassName = cssClasses$p.LIST_ITEM_ACTIVATED_CLASS;
	        }
	        if (this.selectedIndex !== numbers$a.UNSET_INDEX) {
	            this.adapter.removeClassForElementIndex(this.selectedIndex, selectedClassName);
	        }
	        this.setAriaForSingleSelectionAtIndex(index);
	        this.setTabindexAtIndex(index);
	        if (index !== numbers$a.UNSET_INDEX) {
	            this.adapter.addClassForElementIndex(index, selectedClassName);
	        }
	        this.selectedIndex = index;
	    };
	    /**
	     * Sets aria attribute for single selection at given index.
	     */
	    MDCListFoundation.prototype.setAriaForSingleSelectionAtIndex = function (index) {
	        // Detect the presence of aria-current and get the value only during list
	        // initialization when it is in unset state.
	        if (this.selectedIndex === numbers$a.UNSET_INDEX) {
	            this.ariaCurrentAttrValue =
	                this.adapter.getAttributeForElementIndex(index, strings$p.ARIA_CURRENT);
	        }
	        var isAriaCurrent = this.ariaCurrentAttrValue !== null;
	        var ariaAttribute = isAriaCurrent ? strings$p.ARIA_CURRENT : strings$p.ARIA_SELECTED;
	        if (this.selectedIndex !== numbers$a.UNSET_INDEX) {
	            this.adapter.setAttributeForElementIndex(this.selectedIndex, ariaAttribute, 'false');
	        }
	        if (index !== numbers$a.UNSET_INDEX) {
	            var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue : 'true';
	            this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);
	        }
	    };
	    /**
	     * Returns the attribute to use for indicating selection status.
	     */
	    MDCListFoundation.prototype.getSelectionAttribute = function () {
	        return this.useSelectedAttr ? strings$p.ARIA_SELECTED : strings$p.ARIA_CHECKED;
	    };
	    /**
	     * Toggles radio at give index. Radio doesn't change the checked state if it
	     * is already checked.
	     */
	    MDCListFoundation.prototype.setRadioAtIndex = function (index) {
	        var selectionAttribute = this.getSelectionAttribute();
	        this.adapter.setCheckedCheckboxOrRadioAtIndex(index, true);
	        if (this.selectedIndex !== numbers$a.UNSET_INDEX) {
	            this.adapter.setAttributeForElementIndex(this.selectedIndex, selectionAttribute, 'false');
	        }
	        this.adapter.setAttributeForElementIndex(index, selectionAttribute, 'true');
	        this.selectedIndex = index;
	    };
	    MDCListFoundation.prototype.setCheckboxAtIndex = function (index) {
	        var selectionAttribute = this.getSelectionAttribute();
	        for (var i = 0; i < this.adapter.getListItemCount(); i++) {
	            var isChecked = false;
	            if (index.indexOf(i) >= 0) {
	                isChecked = true;
	            }
	            this.adapter.setCheckedCheckboxOrRadioAtIndex(i, isChecked);
	            this.adapter.setAttributeForElementIndex(i, selectionAttribute, isChecked ? 'true' : 'false');
	        }
	        this.selectedIndex = index;
	    };
	    MDCListFoundation.prototype.setTabindexAtIndex = function (index) {
	        if (this.focusedItemIndex === numbers$a.UNSET_INDEX && index !== 0) {
	            // If some list item was selected set first list item's tabindex to -1.
	            // Generally, tabindex is set to 0 on first list item of list that has no
	            // preselected items.
	            this.adapter.setAttributeForElementIndex(0, 'tabindex', '-1');
	        }
	        else if (this.focusedItemIndex >= 0 && this.focusedItemIndex !== index) {
	            this.adapter.setAttributeForElementIndex(this.focusedItemIndex, 'tabindex', '-1');
	        }
	        // Set the previous selection's tabindex to -1. We need this because
	        // in selection menus that are not visible, programmatically setting an
	        // option will not change focus but will change where tabindex should be 0.
	        if (!(this.selectedIndex instanceof Array) &&
	            this.selectedIndex !== index) {
	            this.adapter.setAttributeForElementIndex(this.selectedIndex, 'tabindex', '-1');
	        }
	        if (index !== numbers$a.UNSET_INDEX) {
	            this.adapter.setAttributeForElementIndex(index, 'tabindex', '0');
	        }
	    };
	    /**
	     * @return Return true if it is single selectin list, checkbox list or radio
	     *     list.
	     */
	    MDCListFoundation.prototype.isSelectableList = function () {
	        return this.isSingleSelectionList || this.isCheckboxList ||
	            this.isRadioList;
	    };
	    MDCListFoundation.prototype.setTabindexToFirstSelectedOrFocusedItem = function () {
	        var targetIndex = this.getFirstSelectedOrFocusedItemIndex();
	        this.setTabindexAtIndex(targetIndex);
	    };
	    MDCListFoundation.prototype.getFirstSelectedOrFocusedItemIndex = function () {
	        // Action lists retain focus on the most recently focused item.
	        if (!this.isSelectableList()) {
	            return Math.max(this.focusedItemIndex, 0);
	        }
	        // Single-selection lists focus the selected item.
	        if (typeof this.selectedIndex === 'number' &&
	            this.selectedIndex !== numbers$a.UNSET_INDEX) {
	            return this.selectedIndex;
	        }
	        // Multiple-selection lists focus the first selected item.
	        if (isNumberArray(this.selectedIndex) && this.selectedIndex.length > 0) {
	            return this.selectedIndex.reduce(function (minIndex, currentIndex) { return Math.min(minIndex, currentIndex); });
	        }
	        // Selection lists without a selection focus the first item.
	        return 0;
	    };
	    MDCListFoundation.prototype.isIndexValid = function (index) {
	        var _this = this;
	        if (index instanceof Array) {
	            if (!this.isCheckboxList) {
	                throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');
	            }
	            if (index.length === 0) {
	                return true;
	            }
	            else {
	                return index.some(function (i) { return _this.isIndexInRange(i); });
	            }
	        }
	        else if (typeof index === 'number') {
	            if (this.isCheckboxList) {
	                throw new Error("MDCListFoundation: Expected array of index for checkbox based list but got number: " + index);
	            }
	            return this.isIndexInRange(index) ||
	                this.isSingleSelectionList && index === numbers$a.UNSET_INDEX;
	        }
	        else {
	            return false;
	        }
	    };
	    MDCListFoundation.prototype.isIndexInRange = function (index) {
	        var listSize = this.adapter.getListItemCount();
	        return index >= 0 && index < listSize;
	    };
	    /**
	     * Sets selected index on user action, toggles checkbox / radio based on
	     * toggleCheckbox value. User interaction should not toggle list item(s) when
	     * disabled.
	     */
	    MDCListFoundation.prototype.setSelectedIndexOnAction = function (index, toggleCheckbox) {
	        if (toggleCheckbox === void 0) { toggleCheckbox = true; }
	        if (this.isCheckboxList) {
	            this.toggleCheckboxAtIndex(index, toggleCheckbox);
	        }
	        else {
	            this.setSelectedIndex(index);
	        }
	    };
	    MDCListFoundation.prototype.toggleCheckboxAtIndex = function (index, toggleCheckbox) {
	        var selectionAttribute = this.getSelectionAttribute();
	        var isChecked = this.adapter.isCheckboxCheckedAtIndex(index);
	        if (toggleCheckbox) {
	            isChecked = !isChecked;
	            this.adapter.setCheckedCheckboxOrRadioAtIndex(index, isChecked);
	        }
	        this.adapter.setAttributeForElementIndex(index, selectionAttribute, isChecked ? 'true' : 'false');
	        // If none of the checkbox items are selected and selectedIndex is not
	        // initialized then provide a default value.
	        var selectedIndexes = this.selectedIndex === numbers$a.UNSET_INDEX ?
	            [] :
	            this.selectedIndex.slice();
	        if (isChecked) {
	            selectedIndexes.push(index);
	        }
	        else {
	            selectedIndexes = selectedIndexes.filter(function (i) { return i !== index; });
	        }
	        this.selectedIndex = selectedIndexes;
	    };
	    MDCListFoundation.prototype.focusItemAtIndex = function (index) {
	        this.adapter.focusItemAtIndex(index);
	        this.focusedItemIndex = index;
	    };
	    MDCListFoundation.prototype.toggleAll = function (currentlySelectedIndexes) {
	        var count = this.adapter.getListItemCount();
	        // If all items are selected, deselect everything.
	        if (currentlySelectedIndexes.length === count) {
	            this.setCheckboxAtIndex([]);
	        }
	        else {
	            // Otherwise select all enabled options.
	            var allIndexes = [];
	            for (var i = 0; i < count; i++) {
	                if (!this.adapter.listItemAtIndexHasClass(i, cssClasses$p.LIST_ITEM_DISABLED_CLASS) ||
	                    currentlySelectedIndexes.indexOf(i) > -1) {
	                    allIndexes.push(i);
	                }
	            }
	            this.setCheckboxAtIndex(allIndexes);
	        }
	    };
	    /**
	     * Given the next desired character from the user, adds it to the typeahead
	     * buffer. Then, attempts to find the next option matching the buffer. Wraps
	     * around if at the end of options.
	     *
	     * @param nextChar The next character to add to the prefix buffer.
	     * @param startingIndex The index from which to start matching. Only relevant
	     *     when starting a new match sequence. To start a new match sequence,
	     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer
	     *     to clear after a set interval defined in list foundation. Defaults to
	     *     the currently focused index.
	     * @return The index of the matched item, or -1 if no match.
	     */
	    MDCListFoundation.prototype.typeaheadMatchItem = function (nextChar, startingIndex, skipFocus) {
	        var _this = this;
	        if (skipFocus === void 0) { skipFocus = false; }
	        var opts = {
	            focusItemAtIndex: function (index) {
	                _this.focusItemAtIndex(index);
	            },
	            focusedItemIndex: startingIndex ? startingIndex : this.focusedItemIndex,
	            nextChar: nextChar,
	            sortedIndexByFirstChar: this.sortedIndexByFirstChar,
	            skipFocus: skipFocus,
	            isItemAtIndexDisabled: function (index) { return _this.adapter.listItemAtIndexHasClass(index, cssClasses$p.LIST_ITEM_DISABLED_CLASS); }
	        };
	        return matchItem(opts, this.typeaheadState);
	    };
	    /**
	     * Initializes the MDCListTextAndIndex data structure by indexing the current
	     * list items by primary text.
	     *
	     * @return The primary texts of all the list items sorted by first character.
	     */
	    MDCListFoundation.prototype.typeaheadInitSortedIndex = function () {
	        return initSortedIndex(this.adapter.getListItemCount(), this.adapter.getPrimaryTextAtIndex);
	    };
	    /**
	     * Clears the typeahead buffer.
	     */
	    MDCListFoundation.prototype.clearTypeaheadBuffer = function () {
	        clearBuffer(this.typeaheadState);
	    };
	    return MDCListFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCList = /** @class */ (function (_super) {
	    __extends(MDCList, _super);
	    function MDCList() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(MDCList.prototype, "vertical", {
	        set: function (value) {
	            this.foundation.setVerticalOrientation(value);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCList.prototype, "listElements", {
	        get: function () {
	            return Array.from(this.root.querySelectorAll("." + this.classNameMap[cssClasses$p.LIST_ITEM_CLASS]));
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCList.prototype, "wrapFocus", {
	        set: function (value) {
	            this.foundation.setWrapFocus(value);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCList.prototype, "typeaheadInProgress", {
	        /**
	         * @return Whether typeahead is currently matching a user-specified prefix.
	         */
	        get: function () {
	            return this.foundation.isTypeaheadInProgress();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCList.prototype, "hasTypeahead", {
	        /**
	         * Sets whether typeahead functionality is enabled on the list.
	         * @param hasTypeahead Whether typeahead is enabled.
	         */
	        set: function (hasTypeahead) {
	            this.foundation.setHasTypeahead(hasTypeahead);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCList.prototype, "singleSelection", {
	        set: function (isSingleSelectionList) {
	            this.foundation.setSingleSelection(isSingleSelectionList);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCList.prototype, "selectedIndex", {
	        get: function () {
	            return this.foundation.getSelectedIndex();
	        },
	        set: function (index) {
	            this.foundation.setSelectedIndex(index);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCList.attachTo = function (root) {
	        return new MDCList(root);
	    };
	    MDCList.prototype.initialSyncWithDOM = function () {
	        this.isEvolutionEnabled =
	            evolutionAttribute in this.root.dataset;
	        if (this.isEvolutionEnabled) {
	            this.classNameMap = evolutionClassNameMap;
	        }
	        else if (matches$2(this.root, strings$p.DEPRECATED_SELECTOR)) {
	            this.classNameMap = deprecatedClassNameMap;
	        }
	        else {
	            this.classNameMap =
	                Object.values(cssClasses$p)
	                    .reduce(function (obj, className) {
	                    obj[className] = className;
	                    return obj;
	                }, {});
	        }
	        this.handleClick = this.handleClickEvent.bind(this);
	        this.handleKeydown = this.handleKeydownEvent.bind(this);
	        this.focusInEventListener = this.handleFocusInEvent.bind(this);
	        this.focusOutEventListener = this.handleFocusOutEvent.bind(this);
	        this.listen('keydown', this.handleKeydown);
	        this.listen('click', this.handleClick);
	        this.listen('focusin', this.focusInEventListener);
	        this.listen('focusout', this.focusOutEventListener);
	        this.layout();
	        this.initializeListType();
	        this.ensureFocusable();
	    };
	    MDCList.prototype.destroy = function () {
	        this.unlisten('keydown', this.handleKeydown);
	        this.unlisten('click', this.handleClick);
	        this.unlisten('focusin', this.focusInEventListener);
	        this.unlisten('focusout', this.focusOutEventListener);
	    };
	    MDCList.prototype.layout = function () {
	        var direction = this.root.getAttribute(strings$p.ARIA_ORIENTATION);
	        this.vertical = direction !== strings$p.ARIA_ORIENTATION_HORIZONTAL;
	        var itemSelector = "." + this.classNameMap[cssClasses$p.LIST_ITEM_CLASS] + ":not([tabindex])";
	        var childSelector = strings$p.FOCUSABLE_CHILD_ELEMENTS;
	        // List items need to have at least tabindex=-1 to be focusable.
	        var itemEls = this.root.querySelectorAll(itemSelector);
	        if (itemEls.length) {
	            Array.prototype.forEach.call(itemEls, function (el) {
	                el.setAttribute('tabindex', '-1');
	            });
	        }
	        // Child button/a elements are not tabbable until the list item is focused.
	        var focusableChildEls = this.root.querySelectorAll(childSelector);
	        if (focusableChildEls.length) {
	            Array.prototype.forEach.call(focusableChildEls, function (el) {
	                el.setAttribute('tabindex', '-1');
	            });
	        }
	        if (this.isEvolutionEnabled) {
	            this.foundation.setUseSelectedAttribute(true);
	        }
	        this.foundation.layout();
	    };
	    /**
	     * Extracts the primary text from a list item.
	     * @param item The list item element.
	     * @return The primary text in the element.
	     */
	    MDCList.prototype.getPrimaryText = function (item) {
	        var _a;
	        var primaryText = item.querySelector("." + this.classNameMap[cssClasses$p.LIST_ITEM_PRIMARY_TEXT_CLASS]);
	        if (this.isEvolutionEnabled || primaryText) {
	            return (_a = primaryText === null || primaryText === void 0 ? void 0 : primaryText.textContent) !== null && _a !== void 0 ? _a : '';
	        }
	        var singleLineText = item.querySelector("." + this.classNameMap[cssClasses$p.LIST_ITEM_TEXT_CLASS]);
	        return (singleLineText && singleLineText.textContent) || '';
	    };
	    /**
	     * Initialize selectedIndex value based on pre-selected list items.
	     */
	    MDCList.prototype.initializeListType = function () {
	        var _this = this;
	        this.isInteractive =
	            matches$2(this.root, strings$p.ARIA_INTERACTIVE_ROLES_SELECTOR);
	        if (this.isEvolutionEnabled && this.isInteractive) {
	            var selection = Array.from(this.root.querySelectorAll(strings$p.SELECTED_ITEM_SELECTOR), function (listItem) { return _this.listElements.indexOf(listItem); });
	            if (matches$2(this.root, strings$p.ARIA_MULTI_SELECTABLE_SELECTOR)) {
	                this.selectedIndex = selection;
	            }
	            else if (selection.length > 0) {
	                this.selectedIndex = selection[0];
	            }
	            return;
	        }
	        var checkboxListItems = this.root.querySelectorAll(strings$p.ARIA_ROLE_CHECKBOX_SELECTOR);
	        var radioSelectedListItem = this.root.querySelector(strings$p.ARIA_CHECKED_RADIO_SELECTOR);
	        if (checkboxListItems.length) {
	            var preselectedItems = this.root.querySelectorAll(strings$p.ARIA_CHECKED_CHECKBOX_SELECTOR);
	            this.selectedIndex = Array.from(preselectedItems, function (listItem) { return _this.listElements.indexOf(listItem); });
	        }
	        else if (radioSelectedListItem) {
	            this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);
	        }
	    };
	    /**
	     * Updates the list item at itemIndex to the desired isEnabled state.
	     * @param itemIndex Index of the list item
	     * @param isEnabled Sets the list item to enabled or disabled.
	     */
	    MDCList.prototype.setEnabled = function (itemIndex, isEnabled) {
	        this.foundation.setEnabled(itemIndex, isEnabled);
	    };
	    /**
	     * Given the next desired character from the user, adds it to the typeahead
	     * buffer. Then, attempts to find the next option matching the buffer. Wraps
	     * around if at the end of options.
	     *
	     * @param nextChar The next character to add to the prefix buffer.
	     * @param startingIndex The index from which to start matching. Defaults to
	     *     the currently focused index.
	     * @return The index of the matched item.
	     */
	    MDCList.prototype.typeaheadMatchItem = function (nextChar, startingIndex) {
	        return this.foundation.typeaheadMatchItem(nextChar, startingIndex, /** skipFocus */ true);
	    };
	    MDCList.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take
	        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
	        // methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            addClassForElementIndex: function (index, className) {
	                var element = _this.listElements[index];
	                if (element) {
	                    element.classList.add(_this.classNameMap[className]);
	                }
	            },
	            focusItemAtIndex: function (index) {
	                var element = _this.listElements[index];
	                if (element) {
	                    element.focus();
	                }
	            },
	            getAttributeForElementIndex: function (index, attr) {
	                return _this.listElements[index].getAttribute(attr);
	            },
	            getFocusedElementIndex: function () {
	                return _this.listElements.indexOf(document.activeElement);
	            },
	            getListItemCount: function () { return _this.listElements.length; },
	            getPrimaryTextAtIndex: function (index) {
	                return _this.getPrimaryText(_this.listElements[index]);
	            },
	            hasCheckboxAtIndex: function (index) {
	                var listItem = _this.listElements[index];
	                return !!listItem.querySelector(strings$p.CHECKBOX_SELECTOR);
	            },
	            hasRadioAtIndex: function (index) {
	                var listItem = _this.listElements[index];
	                return !!listItem.querySelector(strings$p.RADIO_SELECTOR);
	            },
	            isCheckboxCheckedAtIndex: function (index) {
	                var listItem = _this.listElements[index];
	                var toggleEl = listItem.querySelector(strings$p.CHECKBOX_SELECTOR);
	                return toggleEl.checked;
	            },
	            isFocusInsideList: function () {
	                return _this.root !== document.activeElement &&
	                    _this.root.contains(document.activeElement);
	            },
	            isRootFocused: function () { return document.activeElement === _this.root; },
	            listItemAtIndexHasClass: function (index, className) {
	                return _this.listElements[index].classList.contains(_this.classNameMap[className]);
	            },
	            notifyAction: function (index) {
	                _this.emit(strings$p.ACTION_EVENT, { index: index }, /** shouldBubble */ true);
	            },
	            removeClassForElementIndex: function (index, className) {
	                var element = _this.listElements[index];
	                if (element) {
	                    element.classList.remove(_this.classNameMap[className]);
	                }
	            },
	            setAttributeForElementIndex: function (index, attr, value) {
	                var element = _this.listElements[index];
	                if (element) {
	                    element.setAttribute(attr, value);
	                }
	            },
	            setCheckedCheckboxOrRadioAtIndex: function (index, isChecked) {
	                var listItem = _this.listElements[index];
	                var toggleEl = listItem.querySelector(strings$p.CHECKBOX_RADIO_SELECTOR);
	                toggleEl.checked = isChecked;
	                var event = document.createEvent('Event');
	                event.initEvent('change', true, true);
	                toggleEl.dispatchEvent(event);
	            },
	            setTabIndexForListItemChildren: function (listItemIndex, tabIndexValue) {
	                var element = _this.listElements[listItemIndex];
	                var selector = strings$p.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX;
	                Array.prototype.forEach.call(element.querySelectorAll(selector), function (el) {
	                    el.setAttribute('tabindex', tabIndexValue);
	                });
	            },
	        };
	        return new MDCListFoundation(adapter);
	    };
	    /**
	     * Ensures that at least one item is focusable if the list is interactive and
	     * doesn't specify a suitable tabindex.
	     */
	    MDCList.prototype.ensureFocusable = function () {
	        if (this.isEvolutionEnabled && this.isInteractive) {
	            if (!this.root.querySelector("." + this.classNameMap[cssClasses$p.LIST_ITEM_CLASS] + "[tabindex=\"0\"]")) {
	                var index = this.initialFocusIndex();
	                if (index !== -1) {
	                    this.listElements[index].tabIndex = 0;
	                }
	            }
	        }
	    };
	    MDCList.prototype.initialFocusIndex = function () {
	        if (this.selectedIndex instanceof Array && this.selectedIndex.length > 0) {
	            return this.selectedIndex[0];
	        }
	        if (typeof this.selectedIndex === 'number' &&
	            this.selectedIndex !== numbers$a.UNSET_INDEX) {
	            return this.selectedIndex;
	        }
	        var el = this.root.querySelector("." + this.classNameMap[cssClasses$p.LIST_ITEM_CLASS] + ":not(." + this.classNameMap[cssClasses$p.LIST_ITEM_DISABLED_CLASS] + ")");
	        if (el === null) {
	            return -1;
	        }
	        return this.getListItemIndex(el);
	    };
	    /**
	     * Used to figure out which list item this event is targetting. Or returns -1
	     * if there is no list item
	     */
	    MDCList.prototype.getListItemIndex = function (el) {
	        var nearestParent = closest(el, "." + this.classNameMap[cssClasses$p.LIST_ITEM_CLASS] + ", ." + this.classNameMap[cssClasses$p.ROOT]);
	        // Get the index of the element if it is a list item.
	        if (nearestParent &&
	            matches$2(nearestParent, "." + this.classNameMap[cssClasses$p.LIST_ITEM_CLASS])) {
	            return this.listElements.indexOf(nearestParent);
	        }
	        return -1;
	    };
	    /**
	     * Used to figure out which element was clicked before sending the event to
	     * the foundation.
	     */
	    MDCList.prototype.handleFocusInEvent = function (evt) {
	        var index = this.getListItemIndex(evt.target);
	        this.foundation.handleFocusIn(index);
	    };
	    /**
	     * Used to figure out which element was clicked before sending the event to
	     * the foundation.
	     */
	    MDCList.prototype.handleFocusOutEvent = function (evt) {
	        var index = this.getListItemIndex(evt.target);
	        this.foundation.handleFocusOut(index);
	    };
	    /**
	     * Used to figure out which element was focused when keydown event occurred
	     * before sending the event to the foundation.
	     */
	    MDCList.prototype.handleKeydownEvent = function (evt) {
	        var index = this.getListItemIndex(evt.target);
	        var target = evt.target;
	        this.foundation.handleKeydown(evt, target.classList.contains(this.classNameMap[cssClasses$p.LIST_ITEM_CLASS]), index);
	    };
	    /**
	     * Used to figure out which element was clicked before sending the event to
	     * the foundation.
	     */
	    MDCList.prototype.handleClickEvent = function (evt) {
	        var index = this.getListItemIndex(evt.target);
	        var target = evt.target;
	        // Toggle the checkbox only if it's not the target of the event, or the
	        // checkbox will have 2 change events.
	        var toggleCheckbox = !matches$2(target, strings$p.CHECKBOX_RADIO_SELECTOR);
	        this.foundation.handleClick(index, toggleCheckbox);
	    };
	    return MDCList;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$o = {
	    ANIMATE: 'mdc-drawer--animate',
	    CLOSING: 'mdc-drawer--closing',
	    DISMISSIBLE: 'mdc-drawer--dismissible',
	    MODAL: 'mdc-drawer--modal',
	    OPEN: 'mdc-drawer--open',
	    OPENING: 'mdc-drawer--opening',
	    ROOT: 'mdc-drawer',
	};
	var strings$o = {
	    APP_CONTENT_SELECTOR: '.mdc-drawer-app-content',
	    CLOSE_EVENT: 'MDCDrawer:closed',
	    OPEN_EVENT: 'MDCDrawer:opened',
	    SCRIM_SELECTOR: '.mdc-drawer-scrim',
	    LIST_SELECTOR: '.mdc-list,.mdc-deprecated-list',
	    LIST_ITEM_ACTIVATED_SELECTOR: '.mdc-list-item--activated,.mdc-deprecated-list-item--activated',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCDismissibleDrawerFoundation = /** @class */ (function (_super) {
	    __extends(MDCDismissibleDrawerFoundation, _super);
	    function MDCDismissibleDrawerFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCDismissibleDrawerFoundation.defaultAdapter), adapter)) || this;
	        _this.animationFrame = 0;
	        _this.animationTimer = 0;
	        return _this;
	    }
	    Object.defineProperty(MDCDismissibleDrawerFoundation, "strings", {
	        get: function () {
	            return strings$o;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCDismissibleDrawerFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$o;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCDismissibleDrawerFoundation, "defaultAdapter", {
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                elementHasClass: function () { return false; },
	                notifyClose: function () { return undefined; },
	                notifyOpen: function () { return undefined; },
	                saveFocus: function () { return undefined; },
	                restoreFocus: function () { return undefined; },
	                focusActiveNavigationItem: function () { return undefined; },
	                trapFocus: function () { return undefined; },
	                releaseFocus: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCDismissibleDrawerFoundation.prototype.destroy = function () {
	        if (this.animationFrame) {
	            cancelAnimationFrame(this.animationFrame);
	        }
	        if (this.animationTimer) {
	            clearTimeout(this.animationTimer);
	        }
	    };
	    /**
	     * Opens the drawer from the closed state.
	     */
	    MDCDismissibleDrawerFoundation.prototype.open = function () {
	        var _this = this;
	        if (this.isOpen() || this.isOpening() || this.isClosing()) {
	            return;
	        }
	        this.adapter.addClass(cssClasses$o.OPEN);
	        this.adapter.addClass(cssClasses$o.ANIMATE);
	        // Wait a frame once display is no longer "none", to establish basis for animation
	        this.runNextAnimationFrame(function () {
	            _this.adapter.addClass(cssClasses$o.OPENING);
	        });
	        this.adapter.saveFocus();
	    };
	    /**
	     * Closes the drawer from the open state.
	     */
	    MDCDismissibleDrawerFoundation.prototype.close = function () {
	        if (!this.isOpen() || this.isOpening() || this.isClosing()) {
	            return;
	        }
	        this.adapter.addClass(cssClasses$o.CLOSING);
	    };
	    /**
	     * Returns true if the drawer is in the open position.
	     * @return true if drawer is in open state.
	     */
	    MDCDismissibleDrawerFoundation.prototype.isOpen = function () {
	        return this.adapter.hasClass(cssClasses$o.OPEN);
	    };
	    /**
	     * Returns true if the drawer is animating open.
	     * @return true if drawer is animating open.
	     */
	    MDCDismissibleDrawerFoundation.prototype.isOpening = function () {
	        return this.adapter.hasClass(cssClasses$o.OPENING) ||
	            this.adapter.hasClass(cssClasses$o.ANIMATE);
	    };
	    /**
	     * Returns true if the drawer is animating closed.
	     * @return true if drawer is animating closed.
	     */
	    MDCDismissibleDrawerFoundation.prototype.isClosing = function () {
	        return this.adapter.hasClass(cssClasses$o.CLOSING);
	    };
	    /**
	     * Keydown handler to close drawer when key is escape.
	     */
	    MDCDismissibleDrawerFoundation.prototype.handleKeydown = function (evt) {
	        var keyCode = evt.keyCode, key = evt.key;
	        var isEscape = key === 'Escape' || keyCode === 27;
	        if (isEscape) {
	            this.close();
	        }
	    };
	    /**
	     * Handles the `transitionend` event when the drawer finishes opening/closing.
	     */
	    MDCDismissibleDrawerFoundation.prototype.handleTransitionEnd = function (evt) {
	        var OPENING = cssClasses$o.OPENING, CLOSING = cssClasses$o.CLOSING, OPEN = cssClasses$o.OPEN, ANIMATE = cssClasses$o.ANIMATE, ROOT = cssClasses$o.ROOT;
	        // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.
	        var isRootElement = this.isElement(evt.target) &&
	            this.adapter.elementHasClass(evt.target, ROOT);
	        if (!isRootElement) {
	            return;
	        }
	        if (this.isClosing()) {
	            this.adapter.removeClass(OPEN);
	            this.closed();
	            this.adapter.restoreFocus();
	            this.adapter.notifyClose();
	        }
	        else {
	            this.adapter.focusActiveNavigationItem();
	            this.opened();
	            this.adapter.notifyOpen();
	        }
	        this.adapter.removeClass(ANIMATE);
	        this.adapter.removeClass(OPENING);
	        this.adapter.removeClass(CLOSING);
	    };
	    /**
	     * Extension point for when drawer finishes open animation.
	     */
	    MDCDismissibleDrawerFoundation.prototype.opened = function () { }; // tslint:disable-line:no-empty
	    /**
	     * Extension point for when drawer finishes close animation.
	     */
	    MDCDismissibleDrawerFoundation.prototype.closed = function () { }; // tslint:disable-line:no-empty
	    /**
	     * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.
	     */
	    MDCDismissibleDrawerFoundation.prototype.runNextAnimationFrame = function (callback) {
	        var _this = this;
	        cancelAnimationFrame(this.animationFrame);
	        this.animationFrame = requestAnimationFrame(function () {
	            _this.animationFrame = 0;
	            clearTimeout(_this.animationTimer);
	            _this.animationTimer = setTimeout(callback, 0);
	        });
	    };
	    MDCDismissibleDrawerFoundation.prototype.isElement = function (element) {
	        // In Edge, transitionend on ripple pseudo-elements yields a target without classList.
	        return Boolean(element.classList);
	    };
	    return MDCDismissibleDrawerFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/* istanbul ignore next: subclass is not a branch statement */
	var MDCModalDrawerFoundation = /** @class */ (function (_super) {
	    __extends(MDCModalDrawerFoundation, _super);
	    function MDCModalDrawerFoundation() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * Handles click event on scrim.
	     */
	    MDCModalDrawerFoundation.prototype.handleScrimClick = function () {
	        this.close();
	    };
	    /**
	     * Called when drawer finishes open animation.
	     */
	    MDCModalDrawerFoundation.prototype.opened = function () {
	        this.adapter.trapFocus();
	    };
	    /**
	     * Called when drawer finishes close animation.
	     */
	    MDCModalDrawerFoundation.prototype.closed = function () {
	        this.adapter.releaseFocus();
	    };
	    return MDCModalDrawerFoundation;
	}(MDCDismissibleDrawerFoundation));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$n = MDCDismissibleDrawerFoundation.cssClasses, strings$n = MDCDismissibleDrawerFoundation.strings;
	/**
	 * @events `MDCDrawer:closed {}` Emits when the navigation drawer has closed.
	 * @events `MDCDrawer:opened {}` Emits when the navigation drawer has opened.
	 */
	var MDCDrawer = /** @class */ (function (_super) {
	    __extends(MDCDrawer, _super);
	    function MDCDrawer() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCDrawer.attachTo = function (root) {
	        return new MDCDrawer(root);
	    };
	    Object.defineProperty(MDCDrawer.prototype, "open", {
	        /**
	         * @return boolean Proxies to the foundation's `open`/`close` methods.
	         * Also returns true if drawer is in the open position.
	         */
	        get: function () {
	            return this.foundation.isOpen();
	        },
	        /**
	         * Toggles the drawer open and closed.
	         */
	        set: function (isOpen) {
	            if (isOpen) {
	                this.foundation.open();
	            }
	            else {
	                this.foundation.close();
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCDrawer.prototype, "list", {
	        // initialSyncWithDOM()
	        get: function () {
	            return this.innerList;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCDrawer.prototype.initialize = function (focusTrapFactory, listFactory) {
	        if (focusTrapFactory === void 0) { focusTrapFactory = function (el) { return new FocusTrap(el); }; }
	        if (listFactory === void 0) { listFactory = function (el) { return new MDCList(el); }; }
	        var listEl = this.root.querySelector(strings$n.LIST_SELECTOR);
	        if (listEl) {
	            this.innerList = listFactory(listEl);
	            this.innerList.wrapFocus = true;
	        }
	        this.focusTrapFactory = focusTrapFactory;
	    };
	    MDCDrawer.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        var MODAL = cssClasses$n.MODAL;
	        var SCRIM_SELECTOR = strings$n.SCRIM_SELECTOR;
	        this.scrim = this.root.parentNode
	            .querySelector(SCRIM_SELECTOR);
	        if (this.scrim && this.root.classList.contains(MODAL)) {
	            this.handleScrimClick = function () {
	                return _this.foundation.handleScrimClick();
	            };
	            this.scrim.addEventListener('click', this.handleScrimClick);
	            this.focusTrap = createFocusTrapInstance(this.root, this.focusTrapFactory);
	        }
	        this.handleKeydown = function (evt) {
	            _this.foundation.handleKeydown(evt);
	        };
	        this.handleTransitionEnd = function (evt) {
	            _this.foundation.handleTransitionEnd(evt);
	        };
	        this.listen('keydown', this.handleKeydown);
	        this.listen('transitionend', this.handleTransitionEnd);
	    };
	    MDCDrawer.prototype.destroy = function () {
	        this.unlisten('keydown', this.handleKeydown);
	        this.unlisten('transitionend', this.handleTransitionEnd);
	        if (this.innerList) {
	            this.innerList.destroy();
	        }
	        var MODAL = cssClasses$n.MODAL;
	        if (this.scrim && this.handleScrimClick &&
	            this.root.classList.contains(MODAL)) {
	            this.scrim.removeEventListener('click', this.handleScrimClick);
	            // Ensure drawer is closed to hide scrim and release focus
	            this.open = false;
	        }
	    };
	    MDCDrawer.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take
	        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
	        // methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            elementHasClass: function (element, className) {
	                return element.classList.contains(className);
	            },
	            saveFocus: function () {
	                _this.previousFocus = document.activeElement;
	            },
	            restoreFocus: function () {
	                var previousFocus = _this.previousFocus;
	                if (previousFocus && previousFocus.focus &&
	                    _this.root.contains(document.activeElement)) {
	                    previousFocus.focus();
	                }
	            },
	            focusActiveNavigationItem: function () {
	                var activeNavItemEl = _this.root.querySelector(strings$n.LIST_ITEM_ACTIVATED_SELECTOR);
	                if (activeNavItemEl) {
	                    activeNavItemEl.focus();
	                }
	            },
	            notifyClose: function () {
	                _this.emit(strings$n.CLOSE_EVENT, {}, true /* shouldBubble */);
	            },
	            notifyOpen: function () {
	                _this.emit(strings$n.OPEN_EVENT, {}, true /* shouldBubble */);
	            },
	            trapFocus: function () {
	                _this.focusTrap.trapFocus();
	            },
	            releaseFocus: function () {
	                _this.focusTrap.releaseFocus();
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	        var DISMISSIBLE = cssClasses$n.DISMISSIBLE, MODAL = cssClasses$n.MODAL;
	        if (this.root.classList.contains(DISMISSIBLE)) {
	            return new MDCDismissibleDrawerFoundation(adapter);
	        }
	        else if (this.root.classList.contains(MODAL)) {
	            return new MDCModalDrawerFoundation(adapter);
	        }
	        else {
	            throw new Error("MDCDrawer: Failed to instantiate component. Supported variants are " + DISMISSIBLE + " and " + MODAL + ".");
	        }
	    };
	    return MDCDrawer;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$o = {
		__proto__: null,
		util: util$2,
		MDCDrawer: MDCDrawer,
		cssClasses: cssClasses$o,
		strings: strings$o,
		MDCDismissibleDrawerFoundation: MDCDismissibleDrawerFoundation,
		MDCModalDrawerFoundation: MDCModalDrawerFoundation
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$m = {
	    LABEL_FLOAT_ABOVE: 'mdc-floating-label--float-above',
	    LABEL_REQUIRED: 'mdc-floating-label--required',
	    LABEL_SHAKE: 'mdc-floating-label--shake',
	    ROOT: 'mdc-floating-label',
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCFloatingLabelFoundation = /** @class */ (function (_super) {
	    __extends(MDCFloatingLabelFoundation, _super);
	    function MDCFloatingLabelFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCFloatingLabelFoundation.defaultAdapter), adapter)) || this;
	        _this.shakeAnimationEndHandler = function () {
	            _this.handleShakeAnimationEnd();
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCFloatingLabelFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$m;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCFloatingLabelFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCFloatingLabelAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                getWidth: function () { return 0; },
	                registerInteractionHandler: function () { return undefined; },
	                deregisterInteractionHandler: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCFloatingLabelFoundation.prototype.init = function () {
	        this.adapter.registerInteractionHandler('animationend', this.shakeAnimationEndHandler);
	    };
	    MDCFloatingLabelFoundation.prototype.destroy = function () {
	        this.adapter.deregisterInteractionHandler('animationend', this.shakeAnimationEndHandler);
	    };
	    /**
	     * Returns the width of the label element.
	     */
	    MDCFloatingLabelFoundation.prototype.getWidth = function () {
	        return this.adapter.getWidth();
	    };
	    /**
	     * Styles the label to produce a shake animation to indicate an error.
	     * @param shouldShake If true, adds the shake CSS class; otherwise, removes shake class.
	     */
	    MDCFloatingLabelFoundation.prototype.shake = function (shouldShake) {
	        var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
	        if (shouldShake) {
	            this.adapter.addClass(LABEL_SHAKE);
	        }
	        else {
	            this.adapter.removeClass(LABEL_SHAKE);
	        }
	    };
	    /**
	     * Styles the label to float or dock.
	     * @param shouldFloat If true, adds the float CSS class; otherwise, removes float and shake classes to dock the label.
	     */
	    MDCFloatingLabelFoundation.prototype.float = function (shouldFloat) {
	        var _a = MDCFloatingLabelFoundation.cssClasses, LABEL_FLOAT_ABOVE = _a.LABEL_FLOAT_ABOVE, LABEL_SHAKE = _a.LABEL_SHAKE;
	        if (shouldFloat) {
	            this.adapter.addClass(LABEL_FLOAT_ABOVE);
	        }
	        else {
	            this.adapter.removeClass(LABEL_FLOAT_ABOVE);
	            this.adapter.removeClass(LABEL_SHAKE);
	        }
	    };
	    /**
	     * Styles the label as required.
	     * @param isRequired If true, adds an asterisk to the label, indicating that it is required.
	     */
	    MDCFloatingLabelFoundation.prototype.setRequired = function (isRequired) {
	        var LABEL_REQUIRED = MDCFloatingLabelFoundation.cssClasses.LABEL_REQUIRED;
	        if (isRequired) {
	            this.adapter.addClass(LABEL_REQUIRED);
	        }
	        else {
	            this.adapter.removeClass(LABEL_REQUIRED);
	        }
	    };
	    MDCFloatingLabelFoundation.prototype.handleShakeAnimationEnd = function () {
	        var LABEL_SHAKE = MDCFloatingLabelFoundation.cssClasses.LABEL_SHAKE;
	        this.adapter.removeClass(LABEL_SHAKE);
	    };
	    return MDCFloatingLabelFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCFloatingLabel = /** @class */ (function (_super) {
	    __extends(MDCFloatingLabel, _super);
	    function MDCFloatingLabel() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCFloatingLabel.attachTo = function (root) {
	        return new MDCFloatingLabel(root);
	    };
	    /**
	     * Styles the label to produce the label shake for errors.
	     * @param shouldShake If true, shakes the label by adding a CSS class; otherwise, stops shaking by removing the class.
	     */
	    MDCFloatingLabel.prototype.shake = function (shouldShake) {
	        this.foundation.shake(shouldShake);
	    };
	    /**
	     * Styles the label to float/dock.
	     * @param shouldFloat If true, floats the label by adding a CSS class; otherwise, docks it by removing the class.
	     */
	    MDCFloatingLabel.prototype.float = function (shouldFloat) {
	        this.foundation.float(shouldFloat);
	    };
	    /**
	     * Styles the label as required.
	     * @param isRequired If true, adds an asterisk to the label, indicating that it is required.
	     */
	    MDCFloatingLabel.prototype.setRequired = function (isRequired) {
	        this.foundation.setRequired(isRequired);
	    };
	    MDCFloatingLabel.prototype.getWidth = function () {
	        return this.foundation.getWidth();
	    };
	    MDCFloatingLabel.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            getWidth: function () { return estimateScrollWidth(_this.root); },
	            registerInteractionHandler: function (evtType, handler) {
	                return _this.listen(evtType, handler);
	            },
	            deregisterInteractionHandler: function (evtType, handler) {
	                return _this.unlisten(evtType, handler);
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCFloatingLabelFoundation(adapter);
	    };
	    return MDCFloatingLabel;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$n = {
		__proto__: null,
		MDCFloatingLabel: MDCFloatingLabel,
		cssClasses: cssClasses$m,
		MDCFloatingLabelFoundation: MDCFloatingLabelFoundation
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$l = {
	    ROOT: 'mdc-form-field',
	};
	var strings$m = {
	    LABEL_SELECTOR: '.mdc-form-field > label',
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCFormFieldFoundation = /** @class */ (function (_super) {
	    __extends(MDCFormFieldFoundation, _super);
	    function MDCFormFieldFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCFormFieldFoundation.defaultAdapter), adapter)) || this;
	        _this.click = function () {
	            _this.handleClick();
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCFormFieldFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$l;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCFormFieldFoundation, "strings", {
	        get: function () {
	            return strings$m;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCFormFieldFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                activateInputRipple: function () { return undefined; },
	                deactivateInputRipple: function () { return undefined; },
	                deregisterInteractionHandler: function () { return undefined; },
	                registerInteractionHandler: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCFormFieldFoundation.prototype.init = function () {
	        this.adapter.registerInteractionHandler('click', this.click);
	    };
	    MDCFormFieldFoundation.prototype.destroy = function () {
	        this.adapter.deregisterInteractionHandler('click', this.click);
	    };
	    MDCFormFieldFoundation.prototype.handleClick = function () {
	        var _this = this;
	        this.adapter.activateInputRipple();
	        requestAnimationFrame(function () {
	            _this.adapter.deactivateInputRipple();
	        });
	    };
	    return MDCFormFieldFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCFormField = /** @class */ (function (_super) {
	    __extends(MDCFormField, _super);
	    function MDCFormField() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCFormField.attachTo = function (root) {
	        return new MDCFormField(root);
	    };
	    MDCFormField.prototype.labelEl = function () {
	        var LABEL_SELECTOR = MDCFormFieldFoundation.strings.LABEL_SELECTOR;
	        return this.root.querySelector(LABEL_SELECTOR);
	    };
	    MDCFormField.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            activateInputRipple: function () {
	                if (_this.input && _this.input.ripple) {
	                    _this.input.ripple.activate();
	                }
	            },
	            deactivateInputRipple: function () {
	                if (_this.input && _this.input.ripple) {
	                    _this.input.ripple.deactivate();
	                }
	            },
	            deregisterInteractionHandler: function (evtType, handler) {
	                var labelEl = _this.labelEl();
	                if (labelEl) {
	                    labelEl.removeEventListener(evtType, handler);
	                }
	            },
	            registerInteractionHandler: function (evtType, handler) {
	                var labelEl = _this.labelEl();
	                if (labelEl) {
	                    labelEl.addEventListener(evtType, handler);
	                }
	            },
	        };
	        return new MDCFormFieldFoundation(adapter);
	    };
	    return MDCFormField;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$m = {
		__proto__: null,
		MDCFormField: MDCFormField,
		cssClasses: cssClasses$l,
		strings: strings$m,
		MDCFormFieldFoundation: MDCFormFieldFoundation
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$k = {
	    ICON_BUTTON_ON: 'mdc-icon-button--on',
	    ROOT: 'mdc-icon-button',
	};
	var strings$l = {
	    ARIA_LABEL: 'aria-label',
	    ARIA_PRESSED: 'aria-pressed',
	    DATA_ARIA_LABEL_OFF: 'data-aria-label-off',
	    DATA_ARIA_LABEL_ON: 'data-aria-label-on',
	    CHANGE_EVENT: 'MDCIconButtonToggle:change',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCIconButtonToggleFoundation = /** @class */ (function (_super) {
	    __extends(MDCIconButtonToggleFoundation, _super);
	    function MDCIconButtonToggleFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCIconButtonToggleFoundation.defaultAdapter), adapter)) || this;
	        /**
	         * Whether the icon button has an aria label that changes depending on
	         * toggled state.
	         */
	        _this.hasToggledAriaLabel = false;
	        return _this;
	    }
	    Object.defineProperty(MDCIconButtonToggleFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$k;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCIconButtonToggleFoundation, "strings", {
	        get: function () {
	            return strings$l;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCIconButtonToggleFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                notifyChange: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                getAttr: function () { return null; },
	                setAttr: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCIconButtonToggleFoundation.prototype.init = function () {
	        var ariaLabelOn = this.adapter.getAttr(strings$l.DATA_ARIA_LABEL_ON);
	        var ariaLabelOff = this.adapter.getAttr(strings$l.DATA_ARIA_LABEL_OFF);
	        if (ariaLabelOn && ariaLabelOff) {
	            if (this.adapter.getAttr(strings$l.ARIA_PRESSED) !== null) {
	                throw new Error('MDCIconButtonToggleFoundation: Button should not set ' +
	                    '`aria-pressed` if it has a toggled aria label.');
	            }
	            this.hasToggledAriaLabel = true;
	        }
	        else {
	            this.adapter.setAttr(strings$l.ARIA_PRESSED, String(this.isOn()));
	        }
	    };
	    MDCIconButtonToggleFoundation.prototype.handleClick = function () {
	        this.toggle();
	        this.adapter.notifyChange({ isOn: this.isOn() });
	    };
	    MDCIconButtonToggleFoundation.prototype.isOn = function () {
	        return this.adapter.hasClass(cssClasses$k.ICON_BUTTON_ON);
	    };
	    MDCIconButtonToggleFoundation.prototype.toggle = function (isOn) {
	        if (isOn === void 0) { isOn = !this.isOn(); }
	        // Toggle UI based on state.
	        if (isOn) {
	            this.adapter.addClass(cssClasses$k.ICON_BUTTON_ON);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$k.ICON_BUTTON_ON);
	        }
	        // Toggle aria attributes based on state.
	        if (this.hasToggledAriaLabel) {
	            var ariaLabel = isOn ?
	                this.adapter.getAttr(strings$l.DATA_ARIA_LABEL_ON) :
	                this.adapter.getAttr(strings$l.DATA_ARIA_LABEL_OFF);
	            this.adapter.setAttr(strings$l.ARIA_LABEL, ariaLabel || '');
	        }
	        else {
	            this.adapter.setAttr(strings$l.ARIA_PRESSED, "" + isOn);
	        }
	    };
	    return MDCIconButtonToggleFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$k = MDCIconButtonToggleFoundation.strings;
	var MDCIconButtonToggle = /** @class */ (function (_super) {
	    __extends(MDCIconButtonToggle, _super);
	    function MDCIconButtonToggle() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.rippleComponent = _this.createRipple();
	        return _this;
	    }
	    MDCIconButtonToggle.attachTo = function (root) {
	        return new MDCIconButtonToggle(root);
	    };
	    MDCIconButtonToggle.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.handleClick = function () {
	            _this.foundation.handleClick();
	        };
	        this.listen('click', this.handleClick);
	    };
	    MDCIconButtonToggle.prototype.destroy = function () {
	        this.unlisten('click', this.handleClick);
	        this.ripple.destroy();
	        _super.prototype.destroy.call(this);
	    };
	    MDCIconButtonToggle.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            notifyChange: function (evtData) {
	                _this.emit(strings$k.CHANGE_EVENT, evtData);
	            },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            getAttr: function (attrName) { return _this.root.getAttribute(attrName); },
	            setAttr: function (attrName, attrValue) {
	                return _this.root.setAttribute(attrName, attrValue);
	            },
	        };
	        return new MDCIconButtonToggleFoundation(adapter);
	    };
	    Object.defineProperty(MDCIconButtonToggle.prototype, "ripple", {
	        get: function () {
	            return this.rippleComponent;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCIconButtonToggle.prototype, "on", {
	        get: function () {
	            return this.foundation.isOn();
	        },
	        set: function (isOn) {
	            this.foundation.toggle(isOn);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCIconButtonToggle.prototype.createRipple = function () {
	        var ripple = new MDCRipple(this.root);
	        ripple.unbounded = true;
	        return ripple;
	    };
	    return MDCIconButtonToggle;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$l = {
		__proto__: null,
		MDCIconButtonToggle: MDCIconButtonToggle,
		cssClasses: cssClasses$k,
		strings: strings$l,
		MDCIconButtonToggleFoundation: MDCIconButtonToggleFoundation
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$j = {
	    LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',
	    LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCLineRippleFoundation = /** @class */ (function (_super) {
	    __extends(MDCLineRippleFoundation, _super);
	    function MDCLineRippleFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCLineRippleFoundation.defaultAdapter), adapter)) || this;
	        _this.transitionEndHandler = function (evt) {
	            _this.handleTransitionEnd(evt);
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCLineRippleFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$j;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCLineRippleFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCLineRippleAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                setStyle: function () { return undefined; },
	                registerEventHandler: function () { return undefined; },
	                deregisterEventHandler: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCLineRippleFoundation.prototype.init = function () {
	        this.adapter.registerEventHandler('transitionend', this.transitionEndHandler);
	    };
	    MDCLineRippleFoundation.prototype.destroy = function () {
	        this.adapter.deregisterEventHandler('transitionend', this.transitionEndHandler);
	    };
	    MDCLineRippleFoundation.prototype.activate = function () {
	        this.adapter.removeClass(cssClasses$j.LINE_RIPPLE_DEACTIVATING);
	        this.adapter.addClass(cssClasses$j.LINE_RIPPLE_ACTIVE);
	    };
	    MDCLineRippleFoundation.prototype.setRippleCenter = function (xCoordinate) {
	        this.adapter.setStyle('transform-origin', xCoordinate + "px center");
	    };
	    MDCLineRippleFoundation.prototype.deactivate = function () {
	        this.adapter.addClass(cssClasses$j.LINE_RIPPLE_DEACTIVATING);
	    };
	    MDCLineRippleFoundation.prototype.handleTransitionEnd = function (evt) {
	        // Wait for the line ripple to be either transparent or opaque
	        // before emitting the animation end event
	        var isDeactivating = this.adapter.hasClass(cssClasses$j.LINE_RIPPLE_DEACTIVATING);
	        if (evt.propertyName === 'opacity') {
	            if (isDeactivating) {
	                this.adapter.removeClass(cssClasses$j.LINE_RIPPLE_ACTIVE);
	                this.adapter.removeClass(cssClasses$j.LINE_RIPPLE_DEACTIVATING);
	            }
	        }
	    };
	    return MDCLineRippleFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCLineRipple = /** @class */ (function (_super) {
	    __extends(MDCLineRipple, _super);
	    function MDCLineRipple() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCLineRipple.attachTo = function (root) {
	        return new MDCLineRipple(root);
	    };
	    /**
	     * Activates the line ripple
	     */
	    MDCLineRipple.prototype.activate = function () {
	        this.foundation.activate();
	    };
	    /**
	     * Deactivates the line ripple
	     */
	    MDCLineRipple.prototype.deactivate = function () {
	        this.foundation.deactivate();
	    };
	    /**
	     * Sets the transform origin given a user's click location.
	     * The `rippleCenter` is the x-coordinate of the middle of the ripple.
	     */
	    MDCLineRipple.prototype.setRippleCenter = function (xCoordinate) {
	        this.foundation.setRippleCenter(xCoordinate);
	    };
	    MDCLineRipple.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            setStyle: function (propertyName, value) { return _this.root.style.setProperty(propertyName, value); },
	            registerEventHandler: function (evtType, handler) { return _this.listen(evtType, handler); },
	            deregisterEventHandler: function (evtType, handler) { return _this.unlisten(evtType, handler); },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCLineRippleFoundation(adapter);
	    };
	    return MDCLineRipple;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$k = {
		__proto__: null,
		MDCLineRipple: MDCLineRipple,
		cssClasses: cssClasses$j,
		MDCLineRippleFoundation: MDCLineRippleFoundation
	};

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2021 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$j = {
		__proto__: null,
		MDCLinearProgress: MDCLinearProgress,
		cssClasses: cssClasses$s,
		strings: strings$t,
		animationDimensionPercentages: animationDimensionPercentages,
		MDCLinearProgressFoundation: MDCLinearProgressFoundation
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$i = {
		__proto__: null,
		MDCList: MDCList,
		strings: strings$p,
		cssClasses: cssClasses$p,
		numbers: numbers$a,
		deprecatedClassNameMap: deprecatedClassNameMap,
		evolutionAttribute: evolutionAttribute,
		evolutionClassNameMap: evolutionClassNameMap,
		MDCListFoundation: MDCListFoundation
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$i = {
	    ANCHOR: 'mdc-menu-surface--anchor',
	    ANIMATING_CLOSED: 'mdc-menu-surface--animating-closed',
	    ANIMATING_OPEN: 'mdc-menu-surface--animating-open',
	    FIXED: 'mdc-menu-surface--fixed',
	    IS_OPEN_BELOW: 'mdc-menu-surface--is-open-below',
	    OPEN: 'mdc-menu-surface--open',
	    ROOT: 'mdc-menu-surface',
	};
	// tslint:disable:object-literal-sort-keys
	var strings$j = {
	    CLOSED_EVENT: 'MDCMenuSurface:closed',
	    CLOSING_EVENT: 'MDCMenuSurface:closing',
	    OPENED_EVENT: 'MDCMenuSurface:opened',
	    FOCUSABLE_ELEMENTS: [
	        'button:not(:disabled)',
	        '[href]:not([aria-disabled="true"])',
	        'input:not(:disabled)',
	        'select:not(:disabled)',
	        'textarea:not(:disabled)',
	        '[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])',
	    ].join(', '),
	};
	// tslint:enable:object-literal-sort-keys
	var numbers$9 = {
	    /** Total duration of menu-surface open animation. */
	    TRANSITION_OPEN_DURATION: 120,
	    /** Total duration of menu-surface close animation. */
	    TRANSITION_CLOSE_DURATION: 75,
	    /**
	     * Margin left to the edge of the viewport when menu-surface is at maximum
	     * possible height. Also used as a viewport margin.
	     */
	    MARGIN_TO_EDGE: 32,
	    /**
	     * Ratio of anchor width to menu-surface width for switching from corner
	     * positioning to center positioning.
	     */
	    ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67,
	    /**
	     * Amount of time to wait before restoring focus when closing the menu
	     * surface. This is important because if a touch event triggered the menu
	     * close, and the subsequent mouse event occurs after focus is restored, then
	     * the restored focus would be lost.
	     */
	    TOUCH_EVENT_WAIT_MS: 30,
	};
	/**
	 * Enum for bits in the {@see Corner) bitmap.
	 */
	var CornerBit;
	(function (CornerBit) {
	    CornerBit[CornerBit["BOTTOM"] = 1] = "BOTTOM";
	    CornerBit[CornerBit["CENTER"] = 2] = "CENTER";
	    CornerBit[CornerBit["RIGHT"] = 4] = "RIGHT";
	    CornerBit[CornerBit["FLIP_RTL"] = 8] = "FLIP_RTL";
	})(CornerBit || (CornerBit = {}));
	/**
	 * Enum for representing an element corner for positioning the menu-surface.
	 *
	 * The START constants map to LEFT if element directionality is left
	 * to right and RIGHT if the directionality is right to left.
	 * Likewise END maps to RIGHT or LEFT depending on the directionality.
	 */
	var Corner;
	(function (Corner) {
	    Corner[Corner["TOP_LEFT"] = 0] = "TOP_LEFT";
	    Corner[Corner["TOP_RIGHT"] = 4] = "TOP_RIGHT";
	    Corner[Corner["BOTTOM_LEFT"] = 1] = "BOTTOM_LEFT";
	    Corner[Corner["BOTTOM_RIGHT"] = 5] = "BOTTOM_RIGHT";
	    Corner[Corner["TOP_START"] = 8] = "TOP_START";
	    Corner[Corner["TOP_END"] = 12] = "TOP_END";
	    Corner[Corner["BOTTOM_START"] = 9] = "BOTTOM_START";
	    Corner[Corner["BOTTOM_END"] = 13] = "BOTTOM_END";
	})(Corner || (Corner = {}));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCMenuSurfaceFoundation = /** @class */ (function (_super) {
	    __extends(MDCMenuSurfaceFoundation, _super);
	    function MDCMenuSurfaceFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCMenuSurfaceFoundation.defaultAdapter), adapter)) || this;
	        _this.isSurfaceOpen = false;
	        _this.isQuickOpen = false;
	        _this.isHoistedElement = false;
	        _this.isFixedPosition = false;
	        _this.isHorizontallyCenteredOnViewport = false;
	        _this.maxHeight = 0;
	        _this.openAnimationEndTimerId = 0;
	        _this.closeAnimationEndTimerId = 0;
	        _this.animationRequestId = 0;
	        _this.anchorCorner = Corner.TOP_START;
	        /**
	         * Corner of the menu surface to which menu surface is attached to anchor.
	         *
	         *  Anchor corner --->+----------+
	         *                    |  ANCHOR  |
	         *                    +----------+
	         *  Origin corner --->+--------------+
	         *                    |              |
	         *                    |              |
	         *                    | MENU SURFACE |
	         *                    |              |
	         *                    |              |
	         *                    +--------------+
	         */
	        _this.originCorner = Corner.TOP_START;
	        _this.anchorMargin = { top: 0, right: 0, bottom: 0, left: 0 };
	        _this.position = { x: 0, y: 0 };
	        return _this;
	    }
	    Object.defineProperty(MDCMenuSurfaceFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$i;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuSurfaceFoundation, "strings", {
	        get: function () {
	            return strings$j;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuSurfaceFoundation, "numbers", {
	        get: function () {
	            return numbers$9;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuSurfaceFoundation, "Corner", {
	        get: function () {
	            return Corner;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuSurfaceFoundation, "defaultAdapter", {
	        /**
	         * @see {@link MDCMenuSurfaceAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                hasAnchor: function () { return false; },
	                isElementInContainer: function () { return false; },
	                isFocused: function () { return false; },
	                isRtl: function () { return false; },
	                getInnerDimensions: function () { return ({ height: 0, width: 0 }); },
	                getAnchorDimensions: function () { return null; },
	                getWindowDimensions: function () { return ({ height: 0, width: 0 }); },
	                getBodyDimensions: function () { return ({ height: 0, width: 0 }); },
	                getWindowScroll: function () { return ({ x: 0, y: 0 }); },
	                setPosition: function () { return undefined; },
	                setMaxHeight: function () { return undefined; },
	                setTransformOrigin: function () { return undefined; },
	                saveFocus: function () { return undefined; },
	                restoreFocus: function () { return undefined; },
	                notifyClose: function () { return undefined; },
	                notifyOpen: function () { return undefined; },
	                notifyClosing: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCMenuSurfaceFoundation.prototype.init = function () {
	        var _a = MDCMenuSurfaceFoundation.cssClasses, ROOT = _a.ROOT, OPEN = _a.OPEN;
	        if (!this.adapter.hasClass(ROOT)) {
	            throw new Error(ROOT + " class required in root element.");
	        }
	        if (this.adapter.hasClass(OPEN)) {
	            this.isSurfaceOpen = true;
	        }
	    };
	    MDCMenuSurfaceFoundation.prototype.destroy = function () {
	        clearTimeout(this.openAnimationEndTimerId);
	        clearTimeout(this.closeAnimationEndTimerId);
	        // Cancel any currently running animations.
	        cancelAnimationFrame(this.animationRequestId);
	    };
	    /**
	     * @param corner Default anchor corner alignment of top-left menu surface
	     *     corner.
	     */
	    MDCMenuSurfaceFoundation.prototype.setAnchorCorner = function (corner) {
	        this.anchorCorner = corner;
	    };
	    /**
	     * Flip menu corner horizontally.
	     */
	    MDCMenuSurfaceFoundation.prototype.flipCornerHorizontally = function () {
	        this.originCorner = this.originCorner ^ CornerBit.RIGHT;
	    };
	    /**
	     * @param margin Set of margin values from anchor.
	     */
	    MDCMenuSurfaceFoundation.prototype.setAnchorMargin = function (margin) {
	        this.anchorMargin.top = margin.top || 0;
	        this.anchorMargin.right = margin.right || 0;
	        this.anchorMargin.bottom = margin.bottom || 0;
	        this.anchorMargin.left = margin.left || 0;
	    };
	    /** Used to indicate if the menu-surface is hoisted to the body. */
	    MDCMenuSurfaceFoundation.prototype.setIsHoisted = function (isHoisted) {
	        this.isHoistedElement = isHoisted;
	    };
	    /**
	     * Used to set the menu-surface calculations based on a fixed position menu.
	     */
	    MDCMenuSurfaceFoundation.prototype.setFixedPosition = function (isFixedPosition) {
	        this.isFixedPosition = isFixedPosition;
	    };
	    /**
	     * @return Returns true if menu is in fixed (`position: fixed`) position.
	     */
	    MDCMenuSurfaceFoundation.prototype.isFixed = function () {
	        return this.isFixedPosition;
	    };
	    /** Sets the menu-surface position on the page. */
	    MDCMenuSurfaceFoundation.prototype.setAbsolutePosition = function (x, y) {
	        this.position.x = this.isFinite(x) ? x : 0;
	        this.position.y = this.isFinite(y) ? y : 0;
	    };
	    /** Sets whether menu-surface should be horizontally centered to viewport. */
	    MDCMenuSurfaceFoundation.prototype.setIsHorizontallyCenteredOnViewport = function (isCentered) {
	        this.isHorizontallyCenteredOnViewport = isCentered;
	    };
	    MDCMenuSurfaceFoundation.prototype.setQuickOpen = function (quickOpen) {
	        this.isQuickOpen = quickOpen;
	    };
	    /**
	     * Sets maximum menu-surface height on open.
	     * @param maxHeight The desired max-height. Set to 0 (default) to
	     *     automatically calculate max height based on available viewport space.
	     */
	    MDCMenuSurfaceFoundation.prototype.setMaxHeight = function (maxHeight) {
	        this.maxHeight = maxHeight;
	    };
	    MDCMenuSurfaceFoundation.prototype.isOpen = function () {
	        return this.isSurfaceOpen;
	    };
	    /**
	     * Open the menu surface.
	     */
	    MDCMenuSurfaceFoundation.prototype.open = function () {
	        var _this = this;
	        if (this.isSurfaceOpen) {
	            return;
	        }
	        this.adapter.saveFocus();
	        if (this.isQuickOpen) {
	            this.isSurfaceOpen = true;
	            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
	            this.dimensions = this.adapter.getInnerDimensions();
	            this.autoposition();
	            this.adapter.notifyOpen();
	        }
	        else {
	            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
	            this.animationRequestId = requestAnimationFrame(function () {
	                _this.dimensions = _this.adapter.getInnerDimensions();
	                _this.autoposition();
	                _this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
	                _this.openAnimationEndTimerId = setTimeout(function () {
	                    _this.openAnimationEndTimerId = 0;
	                    _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);
	                    _this.adapter.notifyOpen();
	                }, numbers$9.TRANSITION_OPEN_DURATION);
	            });
	            this.isSurfaceOpen = true;
	        }
	    };
	    /**
	     * Closes the menu surface.
	     */
	    MDCMenuSurfaceFoundation.prototype.close = function (skipRestoreFocus) {
	        var _this = this;
	        if (skipRestoreFocus === void 0) { skipRestoreFocus = false; }
	        if (!this.isSurfaceOpen) {
	            return;
	        }
	        this.adapter.notifyClosing();
	        if (this.isQuickOpen) {
	            this.isSurfaceOpen = false;
	            if (!skipRestoreFocus) {
	                this.maybeRestoreFocus();
	            }
	            this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
	            this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
	            this.adapter.notifyClose();
	            return;
	        }
	        this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
	        requestAnimationFrame(function () {
	            _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);
	            _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
	            _this.closeAnimationEndTimerId = setTimeout(function () {
	                _this.closeAnimationEndTimerId = 0;
	                _this.adapter.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);
	                _this.adapter.notifyClose();
	            }, numbers$9.TRANSITION_CLOSE_DURATION);
	        });
	        this.isSurfaceOpen = false;
	        if (!skipRestoreFocus) {
	            this.maybeRestoreFocus();
	        }
	    };
	    /** Handle clicks and close if not within menu-surface element. */
	    MDCMenuSurfaceFoundation.prototype.handleBodyClick = function (evt) {
	        var el = evt.target;
	        if (this.adapter.isElementInContainer(el)) {
	            return;
	        }
	        this.close();
	    };
	    /** Handle keys that close the surface. */
	    MDCMenuSurfaceFoundation.prototype.handleKeydown = function (evt) {
	        var keyCode = evt.keyCode, key = evt.key;
	        var isEscape = key === 'Escape' || keyCode === 27;
	        if (isEscape) {
	            this.close();
	        }
	    };
	    MDCMenuSurfaceFoundation.prototype.autoposition = function () {
	        var _a;
	        // Compute measurements for autoposition methods reuse.
	        this.measurements = this.getAutoLayoutmeasurements();
	        var corner = this.getoriginCorner();
	        var maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight(corner);
	        var verticalAlignment = this.hasBit(corner, CornerBit.BOTTOM) ? 'bottom' : 'top';
	        var horizontalAlignment = this.hasBit(corner, CornerBit.RIGHT) ? 'right' : 'left';
	        var horizontalOffset = this.getHorizontalOriginOffset(corner);
	        var verticalOffset = this.getVerticalOriginOffset(corner);
	        var _b = this.measurements, anchorSize = _b.anchorSize, surfaceSize = _b.surfaceSize;
	        var position = (_a = {},
	            _a[horizontalAlignment] = horizontalOffset,
	            _a[verticalAlignment] = verticalOffset,
	            _a);
	        // Center align when anchor width is comparable or greater than menu
	        // surface, otherwise keep corner.
	        if (anchorSize.width / surfaceSize.width >
	            numbers$9.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) {
	            horizontalAlignment = 'center';
	        }
	        // If the menu-surface has been hoisted to the body, it's no longer relative
	        // to the anchor element
	        if (this.isHoistedElement || this.isFixedPosition) {
	            this.adjustPositionForHoistedElement(position);
	        }
	        this.adapter.setTransformOrigin(horizontalAlignment + " " + verticalAlignment);
	        this.adapter.setPosition(position);
	        this.adapter.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + 'px' : '');
	        // If it is opened from the top then add is-open-below class
	        if (!this.hasBit(corner, CornerBit.BOTTOM)) {
	            this.adapter.addClass(MDCMenuSurfaceFoundation.cssClasses.IS_OPEN_BELOW);
	        }
	    };
	    /**
	     * @return Measurements used to position menu surface popup.
	     */
	    MDCMenuSurfaceFoundation.prototype.getAutoLayoutmeasurements = function () {
	        var anchorRect = this.adapter.getAnchorDimensions();
	        var bodySize = this.adapter.getBodyDimensions();
	        var viewportSize = this.adapter.getWindowDimensions();
	        var windowScroll = this.adapter.getWindowScroll();
	        if (!anchorRect) {
	            // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
	            anchorRect = {
	                top: this.position.y,
	                right: this.position.x,
	                bottom: this.position.y,
	                left: this.position.x,
	                width: 0,
	                height: 0,
	            };
	            // tslint:enable:object-literal-sort-keys
	        }
	        return {
	            anchorSize: anchorRect,
	            bodySize: bodySize,
	            surfaceSize: this.dimensions,
	            viewportDistance: {
	                // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
	                top: anchorRect.top,
	                right: viewportSize.width - anchorRect.right,
	                bottom: viewportSize.height - anchorRect.bottom,
	                left: anchorRect.left,
	                // tslint:enable:object-literal-sort-keys
	            },
	            viewportSize: viewportSize,
	            windowScroll: windowScroll,
	        };
	    };
	    /**
	     * Computes the corner of the anchor from which to animate and position the
	     * menu surface.
	     *
	     * Only LEFT or RIGHT bit is used to position the menu surface ignoring RTL
	     * context. E.g., menu surface will be positioned from right side on TOP_END.
	     */
	    MDCMenuSurfaceFoundation.prototype.getoriginCorner = function () {
	        var corner = this.originCorner;
	        var _a = this.measurements, viewportDistance = _a.viewportDistance, anchorSize = _a.anchorSize, surfaceSize = _a.surfaceSize;
	        var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;
	        var isAnchoredToBottom = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
	        var availableTop;
	        var availableBottom;
	        if (isAnchoredToBottom) {
	            availableTop =
	                viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.bottom;
	            availableBottom =
	                viewportDistance.bottom - MARGIN_TO_EDGE - this.anchorMargin.bottom;
	        }
	        else {
	            availableTop =
	                viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.top;
	            availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE +
	                anchorSize.height - this.anchorMargin.top;
	        }
	        var isAvailableBottom = availableBottom - surfaceSize.height > 0;
	        if (!isAvailableBottom && availableTop > availableBottom) {
	            // Attach bottom side of surface to the anchor.
	            corner = this.setBit(corner, CornerBit.BOTTOM);
	        }
	        var isRtl = this.adapter.isRtl();
	        var isFlipRtl = this.hasBit(this.anchorCorner, CornerBit.FLIP_RTL);
	        var hasRightBit = this.hasBit(this.anchorCorner, CornerBit.RIGHT) ||
	            this.hasBit(corner, CornerBit.RIGHT);
	        // Whether surface attached to right side of anchor element.
	        var isAnchoredToRight = false;
	        // Anchored to start
	        if (isRtl && isFlipRtl) {
	            isAnchoredToRight = !hasRightBit;
	        }
	        else {
	            // Anchored to right
	            isAnchoredToRight = hasRightBit;
	        }
	        var availableLeft;
	        var availableRight;
	        if (isAnchoredToRight) {
	            availableLeft =
	                viewportDistance.left + anchorSize.width + this.anchorMargin.right;
	            availableRight = viewportDistance.right - this.anchorMargin.right;
	        }
	        else {
	            availableLeft = viewportDistance.left + this.anchorMargin.left;
	            availableRight =
	                viewportDistance.right + anchorSize.width - this.anchorMargin.left;
	        }
	        var isAvailableLeft = availableLeft - surfaceSize.width > 0;
	        var isAvailableRight = availableRight - surfaceSize.width > 0;
	        var isOriginCornerAlignedToEnd = this.hasBit(corner, CornerBit.FLIP_RTL) &&
	            this.hasBit(corner, CornerBit.RIGHT);
	        if (isAvailableRight && isOriginCornerAlignedToEnd && isRtl ||
	            !isAvailableLeft && isOriginCornerAlignedToEnd) {
	            // Attach left side of surface to the anchor.
	            corner = this.unsetBit(corner, CornerBit.RIGHT);
	        }
	        else if (isAvailableLeft && isAnchoredToRight && isRtl ||
	            (isAvailableLeft && !isAnchoredToRight && hasRightBit) ||
	            (!isAvailableRight && availableLeft >= availableRight)) {
	            // Attach right side of surface to the anchor.
	            corner = this.setBit(corner, CornerBit.RIGHT);
	        }
	        return corner;
	    };
	    /**
	     * @param corner Origin corner of the menu surface.
	     * @return Maximum height of the menu surface, based on available space. 0
	     *     indicates should not be set.
	     */
	    MDCMenuSurfaceFoundation.prototype.getMenuSurfaceMaxHeight = function (corner) {
	        if (this.maxHeight > 0) {
	            return this.maxHeight;
	        }
	        var viewportDistance = this.measurements.viewportDistance;
	        var maxHeight = 0;
	        var isBottomAligned = this.hasBit(corner, CornerBit.BOTTOM);
	        var isBottomAnchored = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
	        var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation.numbers.MARGIN_TO_EDGE;
	        // When maximum height is not specified, it is handled from CSS.
	        if (isBottomAligned) {
	            maxHeight = viewportDistance.top + this.anchorMargin.top - MARGIN_TO_EDGE;
	            if (!isBottomAnchored) {
	                maxHeight += this.measurements.anchorSize.height;
	            }
	        }
	        else {
	            maxHeight = viewportDistance.bottom - this.anchorMargin.bottom +
	                this.measurements.anchorSize.height - MARGIN_TO_EDGE;
	            if (isBottomAnchored) {
	                maxHeight -= this.measurements.anchorSize.height;
	            }
	        }
	        return maxHeight;
	    };
	    /**
	     * @param corner Origin corner of the menu surface.
	     * @return Horizontal offset of menu surface origin corner from corresponding
	     *     anchor corner.
	     */
	    MDCMenuSurfaceFoundation.prototype.getHorizontalOriginOffset = function (corner) {
	        var anchorSize = this.measurements.anchorSize;
	        // isRightAligned corresponds to using the 'right' property on the surface.
	        var isRightAligned = this.hasBit(corner, CornerBit.RIGHT);
	        var avoidHorizontalOverlap = this.hasBit(this.anchorCorner, CornerBit.RIGHT);
	        if (isRightAligned) {
	            var rightOffset = avoidHorizontalOverlap ?
	                anchorSize.width - this.anchorMargin.left :
	                this.anchorMargin.right;
	            // For hoisted or fixed elements, adjust the offset by the difference
	            // between viewport width and body width so when we calculate the right
	            // value (`adjustPositionForHoistedElement`) based on the element
	            // position, the right property is correct.
	            if (this.isHoistedElement || this.isFixedPosition) {
	                return rightOffset -
	                    (this.measurements.viewportSize.width -
	                        this.measurements.bodySize.width);
	            }
	            return rightOffset;
	        }
	        return avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.right :
	            this.anchorMargin.left;
	    };
	    /**
	     * @param corner Origin corner of the menu surface.
	     * @return Vertical offset of menu surface origin corner from corresponding
	     *     anchor corner.
	     */
	    MDCMenuSurfaceFoundation.prototype.getVerticalOriginOffset = function (corner) {
	        var anchorSize = this.measurements.anchorSize;
	        var isBottomAligned = this.hasBit(corner, CornerBit.BOTTOM);
	        var avoidVerticalOverlap = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
	        var y = 0;
	        if (isBottomAligned) {
	            y = avoidVerticalOverlap ? anchorSize.height - this.anchorMargin.top :
	                -this.anchorMargin.bottom;
	        }
	        else {
	            y = avoidVerticalOverlap ?
	                (anchorSize.height + this.anchorMargin.bottom) :
	                this.anchorMargin.top;
	        }
	        return y;
	    };
	    /**
	     * Calculates the offsets for positioning the menu-surface when the
	     * menu-surface has been hoisted to the body.
	     */
	    MDCMenuSurfaceFoundation.prototype.adjustPositionForHoistedElement = function (position) {
	        var e_1, _a;
	        var _b = this.measurements, windowScroll = _b.windowScroll, viewportDistance = _b.viewportDistance, surfaceSize = _b.surfaceSize, viewportSize = _b.viewportSize;
	        var props = Object.keys(position);
	        try {
	            for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
	                var prop = props_1_1.value;
	                var value = position[prop] || 0;
	                if (this.isHorizontallyCenteredOnViewport &&
	                    (prop === 'left' || prop === 'right')) {
	                    position[prop] = (viewportSize.width - surfaceSize.width) / 2;
	                    continue;
	                }
	                // Hoisted surfaces need to have the anchor elements location on the page
	                // added to the position properties for proper alignment on the body.
	                value += viewportDistance[prop];
	                // Surfaces that are absolutely positioned need to have additional
	                // calculations for scroll and bottom positioning.
	                if (!this.isFixedPosition) {
	                    if (prop === 'top') {
	                        value += windowScroll.y;
	                    }
	                    else if (prop === 'bottom') {
	                        value -= windowScroll.y;
	                    }
	                    else if (prop === 'left') {
	                        value += windowScroll.x;
	                    }
	                    else { // prop === 'right'
	                        value -= windowScroll.x;
	                    }
	                }
	                position[prop] = value;
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    /**
	     * The last focused element when the menu surface was opened should regain
	     * focus, if the user is focused on or within the menu surface when it is
	     * closed.
	     */
	    MDCMenuSurfaceFoundation.prototype.maybeRestoreFocus = function () {
	        var _this = this;
	        var isRootFocused = this.adapter.isFocused();
	        var childHasFocus = document.activeElement &&
	            this.adapter.isElementInContainer(document.activeElement);
	        if (isRootFocused || childHasFocus) {
	            // Wait before restoring focus when closing the menu surface. This is
	            // important because if a touch event triggered the menu close, and the
	            // subsequent mouse event occurs after focus is restored, then the
	            // restored focus would be lost.
	            setTimeout(function () {
	                _this.adapter.restoreFocus();
	            }, numbers$9.TOUCH_EVENT_WAIT_MS);
	        }
	    };
	    MDCMenuSurfaceFoundation.prototype.hasBit = function (corner, bit) {
	        return Boolean(corner & bit); // tslint:disable-line:no-bitwise
	    };
	    MDCMenuSurfaceFoundation.prototype.setBit = function (corner, bit) {
	        return corner | bit; // tslint:disable-line:no-bitwise
	    };
	    MDCMenuSurfaceFoundation.prototype.unsetBit = function (corner, bit) {
	        return corner ^ bit;
	    };
	    /**
	     * isFinite that doesn't force conversion to number type.
	     * Equivalent to Number.isFinite in ES2015, which is not supported in IE.
	     */
	    MDCMenuSurfaceFoundation.prototype.isFinite = function (num) {
	        return typeof num === 'number' && isFinite(num);
	    };
	    return MDCMenuSurfaceFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCMenuSurface = /** @class */ (function (_super) {
	    __extends(MDCMenuSurface, _super);
	    function MDCMenuSurface() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCMenuSurface.attachTo = function (root) {
	        return new MDCMenuSurface(root);
	    };
	    MDCMenuSurface.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        var parentEl = this.root.parentElement;
	        this.anchorElement = parentEl && parentEl.classList.contains(cssClasses$i.ANCHOR) ? parentEl : null;
	        if (this.root.classList.contains(cssClasses$i.FIXED)) {
	            this.setFixedPosition(true);
	        }
	        this.handleKeydown = function (event) {
	            _this.foundation.handleKeydown(event);
	        };
	        this.handleBodyClick = function (event) {
	            _this.foundation.handleBodyClick(event);
	        };
	        // capture so that no race between handleBodyClick and quickOpen when
	        // menusurface opened on button click which registers this listener
	        this.registerBodyClickListener = function () {
	            document.body.addEventListener('click', _this.handleBodyClick, { capture: true });
	        };
	        this.deregisterBodyClickListener = function () {
	            document.body.removeEventListener('click', _this.handleBodyClick, { capture: true });
	        };
	        this.listen('keydown', this.handleKeydown);
	        this.listen(strings$j.OPENED_EVENT, this.registerBodyClickListener);
	        this.listen(strings$j.CLOSED_EVENT, this.deregisterBodyClickListener);
	    };
	    MDCMenuSurface.prototype.destroy = function () {
	        this.unlisten('keydown', this.handleKeydown);
	        this.unlisten(strings$j.OPENED_EVENT, this.registerBodyClickListener);
	        this.unlisten(strings$j.CLOSED_EVENT, this.deregisterBodyClickListener);
	        _super.prototype.destroy.call(this);
	    };
	    MDCMenuSurface.prototype.isOpen = function () {
	        return this.foundation.isOpen();
	    };
	    MDCMenuSurface.prototype.open = function () {
	        this.foundation.open();
	    };
	    MDCMenuSurface.prototype.close = function (skipRestoreFocus) {
	        if (skipRestoreFocus === void 0) { skipRestoreFocus = false; }
	        this.foundation.close(skipRestoreFocus);
	    };
	    Object.defineProperty(MDCMenuSurface.prototype, "quickOpen", {
	        set: function (quickOpen) {
	            this.foundation.setQuickOpen(quickOpen);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /** Sets the foundation to use page offsets for an positioning when the menu is hoisted to the body. */
	    MDCMenuSurface.prototype.setIsHoisted = function (isHoisted) {
	        this.foundation.setIsHoisted(isHoisted);
	    };
	    /** Sets the element that the menu-surface is anchored to. */
	    MDCMenuSurface.prototype.setMenuSurfaceAnchorElement = function (element) {
	        this.anchorElement = element;
	    };
	    /** Sets the menu-surface to position: fixed. */
	    MDCMenuSurface.prototype.setFixedPosition = function (isFixed) {
	        if (isFixed) {
	            this.root.classList.add(cssClasses$i.FIXED);
	        }
	        else {
	            this.root.classList.remove(cssClasses$i.FIXED);
	        }
	        this.foundation.setFixedPosition(isFixed);
	    };
	    /** Sets the absolute x/y position to position based on. Requires the menu to be hoisted. */
	    MDCMenuSurface.prototype.setAbsolutePosition = function (x, y) {
	        this.foundation.setAbsolutePosition(x, y);
	        this.setIsHoisted(true);
	    };
	    /**
	     * @param corner Default anchor corner alignment of top-left surface corner.
	     */
	    MDCMenuSurface.prototype.setAnchorCorner = function (corner) {
	        this.foundation.setAnchorCorner(corner);
	    };
	    MDCMenuSurface.prototype.setAnchorMargin = function (margin) {
	        this.foundation.setAnchorMargin(margin);
	    };
	    MDCMenuSurface.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            hasAnchor: function () { return !!_this.anchorElement; },
	            notifyClose: function () {
	                return _this.emit(MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, {});
	            },
	            notifyClosing: function () {
	                _this.emit(MDCMenuSurfaceFoundation.strings.CLOSING_EVENT, {});
	            },
	            notifyOpen: function () {
	                return _this.emit(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, {});
	            },
	            isElementInContainer: function (el) { return _this.root.contains(el); },
	            isRtl: function () {
	                return getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl';
	            },
	            setTransformOrigin: function (origin) {
	                var propertyName = getCorrectPropertyName(window, 'transform') + "-origin";
	                _this.root.style.setProperty(propertyName, origin);
	            },
	            isFocused: function () { return document.activeElement === _this.root; },
	            saveFocus: function () {
	                _this.previousFocus =
	                    document.activeElement;
	            },
	            restoreFocus: function () {
	                if (_this.root.contains(document.activeElement)) {
	                    if (_this.previousFocus && _this.previousFocus.focus) {
	                        _this.previousFocus.focus();
	                    }
	                }
	            },
	            getInnerDimensions: function () {
	                return {
	                    width: _this.root.offsetWidth,
	                    height: _this.root.offsetHeight
	                };
	            },
	            getAnchorDimensions: function () { return _this.anchorElement ?
	                _this.anchorElement.getBoundingClientRect() :
	                null; },
	            getWindowDimensions: function () {
	                return { width: window.innerWidth, height: window.innerHeight };
	            },
	            getBodyDimensions: function () {
	                return { width: document.body.clientWidth, height: document.body.clientHeight };
	            },
	            getWindowScroll: function () {
	                return { x: window.pageXOffset, y: window.pageYOffset };
	            },
	            setPosition: function (position) {
	                var rootHTML = _this.root;
	                rootHTML.style.left = 'left' in position ? position.left + "px" : '';
	                rootHTML.style.right = 'right' in position ? position.right + "px" : '';
	                rootHTML.style.top = 'top' in position ? position.top + "px" : '';
	                rootHTML.style.bottom =
	                    'bottom' in position ? position.bottom + "px" : '';
	            },
	            setMaxHeight: function (height) {
	                _this.root.style.maxHeight = height;
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCMenuSurfaceFoundation(adapter);
	    };
	    return MDCMenuSurface;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$h = {
		__proto__: null,
		MDCMenuSurface: MDCMenuSurface,
		cssClasses: cssClasses$i,
		strings: strings$j,
		numbers: numbers$9,
		get CornerBit () { return CornerBit; },
		get Corner () { return Corner; },
		MDCMenuSurfaceFoundation: MDCMenuSurfaceFoundation
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$h = {
	    MENU_SELECTED_LIST_ITEM: 'mdc-menu-item--selected',
	    MENU_SELECTION_GROUP: 'mdc-menu__selection-group',
	    ROOT: 'mdc-menu',
	};
	var strings$i = {
	    ARIA_CHECKED_ATTR: 'aria-checked',
	    ARIA_DISABLED_ATTR: 'aria-disabled',
	    CHECKBOX_SELECTOR: 'input[type="checkbox"]',
	    LIST_SELECTOR: '.mdc-list,.mdc-deprecated-list',
	    SELECTED_EVENT: 'MDCMenu:selected',
	    SKIP_RESTORE_FOCUS: 'data-menu-item-skip-restore-focus',
	};
	var numbers$8 = {
	    FOCUS_ROOT_INDEX: -1,
	};
	var DefaultFocusState;
	(function (DefaultFocusState) {
	    DefaultFocusState[DefaultFocusState["NONE"] = 0] = "NONE";
	    DefaultFocusState[DefaultFocusState["LIST_ROOT"] = 1] = "LIST_ROOT";
	    DefaultFocusState[DefaultFocusState["FIRST_ITEM"] = 2] = "FIRST_ITEM";
	    DefaultFocusState[DefaultFocusState["LAST_ITEM"] = 3] = "LAST_ITEM";
	})(DefaultFocusState || (DefaultFocusState = {}));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCMenuFoundation = /** @class */ (function (_super) {
	    __extends(MDCMenuFoundation, _super);
	    function MDCMenuFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCMenuFoundation.defaultAdapter), adapter)) || this;
	        _this.closeAnimationEndTimerId = 0;
	        _this.defaultFocusState = DefaultFocusState.LIST_ROOT;
	        _this.selectedIndex = -1;
	        return _this;
	    }
	    Object.defineProperty(MDCMenuFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$h;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuFoundation, "strings", {
	        get: function () {
	            return strings$i;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuFoundation, "numbers", {
	        get: function () {
	            return numbers$8;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenuFoundation, "defaultAdapter", {
	        /**
	         * @see {@link MDCMenuAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClassToElementAtIndex: function () { return undefined; },
	                removeClassFromElementAtIndex: function () { return undefined; },
	                addAttributeToElementAtIndex: function () { return undefined; },
	                removeAttributeFromElementAtIndex: function () { return undefined; },
	                getAttributeFromElementAtIndex: function () { return null; },
	                elementContainsClass: function () { return false; },
	                closeSurface: function () { return undefined; },
	                getElementIndex: function () { return -1; },
	                notifySelected: function () { return undefined; },
	                getMenuItemCount: function () { return 0; },
	                focusItemAtIndex: function () { return undefined; },
	                focusListRoot: function () { return undefined; },
	                getSelectedSiblingOfItemAtIndex: function () { return -1; },
	                isSelectableItemAtIndex: function () { return false; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCMenuFoundation.prototype.destroy = function () {
	        if (this.closeAnimationEndTimerId) {
	            clearTimeout(this.closeAnimationEndTimerId);
	        }
	        this.adapter.closeSurface();
	    };
	    MDCMenuFoundation.prototype.handleKeydown = function (evt) {
	        var key = evt.key, keyCode = evt.keyCode;
	        var isTab = key === 'Tab' || keyCode === 9;
	        if (isTab) {
	            this.adapter.closeSurface(/** skipRestoreFocus */ true);
	        }
	    };
	    MDCMenuFoundation.prototype.handleItemAction = function (listItem) {
	        var _this = this;
	        var index = this.adapter.getElementIndex(listItem);
	        if (index < 0) {
	            return;
	        }
	        this.adapter.notifySelected({ index: index });
	        var skipRestoreFocus = this.adapter.getAttributeFromElementAtIndex(index, strings$i.SKIP_RESTORE_FOCUS) === 'true';
	        this.adapter.closeSurface(skipRestoreFocus);
	        // Wait for the menu to close before adding/removing classes that affect styles.
	        this.closeAnimationEndTimerId = setTimeout(function () {
	            // Recompute the index in case the menu contents have changed.
	            var recomputedIndex = _this.adapter.getElementIndex(listItem);
	            if (recomputedIndex >= 0 &&
	                _this.adapter.isSelectableItemAtIndex(recomputedIndex)) {
	                _this.setSelectedIndex(recomputedIndex);
	            }
	        }, MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);
	    };
	    MDCMenuFoundation.prototype.handleMenuSurfaceOpened = function () {
	        switch (this.defaultFocusState) {
	            case DefaultFocusState.FIRST_ITEM:
	                this.adapter.focusItemAtIndex(0);
	                break;
	            case DefaultFocusState.LAST_ITEM:
	                this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount() - 1);
	                break;
	            case DefaultFocusState.NONE:
	                // Do nothing.
	                break;
	            default:
	                this.adapter.focusListRoot();
	                break;
	        }
	    };
	    /**
	     * Sets default focus state where the menu should focus every time when menu
	     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by
	     * default.
	     */
	    MDCMenuFoundation.prototype.setDefaultFocusState = function (focusState) {
	        this.defaultFocusState = focusState;
	    };
	    /** @return Index of the currently selected list item within the menu. */
	    MDCMenuFoundation.prototype.getSelectedIndex = function () {
	        return this.selectedIndex;
	    };
	    /**
	     * Selects the list item at `index` within the menu.
	     * @param index Index of list item within the menu.
	     */
	    MDCMenuFoundation.prototype.setSelectedIndex = function (index) {
	        this.validatedIndex(index);
	        if (!this.adapter.isSelectableItemAtIndex(index)) {
	            throw new Error('MDCMenuFoundation: No selection group at specified index.');
	        }
	        var prevSelectedIndex = this.adapter.getSelectedSiblingOfItemAtIndex(index);
	        if (prevSelectedIndex >= 0) {
	            this.adapter.removeAttributeFromElementAtIndex(prevSelectedIndex, strings$i.ARIA_CHECKED_ATTR);
	            this.adapter.removeClassFromElementAtIndex(prevSelectedIndex, cssClasses$h.MENU_SELECTED_LIST_ITEM);
	        }
	        this.adapter.addClassToElementAtIndex(index, cssClasses$h.MENU_SELECTED_LIST_ITEM);
	        this.adapter.addAttributeToElementAtIndex(index, strings$i.ARIA_CHECKED_ATTR, 'true');
	        this.selectedIndex = index;
	    };
	    /**
	     * Sets the enabled state to isEnabled for the menu item at the given index.
	     * @param index Index of the menu item
	     * @param isEnabled The desired enabled state of the menu item.
	     */
	    MDCMenuFoundation.prototype.setEnabled = function (index, isEnabled) {
	        this.validatedIndex(index);
	        if (isEnabled) {
	            this.adapter.removeClassFromElementAtIndex(index, cssClasses$p.LIST_ITEM_DISABLED_CLASS);
	            this.adapter.addAttributeToElementAtIndex(index, strings$i.ARIA_DISABLED_ATTR, 'false');
	        }
	        else {
	            this.adapter.addClassToElementAtIndex(index, cssClasses$p.LIST_ITEM_DISABLED_CLASS);
	            this.adapter.addAttributeToElementAtIndex(index, strings$i.ARIA_DISABLED_ATTR, 'true');
	        }
	    };
	    MDCMenuFoundation.prototype.validatedIndex = function (index) {
	        var menuSize = this.adapter.getMenuItemCount();
	        var isIndexInRange = index >= 0 && index < menuSize;
	        if (!isIndexInRange) {
	            throw new Error('MDCMenuFoundation: No list item at specified index.');
	        }
	    };
	    return MDCMenuFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCMenu = /** @class */ (function (_super) {
	    __extends(MDCMenu, _super);
	    function MDCMenu() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCMenu.attachTo = function (root) {
	        return new MDCMenu(root);
	    };
	    MDCMenu.prototype.initialize = function (menuSurfaceFactory, listFactory) {
	        if (menuSurfaceFactory === void 0) { menuSurfaceFactory = function (el) { return new MDCMenuSurface(el); }; }
	        if (listFactory === void 0) { listFactory = function (el) { return new MDCList(el); }; }
	        this.menuSurfaceFactory = menuSurfaceFactory;
	        this.listFactory = listFactory;
	    };
	    MDCMenu.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.menuSurface = this.menuSurfaceFactory(this.root);
	        var list = this.root.querySelector(strings$i.LIST_SELECTOR);
	        if (list) {
	            this.list = this.listFactory(list);
	            this.list.wrapFocus = true;
	        }
	        else {
	            this.list = null;
	        }
	        this.handleKeydown = function (evt) {
	            _this.foundation.handleKeydown(evt);
	        };
	        this.handleItemAction = function (evt) {
	            _this.foundation.handleItemAction(_this.items[evt.detail.index]);
	        };
	        this.handleMenuSurfaceOpened = function () {
	            _this.foundation.handleMenuSurfaceOpened();
	        };
	        this.menuSurface.listen(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);
	        this.listen('keydown', this.handleKeydown);
	        this.listen(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);
	    };
	    MDCMenu.prototype.destroy = function () {
	        if (this.list) {
	            this.list.destroy();
	        }
	        this.menuSurface.destroy();
	        this.menuSurface.unlisten(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);
	        this.unlisten('keydown', this.handleKeydown);
	        this.unlisten(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);
	        _super.prototype.destroy.call(this);
	    };
	    Object.defineProperty(MDCMenu.prototype, "open", {
	        get: function () {
	            return this.menuSurface.isOpen();
	        },
	        set: function (value) {
	            if (value) {
	                this.menuSurface.open();
	            }
	            else {
	                this.menuSurface.close();
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenu.prototype, "wrapFocus", {
	        get: function () {
	            return this.list ? this.list.wrapFocus : false;
	        },
	        set: function (value) {
	            if (this.list) {
	                this.list.wrapFocus = value;
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenu.prototype, "hasTypeahead", {
	        /**
	         * Sets whether the menu has typeahead functionality.
	         * @param value Whether typeahead is enabled.
	         */
	        set: function (value) {
	            if (this.list) {
	                this.list.hasTypeahead = value;
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenu.prototype, "typeaheadInProgress", {
	        /**
	         * @return Whether typeahead logic is currently matching some user prefix.
	         */
	        get: function () {
	            return this.list ? this.list.typeaheadInProgress : false;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Given the next desired character from the user, adds it to the typeahead
	     * buffer. Then, attempts to find the next option matching the buffer. Wraps
	     * around if at the end of options.
	     *
	     * @param nextChar The next character to add to the prefix buffer.
	     * @param startingIndex The index from which to start matching. Only relevant
	     *     when starting a new match sequence. To start a new match sequence,
	     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer
	     *     to clear after a set interval defined in list foundation. Defaults to
	     *     the currently focused index.
	     * @return The index of the matched item, or -1 if no match.
	     */
	    MDCMenu.prototype.typeaheadMatchItem = function (nextChar, startingIndex) {
	        if (this.list) {
	            return this.list.typeaheadMatchItem(nextChar, startingIndex);
	        }
	        return -1;
	    };
	    /**
	     * Layout the underlying list element in the case of any dynamic updates
	     * to its structure.
	     */
	    MDCMenu.prototype.layout = function () {
	        if (this.list) {
	            this.list.layout();
	        }
	    };
	    Object.defineProperty(MDCMenu.prototype, "items", {
	        /**
	         * Return the items within the menu. Note that this only contains the set of elements within
	         * the items container that are proper list items, and not supplemental / presentational DOM
	         * elements.
	         */
	        get: function () {
	            return this.list ? this.list.listElements : [];
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenu.prototype, "singleSelection", {
	        /**
	         * Turns on/off the underlying list's single selection mode. Used mainly
	         * by select menu.
	         *
	         * @param singleSelection Whether to enable single selection mode.
	         */
	        set: function (singleSelection) {
	            if (this.list) {
	                this.list.singleSelection = singleSelection;
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenu.prototype, "selectedIndex", {
	        /**
	         * Retrieves the selected index. Only applicable to select menus.
	         * @return The selected index, which is a number for single selection and
	         *     radio lists, and an array of numbers for checkbox lists.
	         */
	        get: function () {
	            return this.list ? this.list.selectedIndex : numbers$a.UNSET_INDEX;
	        },
	        /**
	         * Sets the selected index of the list. Only applicable to select menus.
	         * @param index The selected index, which is a number for single selection and
	         *     radio lists, and an array of numbers for checkbox lists.
	         */
	        set: function (index) {
	            if (this.list) {
	                this.list.selectedIndex = index;
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCMenu.prototype, "quickOpen", {
	        set: function (quickOpen) {
	            this.menuSurface.quickOpen = quickOpen;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Sets default focus state where the menu should focus every time when menu
	     * is opened. Focuses the list root (`DefaultFocusState.LIST_ROOT`) element by
	     * default.
	     * @param focusState Default focus state.
	     */
	    MDCMenu.prototype.setDefaultFocusState = function (focusState) {
	        this.foundation.setDefaultFocusState(focusState);
	    };
	    /**
	     * @param corner Default anchor corner alignment of top-left menu corner.
	     */
	    MDCMenu.prototype.setAnchorCorner = function (corner) {
	        this.menuSurface.setAnchorCorner(corner);
	    };
	    MDCMenu.prototype.setAnchorMargin = function (margin) {
	        this.menuSurface.setAnchorMargin(margin);
	    };
	    /**
	     * Sets the list item as the selected row at the specified index.
	     * @param index Index of list item within menu.
	     */
	    MDCMenu.prototype.setSelectedIndex = function (index) {
	        this.foundation.setSelectedIndex(index);
	    };
	    /**
	     * Sets the enabled state to isEnabled for the menu item at the given index.
	     * @param index Index of the menu item
	     * @param isEnabled The desired enabled state of the menu item.
	     */
	    MDCMenu.prototype.setEnabled = function (index, isEnabled) {
	        this.foundation.setEnabled(index, isEnabled);
	    };
	    /**
	     * @return The item within the menu at the index specified.
	     */
	    MDCMenu.prototype.getOptionByIndex = function (index) {
	        var items = this.items;
	        if (index < items.length) {
	            return this.items[index];
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * @param index A menu item's index.
	     * @return The primary text within the menu at the index specified.
	     */
	    MDCMenu.prototype.getPrimaryTextAtIndex = function (index) {
	        var item = this.getOptionByIndex(index);
	        if (item && this.list) {
	            return this.list.getPrimaryText(item) || '';
	        }
	        return '';
	    };
	    MDCMenu.prototype.setFixedPosition = function (isFixed) {
	        this.menuSurface.setFixedPosition(isFixed);
	    };
	    MDCMenu.prototype.setIsHoisted = function (isHoisted) {
	        this.menuSurface.setIsHoisted(isHoisted);
	    };
	    MDCMenu.prototype.setAbsolutePosition = function (x, y) {
	        this.menuSurface.setAbsolutePosition(x, y);
	    };
	    /**
	     * Sets the element that the menu-surface is anchored to.
	     */
	    MDCMenu.prototype.setAnchorElement = function (element) {
	        this.menuSurface.anchorElement = element;
	    };
	    MDCMenu.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            addClassToElementAtIndex: function (index, className) {
	                var list = _this.items;
	                list[index].classList.add(className);
	            },
	            removeClassFromElementAtIndex: function (index, className) {
	                var list = _this.items;
	                list[index].classList.remove(className);
	            },
	            addAttributeToElementAtIndex: function (index, attr, value) {
	                var list = _this.items;
	                list[index].setAttribute(attr, value);
	            },
	            removeAttributeFromElementAtIndex: function (index, attr) {
	                var list = _this.items;
	                list[index].removeAttribute(attr);
	            },
	            getAttributeFromElementAtIndex: function (index, attr) {
	                var list = _this.items;
	                return list[index].getAttribute(attr);
	            },
	            elementContainsClass: function (element, className) {
	                return element.classList.contains(className);
	            },
	            closeSurface: function (skipRestoreFocus) {
	                _this.menuSurface.close(skipRestoreFocus);
	            },
	            getElementIndex: function (element) { return _this.items.indexOf(element); },
	            notifySelected: function (evtData) {
	                _this.emit(strings$i.SELECTED_EVENT, {
	                    index: evtData.index,
	                    item: _this.items[evtData.index],
	                });
	            },
	            getMenuItemCount: function () { return _this.items.length; },
	            focusItemAtIndex: function (index) {
	                _this.items[index].focus();
	            },
	            focusListRoot: function () {
	                _this.root.querySelector(strings$i.LIST_SELECTOR).focus();
	            },
	            isSelectableItemAtIndex: function (index) {
	                return !!closest(_this.items[index], "." + cssClasses$h.MENU_SELECTION_GROUP);
	            },
	            getSelectedSiblingOfItemAtIndex: function (index) {
	                var selectionGroupEl = closest(_this.items[index], "." + cssClasses$h.MENU_SELECTION_GROUP);
	                var selectedItemEl = selectionGroupEl.querySelector("." + cssClasses$h.MENU_SELECTED_LIST_ITEM);
	                return selectedItemEl ? _this.items.indexOf(selectedItemEl) : -1;
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCMenuFoundation(adapter);
	    };
	    return MDCMenu;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$g = {
		__proto__: null,
		get Corner () { return Corner; },
		MDCMenu: MDCMenu,
		cssClasses: cssClasses$h,
		strings: strings$i,
		numbers: numbers$8,
		get DefaultFocusState () { return DefaultFocusState; },
		MDCMenuFoundation: MDCMenuFoundation
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$h = {
	    NOTCH_ELEMENT_SELECTOR: '.mdc-notched-outline__notch',
	};
	var numbers$7 = {
	    // This should stay in sync with $mdc-notched-outline-padding * 2.
	    NOTCH_ELEMENT_PADDING: 8,
	};
	var cssClasses$g = {
	    NO_LABEL: 'mdc-notched-outline--no-label',
	    OUTLINE_NOTCHED: 'mdc-notched-outline--notched',
	    OUTLINE_UPGRADED: 'mdc-notched-outline--upgraded',
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCNotchedOutlineFoundation = /** @class */ (function (_super) {
	    __extends(MDCNotchedOutlineFoundation, _super);
	    function MDCNotchedOutlineFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCNotchedOutlineFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCNotchedOutlineFoundation, "strings", {
	        get: function () {
	            return strings$h;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCNotchedOutlineFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$g;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCNotchedOutlineFoundation, "numbers", {
	        get: function () {
	            return numbers$7;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCNotchedOutlineFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                setNotchWidthProperty: function () { return undefined; },
	                removeNotchWidthProperty: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Adds the outline notched selector and updates the notch width calculated based off of notchWidth.
	     */
	    MDCNotchedOutlineFoundation.prototype.notch = function (notchWidth) {
	        var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
	        if (notchWidth > 0) {
	            notchWidth += numbers$7.NOTCH_ELEMENT_PADDING; // Add padding from left/right.
	        }
	        this.adapter.setNotchWidthProperty(notchWidth);
	        this.adapter.addClass(OUTLINE_NOTCHED);
	    };
	    /**
	     * Removes notched outline selector to close the notch in the outline.
	     */
	    MDCNotchedOutlineFoundation.prototype.closeNotch = function () {
	        var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;
	        this.adapter.removeClass(OUTLINE_NOTCHED);
	        this.adapter.removeNotchWidthProperty();
	    };
	    return MDCNotchedOutlineFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCNotchedOutline = /** @class */ (function (_super) {
	    __extends(MDCNotchedOutline, _super);
	    function MDCNotchedOutline() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCNotchedOutline.attachTo = function (root) {
	        return new MDCNotchedOutline(root);
	    };
	    MDCNotchedOutline.prototype.initialSyncWithDOM = function () {
	        this.notchElement =
	            this.root.querySelector(strings$h.NOTCH_ELEMENT_SELECTOR);
	        var label = this.root.querySelector('.' + MDCFloatingLabelFoundation.cssClasses.ROOT);
	        if (label) {
	            label.style.transitionDuration = '0s';
	            this.root.classList.add(cssClasses$g.OUTLINE_UPGRADED);
	            requestAnimationFrame(function () {
	                label.style.transitionDuration = '';
	            });
	        }
	        else {
	            this.root.classList.add(cssClasses$g.NO_LABEL);
	        }
	    };
	    /**
	     * Updates classes and styles to open the notch to the specified width.
	     * @param notchWidth The notch width in the outline.
	     */
	    MDCNotchedOutline.prototype.notch = function (notchWidth) {
	        this.foundation.notch(notchWidth);
	    };
	    /**
	     * Updates classes and styles to close the notch.
	     */
	    MDCNotchedOutline.prototype.closeNotch = function () {
	        this.foundation.closeNotch();
	    };
	    MDCNotchedOutline.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            setNotchWidthProperty: function (width) {
	                _this.notchElement.style.setProperty('width', width + 'px');
	            },
	            removeNotchWidthProperty: function () {
	                _this.notchElement.style.removeProperty('width');
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCNotchedOutlineFoundation(adapter);
	    };
	    return MDCNotchedOutline;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$f = {
		__proto__: null,
		MDCNotchedOutline: MDCNotchedOutline,
		cssClasses: cssClasses$g,
		numbers: numbers$7,
		strings: strings$h,
		MDCNotchedOutlineFoundation: MDCNotchedOutlineFoundation
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$g = {
	    NATIVE_CONTROL_SELECTOR: '.mdc-radio__native-control',
	};
	var cssClasses$f = {
	    DISABLED: 'mdc-radio--disabled',
	    ROOT: 'mdc-radio',
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCRadioFoundation = /** @class */ (function (_super) {
	    __extends(MDCRadioFoundation, _super);
	    function MDCRadioFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCRadioFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCRadioFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$f;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCRadioFoundation, "strings", {
	        get: function () {
	            return strings$g;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCRadioFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                setNativeControlDisabled: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCRadioFoundation.prototype.setDisabled = function (disabled) {
	        var DISABLED = MDCRadioFoundation.cssClasses.DISABLED;
	        this.adapter.setNativeControlDisabled(disabled);
	        if (disabled) {
	            this.adapter.addClass(DISABLED);
	        }
	        else {
	            this.adapter.removeClass(DISABLED);
	        }
	    };
	    return MDCRadioFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCRadio = /** @class */ (function (_super) {
	    __extends(MDCRadio, _super);
	    function MDCRadio() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.rippleSurface = _this.createRipple();
	        return _this;
	    }
	    MDCRadio.attachTo = function (root) {
	        return new MDCRadio(root);
	    };
	    Object.defineProperty(MDCRadio.prototype, "checked", {
	        get: function () {
	            return this.nativeControl.checked;
	        },
	        set: function (checked) {
	            this.nativeControl.checked = checked;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCRadio.prototype, "disabled", {
	        get: function () {
	            return this.nativeControl.disabled;
	        },
	        set: function (disabled) {
	            this.foundation.setDisabled(disabled);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCRadio.prototype, "value", {
	        get: function () {
	            return this.nativeControl.value;
	        },
	        set: function (value) {
	            this.nativeControl.value = value;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCRadio.prototype, "ripple", {
	        get: function () {
	            return this.rippleSurface;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCRadio.prototype.destroy = function () {
	        this.rippleSurface.destroy();
	        _super.prototype.destroy.call(this);
	    };
	    MDCRadio.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            setNativeControlDisabled: function (disabled) { return _this.nativeControl.disabled =
	                disabled; },
	        };
	        return new MDCRadioFoundation(adapter);
	    };
	    MDCRadio.prototype.createRipple = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { registerInteractionHandler: function (evtType, handler) {
	                _this.nativeControl.addEventListener(evtType, handler, applyPassive());
	            }, deregisterInteractionHandler: function (evtType, handler) {
	                _this.nativeControl.removeEventListener(evtType, handler, applyPassive());
	            }, 
	            // Radio buttons technically go "active" whenever there is *any* keyboard
	            // interaction. This is not the UI we desire.
	            isSurfaceActive: function () { return false; }, isUnbounded: function () { return true; } });
	        // tslint:enable:object-literal-sort-keys
	        return new MDCRipple(this.root, new MDCRippleFoundation(adapter));
	    };
	    Object.defineProperty(MDCRadio.prototype, "nativeControl", {
	        get: function () {
	            var NATIVE_CONTROL_SELECTOR = MDCRadioFoundation.strings.NATIVE_CONTROL_SELECTOR;
	            var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);
	            if (!el) {
	                throw new Error("Radio component requires a " + NATIVE_CONTROL_SELECTOR + " element");
	            }
	            return el;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return MDCRadio;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$e = {
		__proto__: null,
		MDCRadio: MDCRadio,
		strings: strings$g,
		cssClasses: cssClasses$f,
		MDCRadioFoundation: MDCRadioFoundation
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$d = {
		__proto__: null,
		util: util$4,
		MDCRipple: MDCRipple,
		cssClasses: cssClasses$x,
		strings: strings$z,
		numbers: numbers$d,
		MDCRippleFoundation: MDCRippleFoundation
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Selectors used by segmented-button
	 */
	var selectors = {
	    SEGMENT: '.mdc-segmented-button__segment'
	};
	/**
	 * Events received or emitted by segmented-button
	 */
	var events$3 = {
	    SELECTED: 'selected',
	    CHANGE: 'change'
	};
	/**
	 * Style classes for segmented-button
	 */
	var cssClasses$e = {
	    SINGLE_SELECT: 'mdc-segmented-button--single-select'
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCSegmentedButtonFoundation = /** @class */ (function (_super) {
	    __extends(MDCSegmentedButtonFoundation, _super);
	    function MDCSegmentedButtonFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCSegmentedButtonFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCSegmentedButtonFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                hasClass: function () { return false; }, getSegments: function () { return []; },
	                selectSegment: function () { return undefined; },
	                unselectSegment: function () { return undefined; },
	                notifySelectedChange: function () { return undefined; }
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Sets identified child segment to be selected
	     *
	     * @param indexOrSegmentId Number index or string segmentId that identifies
	     * child segment
	     */
	    MDCSegmentedButtonFoundation.prototype.selectSegment = function (indexOrSegmentId) {
	        this.adapter.selectSegment(indexOrSegmentId);
	    };
	    /**
	     * Sets identified child segment to be not selected
	     *
	     * @param indexOrSegmentId Number index or string segmentId that identifies
	     * child segment
	     */
	    MDCSegmentedButtonFoundation.prototype.unselectSegment = function (indexOrSegmentId) {
	        this.adapter.unselectSegment(indexOrSegmentId);
	    };
	    /**
	     * @return Returns currently selected child segments as readonly list of
	     * SegmentDetails
	     */
	    MDCSegmentedButtonFoundation.prototype.getSelectedSegments = function () {
	        return this.adapter.getSegments().filter(function (segmentDetail) { return segmentDetail.selected; });
	    };
	    /**
	     * @param indexOrSegmentId Number index or string segmentId that identifies
	     * child segment
	     * @return Returns true if identified child segment is currently selected,
	     * otherwise returns false
	     */
	    MDCSegmentedButtonFoundation.prototype.isSegmentSelected = function (indexOrSegmentId) {
	        return this.adapter.getSegments().some(function (segmentDetail) { return (segmentDetail.index === indexOrSegmentId ||
	            segmentDetail.segmentId === indexOrSegmentId) &&
	            segmentDetail.selected; });
	    };
	    /**
	     * @return Returns true if segmented button is single select, otherwise
	     * returns false
	     */
	    MDCSegmentedButtonFoundation.prototype.isSingleSelect = function () {
	        return this.adapter.hasClass(cssClasses$e.SINGLE_SELECT);
	    };
	    /**
	     * Called when child segment's selected status may have changed. If segmented
	     * button is single select, unselects all child segments other than identified
	     * child segment. Finally, emits event to client.
	     *
	     * @param detail Child segment affected represented as SegmentDetail
	     * @event change With detail - SegmentDetail
	     */
	    MDCSegmentedButtonFoundation.prototype.handleSelected = function (detail) {
	        if (this.isSingleSelect()) {
	            this.unselectPrevSelected(detail.index);
	        }
	        this.adapter.notifySelectedChange(detail);
	    };
	    /**
	     * Sets all child segments to be not selected except for child segment
	     * identified by index
	     *
	     * @param index Index of child segment to not unselect
	     */
	    MDCSegmentedButtonFoundation.prototype.unselectPrevSelected = function (index) {
	        var e_1, _a;
	        try {
	            for (var _b = __values(this.getSelectedSegments()), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var selectedSegment = _c.value;
	                if (selectedSegment.index !== index) {
	                    this.unselectSegment(selectedSegment.index);
	                }
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    return MDCSegmentedButtonFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Boolean strings for segment
	 */
	var booleans = {
	    TRUE: 'true',
	    FALSE: 'false'
	};
	/**
	 * Attributes referenced by segment
	 */
	var attributes$2 = {
	    ARIA_CHECKED: 'aria-checked',
	    ARIA_PRESSED: 'aria-pressed',
	    DATA_SEGMENT_ID: 'data-segment-id'
	};
	/**
	 * Events received or emitted by segment
	 */
	var events$2 = {
	    CLICK: 'click',
	    SELECTED: 'selected'
	};
	/**
	 * Style classes for segment
	 */
	var cssClasses$d = {
	    SELECTED: 'mdc-segmented-button__segment--selected'
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var emptyClientRect = {
	    bottom: 0,
	    height: 0,
	    left: 0,
	    right: 0,
	    top: 0,
	    width: 0,
	};
	var MDCSegmentedButtonSegmentFoundation = /** @class */ (function (_super) {
	    __extends(MDCSegmentedButtonSegmentFoundation, _super);
	    function MDCSegmentedButtonSegmentFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCSegmentedButtonSegmentFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCSegmentedButtonSegmentFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                isSingleSelect: function () { return false; }, getAttr: function () { return ''; }, setAttr: function () { return undefined; },
	                addClass: function () { return undefined; }, removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                notifySelectedChange: function () { return undefined; },
	                getRootBoundingClientRect: function () { return emptyClientRect; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * @return Returns true if segment is currently selected, otherwise returns
	     * false
	     */
	    MDCSegmentedButtonSegmentFoundation.prototype.isSelected = function () {
	        return this.adapter.hasClass(cssClasses$d.SELECTED);
	    };
	    /**
	     * Sets segment to be selected
	     */
	    MDCSegmentedButtonSegmentFoundation.prototype.setSelected = function () {
	        this.adapter.addClass(cssClasses$d.SELECTED);
	        this.setAriaAttr(booleans.TRUE);
	    };
	    /**
	     * Sets segment to be not selected
	     */
	    MDCSegmentedButtonSegmentFoundation.prototype.setUnselected = function () {
	        this.adapter.removeClass(cssClasses$d.SELECTED);
	        this.setAriaAttr(booleans.FALSE);
	    };
	    /**
	     * @return Returns segment's segmentId if it was set by client
	     */
	    MDCSegmentedButtonSegmentFoundation.prototype.getSegmentId = function () {
	        var _a;
	        return (_a = this.adapter.getAttr(attributes$2.DATA_SEGMENT_ID)) !== null && _a !== void 0 ? _a : undefined;
	    };
	    /**
	     * Called when segment is clicked. If the wrapping segmented button is single
	     * select, doesn't allow segment to be set to not selected. Otherwise, toggles
	     * segment's selected status. Finally, emits event to wrapping segmented
	     * button.
	     *
	     * @event selected With detail - SegmentDetail
	     */
	    MDCSegmentedButtonSegmentFoundation.prototype.handleClick = function () {
	        if (this.adapter.isSingleSelect()) {
	            this.setSelected();
	        }
	        else {
	            this.toggleSelection();
	        }
	        this.adapter.notifySelectedChange(this.isSelected());
	    };
	    /**
	     * @return Returns bounding rectangle for ripple effect
	     */
	    MDCSegmentedButtonSegmentFoundation.prototype.getDimensions = function () {
	        return this.adapter.getRootBoundingClientRect();
	    };
	    /**
	     * Sets segment from not selected to selected, or selected to not selected
	     */
	    MDCSegmentedButtonSegmentFoundation.prototype.toggleSelection = function () {
	        if (this.isSelected()) {
	            this.setUnselected();
	        }
	        else {
	            this.setSelected();
	        }
	    };
	    /**
	     * Sets appropriate aria attribute, based on wrapping segmented button's
	     * single selected value, to new value
	     *
	     * @param value Value that represents selected status
	     */
	    MDCSegmentedButtonSegmentFoundation.prototype.setAriaAttr = function (value) {
	        if (this.adapter.isSingleSelect()) {
	            this.adapter.setAttr(attributes$2.ARIA_CHECKED, value);
	        }
	        else {
	            this.adapter.setAttr(attributes$2.ARIA_PRESSED, value);
	        }
	    };
	    return MDCSegmentedButtonSegmentFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Implementation of MDCSegmentedButtonSegmentFoundation
	 */
	var MDCSegmentedButtonSegment = /** @class */ (function (_super) {
	    __extends(MDCSegmentedButtonSegment, _super);
	    function MDCSegmentedButtonSegment() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    Object.defineProperty(MDCSegmentedButtonSegment.prototype, "ripple", {
	        get: function () {
	            return this.rippleComponent;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCSegmentedButtonSegment.attachTo = function (root) {
	        return new MDCSegmentedButtonSegment(root);
	    };
	    MDCSegmentedButtonSegment.prototype.initialize = function (rippleFactory) {
	        var _this = this;
	        if (rippleFactory === void 0) { rippleFactory = function (el, foundation) {
	            return new MDCRipple(el, foundation);
	        }; }
	        var rippleAdapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function () { return _this.foundation.getDimensions(); } });
	        this.rippleComponent =
	            rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
	    };
	    MDCSegmentedButtonSegment.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.handleClick = function () {
	            _this.foundation.handleClick();
	        };
	        this.listen(events$2.CLICK, this.handleClick);
	    };
	    MDCSegmentedButtonSegment.prototype.destroy = function () {
	        this.ripple.destroy();
	        this.unlisten(events$2.CLICK, this.handleClick);
	        _super.prototype.destroy.call(this);
	    };
	    MDCSegmentedButtonSegment.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take
	        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
	        // methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            isSingleSelect: function () {
	                return _this.isSingleSelect;
	            },
	            getAttr: function (attrName) {
	                return _this.root.getAttribute(attrName);
	            },
	            setAttr: function (attrName, value) {
	                _this.root.setAttribute(attrName, value);
	            },
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            hasClass: function (className) {
	                return _this.root.classList.contains(className);
	            },
	            notifySelectedChange: function (selected) {
	                _this.emit(events$2.SELECTED, {
	                    index: _this.index,
	                    selected: selected,
	                    segmentId: _this.getSegmentId()
	                }, true /* shouldBubble */);
	            },
	            getRootBoundingClientRect: function () {
	                return _this.root.getBoundingClientRect();
	            }
	        };
	        return new MDCSegmentedButtonSegmentFoundation(adapter);
	    };
	    /**
	     * Sets segment's index value
	     *
	     * @param index Segment's index within wrapping segmented button
	     */
	    MDCSegmentedButtonSegment.prototype.setIndex = function (index) {
	        this.index = index;
	    };
	    /**
	     * Sets segment's isSingleSelect value
	     *
	     * @param isSingleSelect True if wrapping segmented button is single select
	     */
	    MDCSegmentedButtonSegment.prototype.setIsSingleSelect = function (isSingleSelect) {
	        this.isSingleSelect = isSingleSelect;
	    };
	    /**
	     * @return Returns true if segment is currently selected, otherwise returns
	     * false
	     */
	    MDCSegmentedButtonSegment.prototype.isSelected = function () {
	        return this.foundation.isSelected();
	    };
	    /**
	     * Sets segment to be selected
	     */
	    MDCSegmentedButtonSegment.prototype.setSelected = function () {
	        this.foundation.setSelected();
	    };
	    /**
	     * Sets segment to be not selected
	     */
	    MDCSegmentedButtonSegment.prototype.setUnselected = function () {
	        this.foundation.setUnselected();
	    };
	    /**
	     * @return Returns segment's segmentId if it was set by client
	     */
	    MDCSegmentedButtonSegment.prototype.getSegmentId = function () {
	        return this.foundation.getSegmentId();
	    };
	    return MDCSegmentedButtonSegment;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCSegmentedButton = /** @class */ (function (_super) {
	    __extends(MDCSegmentedButton, _super);
	    function MDCSegmentedButton() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCSegmentedButton.attachTo = function (root) {
	        return new MDCSegmentedButton(root);
	    };
	    Object.defineProperty(MDCSegmentedButton.prototype, "segments", {
	        get: function () {
	            return this.segmentsList.slice();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    // initialSyncWithDOM
	    MDCSegmentedButton.prototype.initialize = function (segmentFactory) {
	        if (segmentFactory === void 0) { segmentFactory = function (el) {
	            return new MDCSegmentedButtonSegment(el);
	        }; }
	        this.segmentFactory = segmentFactory;
	        this.segmentsList = this.instantiateSegments(this.segmentFactory);
	    };
	    /**
	     * @param segmentFactory Factory to create new child segments
	     * @return Returns list of child segments found in DOM
	     */
	    MDCSegmentedButton.prototype.instantiateSegments = function (segmentFactory) {
	        var segmentElements = [].slice.call(this.root.querySelectorAll(selectors.SEGMENT));
	        return segmentElements.map(function (el) { return segmentFactory(el); });
	    };
	    MDCSegmentedButton.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.handleSelected = function (event) {
	            _this.foundation.handleSelected(event.detail);
	        };
	        this.listen(events$3.SELECTED, this.handleSelected);
	        var isSingleSelect = this.foundation.isSingleSelect();
	        for (var i = 0; i < this.segmentsList.length; i++) {
	            var segment = this.segmentsList[i];
	            segment.setIndex(i);
	            segment.setIsSingleSelect(isSingleSelect);
	        }
	        var selectedSegments = this.segmentsList.filter(function (segment) { return segment.isSelected(); });
	        if (isSingleSelect && selectedSegments.length === 0 &&
	            this.segmentsList.length > 0) {
	            throw new Error('No segment selected in singleSelect mdc-segmented-button');
	        }
	        else if (isSingleSelect && selectedSegments.length > 1) {
	            throw new Error('Multiple segments selected in singleSelect mdc-segmented-button');
	        }
	    };
	    MDCSegmentedButton.prototype.destroy = function () {
	        var e_1, _a;
	        try {
	            for (var _b = __values(this.segmentsList), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var segment = _c.value;
	                segment.destroy();
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        this.unlisten(events$3.SELECTED, this.handleSelected);
	        _super.prototype.destroy.call(this);
	    };
	    MDCSegmentedButton.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        var adapter = {
	            hasClass: function (className) {
	                return _this.root.classList.contains(className);
	            },
	            getSegments: function () {
	                return _this.mappedSegments();
	            },
	            selectSegment: function (indexOrSegmentId) {
	                var segmentDetail = _this.mappedSegments().find(function (detail) { return detail.index === indexOrSegmentId ||
	                    detail.segmentId === indexOrSegmentId; });
	                if (segmentDetail) {
	                    _this.segmentsList[segmentDetail.index].setSelected();
	                }
	            },
	            unselectSegment: function (indexOrSegmentId) {
	                var segmentDetail = _this.mappedSegments().find(function (detail) { return detail.index === indexOrSegmentId ||
	                    detail.segmentId === indexOrSegmentId; });
	                if (segmentDetail) {
	                    _this.segmentsList[segmentDetail.index].setUnselected();
	                }
	            },
	            notifySelectedChange: function (detail) {
	                _this.emit(events$3.CHANGE, detail, true /* shouldBubble */);
	            }
	        };
	        return new MDCSegmentedButtonFoundation(adapter);
	    };
	    /**
	     * @return Returns readonly list of selected child segments as SegmentDetails
	     */
	    MDCSegmentedButton.prototype.getSelectedSegments = function () {
	        return this.foundation.getSelectedSegments();
	    };
	    /**
	     * Sets identified segment to be selected
	     *
	     * @param indexOrSegmentId Number index or string segmentId that identifies
	     * child segment
	     */
	    MDCSegmentedButton.prototype.selectSegment = function (indexOrSegmentId) {
	        this.foundation.selectSegment(indexOrSegmentId);
	    };
	    /**
	     * Sets identified segment to be not selected
	     *
	     * @param indexOrSegmentId Number index or string segmentId that identifies
	     * child segment
	     */
	    MDCSegmentedButton.prototype.unselectSegment = function (indexOrSegmentId) {
	        this.foundation.unselectSegment(indexOrSegmentId);
	    };
	    /**
	     * @param indexOrSegmentId Number index or string segmentId that identifies
	     * child segment
	     * @return Returns true if identified child segment is currently selected,
	     * otherwise returns false
	     */
	    MDCSegmentedButton.prototype.isSegmentSelected = function (indexOrSegmentId) {
	        return this.foundation.isSegmentSelected(indexOrSegmentId);
	    };
	    /**
	     * @return Returns child segments mapped to readonly SegmentDetail list
	     */
	    MDCSegmentedButton.prototype.mappedSegments = function () {
	        return this.segmentsList.map(function (segment, index) {
	            return {
	                index: index,
	                selected: segment.isSelected(),
	                segmentId: segment.getSegmentId()
	            };
	        });
	    };
	    return MDCSegmentedButton;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$c = {
		__proto__: null,
		MDCSegmentedButtonFoundation: MDCSegmentedButtonFoundation,
		MDCSegmentedButton: MDCSegmentedButton,
		MDCSegmentedButtonSegmentFoundation: MDCSegmentedButtonSegmentFoundation,
		MDCSegmentedButtonSegment: MDCSegmentedButtonSegment
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$c = {
	    ACTIVATED: 'mdc-select--activated',
	    DISABLED: 'mdc-select--disabled',
	    FOCUSED: 'mdc-select--focused',
	    INVALID: 'mdc-select--invalid',
	    MENU_INVALID: 'mdc-select__menu--invalid',
	    OUTLINED: 'mdc-select--outlined',
	    REQUIRED: 'mdc-select--required',
	    ROOT: 'mdc-select',
	    WITH_LEADING_ICON: 'mdc-select--with-leading-icon',
	};
	var strings$f = {
	    ARIA_CONTROLS: 'aria-controls',
	    ARIA_DESCRIBEDBY: 'aria-describedby',
	    ARIA_SELECTED_ATTR: 'aria-selected',
	    CHANGE_EVENT: 'MDCSelect:change',
	    HIDDEN_INPUT_SELECTOR: 'input[type="hidden"]',
	    LABEL_SELECTOR: '.mdc-floating-label',
	    LEADING_ICON_SELECTOR: '.mdc-select__icon',
	    LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
	    MENU_SELECTOR: '.mdc-select__menu',
	    OUTLINE_SELECTOR: '.mdc-notched-outline',
	    SELECTED_TEXT_SELECTOR: '.mdc-select__selected-text',
	    SELECT_ANCHOR_SELECTOR: '.mdc-select__anchor',
	    VALUE_ATTR: 'data-value',
	};
	var numbers$6 = {
	    LABEL_SCALE: 0.75,
	    UNSET_INDEX: -1,
	    CLICK_DEBOUNCE_TIMEOUT_MS: 330,
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCSelectFoundation = /** @class */ (function (_super) {
	    __extends(MDCSelectFoundation, _super);
	    /* istanbul ignore next: optional argument is not a branch statement */
	    /**
	     * @param adapter
	     * @param foundationMap Map from subcomponent names to their subfoundations.
	     */
	    function MDCSelectFoundation(adapter, foundationMap) {
	        if (foundationMap === void 0) { foundationMap = {}; }
	        var _this = _super.call(this, __assign(__assign({}, MDCSelectFoundation.defaultAdapter), adapter)) || this;
	        // Disabled state
	        _this.disabled = false;
	        // isMenuOpen is used to track the state of the menu by listening to the
	        // MDCMenuSurface:closed event For reference, menu.open will return false if
	        // the menu is still closing, but isMenuOpen returns false only after the menu
	        // has closed
	        _this.isMenuOpen = false;
	        // By default, select is invalid if it is required but no value is selected.
	        _this.useDefaultValidation = true;
	        _this.customValidity = true;
	        _this.lastSelectedIndex = numbers$6.UNSET_INDEX;
	        _this.clickDebounceTimeout = 0;
	        _this.recentlyClicked = false;
	        _this.leadingIcon = foundationMap.leadingIcon;
	        _this.helperText = foundationMap.helperText;
	        return _this;
	    }
	    Object.defineProperty(MDCSelectFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$c;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelectFoundation, "numbers", {
	        get: function () {
	            return numbers$6;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelectFoundation, "strings", {
	        get: function () {
	            return strings$f;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelectFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCSelectAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                activateBottomLine: function () { return undefined; },
	                deactivateBottomLine: function () { return undefined; },
	                getSelectedIndex: function () { return -1; },
	                setSelectedIndex: function () { return undefined; },
	                hasLabel: function () { return false; },
	                floatLabel: function () { return undefined; },
	                getLabelWidth: function () { return 0; },
	                setLabelRequired: function () { return undefined; },
	                hasOutline: function () { return false; },
	                notchOutline: function () { return undefined; },
	                closeOutline: function () { return undefined; },
	                setRippleCenter: function () { return undefined; },
	                notifyChange: function () { return undefined; },
	                setSelectedText: function () { return undefined; },
	                isSelectAnchorFocused: function () { return false; },
	                getSelectAnchorAttr: function () { return ''; },
	                setSelectAnchorAttr: function () { return undefined; },
	                removeSelectAnchorAttr: function () { return undefined; },
	                addMenuClass: function () { return undefined; },
	                removeMenuClass: function () { return undefined; },
	                openMenu: function () { return undefined; },
	                closeMenu: function () { return undefined; },
	                getAnchorElement: function () { return null; },
	                setMenuAnchorElement: function () { return undefined; },
	                setMenuAnchorCorner: function () { return undefined; },
	                setMenuWrapFocus: function () { return undefined; },
	                focusMenuItemAtIndex: function () { return undefined; },
	                getMenuItemCount: function () { return 0; },
	                getMenuItemValues: function () { return []; },
	                getMenuItemTextAtIndex: function () { return ''; },
	                isTypeaheadInProgress: function () { return false; },
	                typeaheadMatchItem: function () { return -1; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /** Returns the index of the currently selected menu item, or -1 if none. */
	    MDCSelectFoundation.prototype.getSelectedIndex = function () {
	        return this.adapter.getSelectedIndex();
	    };
	    MDCSelectFoundation.prototype.setSelectedIndex = function (index, closeMenu, skipNotify) {
	        if (closeMenu === void 0) { closeMenu = false; }
	        if (skipNotify === void 0) { skipNotify = false; }
	        if (index >= this.adapter.getMenuItemCount()) {
	            return;
	        }
	        if (index === numbers$6.UNSET_INDEX) {
	            this.adapter.setSelectedText('');
	        }
	        else {
	            this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index).trim());
	        }
	        this.adapter.setSelectedIndex(index);
	        if (closeMenu) {
	            this.adapter.closeMenu();
	        }
	        if (!skipNotify && this.lastSelectedIndex !== index) {
	            this.handleChange();
	        }
	        this.lastSelectedIndex = index;
	    };
	    MDCSelectFoundation.prototype.setValue = function (value, skipNotify) {
	        if (skipNotify === void 0) { skipNotify = false; }
	        var index = this.adapter.getMenuItemValues().indexOf(value);
	        this.setSelectedIndex(index, /** closeMenu */ false, skipNotify);
	    };
	    MDCSelectFoundation.prototype.getValue = function () {
	        var index = this.adapter.getSelectedIndex();
	        var menuItemValues = this.adapter.getMenuItemValues();
	        return index !== numbers$6.UNSET_INDEX ? menuItemValues[index] : '';
	    };
	    MDCSelectFoundation.prototype.getDisabled = function () {
	        return this.disabled;
	    };
	    MDCSelectFoundation.prototype.setDisabled = function (isDisabled) {
	        this.disabled = isDisabled;
	        if (this.disabled) {
	            this.adapter.addClass(cssClasses$c.DISABLED);
	            this.adapter.closeMenu();
	        }
	        else {
	            this.adapter.removeClass(cssClasses$c.DISABLED);
	        }
	        if (this.leadingIcon) {
	            this.leadingIcon.setDisabled(this.disabled);
	        }
	        if (this.disabled) {
	            // Prevent click events from focusing select. Simply pointer-events: none
	            // is not enough since screenreader clicks may bypass this.
	            this.adapter.removeSelectAnchorAttr('tabindex');
	        }
	        else {
	            this.adapter.setSelectAnchorAttr('tabindex', '0');
	        }
	        this.adapter.setSelectAnchorAttr('aria-disabled', this.disabled.toString());
	    };
	    /** Opens the menu. */
	    MDCSelectFoundation.prototype.openMenu = function () {
	        this.adapter.addClass(cssClasses$c.ACTIVATED);
	        this.adapter.openMenu();
	        this.isMenuOpen = true;
	        this.adapter.setSelectAnchorAttr('aria-expanded', 'true');
	    };
	    /**
	     * @param content Sets the content of the helper text.
	     */
	    MDCSelectFoundation.prototype.setHelperTextContent = function (content) {
	        if (this.helperText) {
	            this.helperText.setContent(content);
	        }
	    };
	    /**
	     * Re-calculates if the notched outline should be notched and if the label
	     * should float.
	     */
	    MDCSelectFoundation.prototype.layout = function () {
	        if (this.adapter.hasLabel()) {
	            var optionHasValue = this.getValue().length > 0;
	            var isFocused = this.adapter.hasClass(cssClasses$c.FOCUSED);
	            var shouldFloatAndNotch = optionHasValue || isFocused;
	            var isRequired = this.adapter.hasClass(cssClasses$c.REQUIRED);
	            this.notchOutline(shouldFloatAndNotch);
	            this.adapter.floatLabel(shouldFloatAndNotch);
	            this.adapter.setLabelRequired(isRequired);
	        }
	    };
	    /**
	     * Synchronizes the list of options with the state of the foundation. Call
	     * this whenever menu options are dynamically updated.
	     */
	    MDCSelectFoundation.prototype.layoutOptions = function () {
	        var menuItemValues = this.adapter.getMenuItemValues();
	        var selectedIndex = menuItemValues.indexOf(this.getValue());
	        this.setSelectedIndex(selectedIndex, /** closeMenu */ false, /** skipNotify */ true);
	    };
	    MDCSelectFoundation.prototype.handleMenuOpened = function () {
	        if (this.adapter.getMenuItemValues().length === 0) {
	            return;
	        }
	        // Menu should open to the last selected element, should open to first menu item otherwise.
	        var selectedIndex = this.getSelectedIndex();
	        var focusItemIndex = selectedIndex >= 0 ? selectedIndex : 0;
	        this.adapter.focusMenuItemAtIndex(focusItemIndex);
	    };
	    MDCSelectFoundation.prototype.handleMenuClosing = function () {
	        this.adapter.setSelectAnchorAttr('aria-expanded', 'false');
	    };
	    MDCSelectFoundation.prototype.handleMenuClosed = function () {
	        this.adapter.removeClass(cssClasses$c.ACTIVATED);
	        this.isMenuOpen = false;
	        // Unfocus the select if menu is closed without a selection
	        if (!this.adapter.isSelectAnchorFocused()) {
	            this.blur();
	        }
	    };
	    /**
	     * Handles value changes, via change event or programmatic updates.
	     */
	    MDCSelectFoundation.prototype.handleChange = function () {
	        this.layout();
	        this.adapter.notifyChange(this.getValue());
	        var isRequired = this.adapter.hasClass(cssClasses$c.REQUIRED);
	        if (isRequired && this.useDefaultValidation) {
	            this.setValid(this.isValid());
	        }
	    };
	    MDCSelectFoundation.prototype.handleMenuItemAction = function (index) {
	        this.setSelectedIndex(index, /** closeMenu */ true);
	    };
	    /**
	     * Handles focus events from select element.
	     */
	    MDCSelectFoundation.prototype.handleFocus = function () {
	        this.adapter.addClass(cssClasses$c.FOCUSED);
	        this.layout();
	        this.adapter.activateBottomLine();
	    };
	    /**
	     * Handles blur events from select element.
	     */
	    MDCSelectFoundation.prototype.handleBlur = function () {
	        if (this.isMenuOpen) {
	            return;
	        }
	        this.blur();
	    };
	    MDCSelectFoundation.prototype.handleClick = function (normalizedX) {
	        if (this.disabled || this.recentlyClicked) {
	            return;
	        }
	        this.setClickDebounceTimeout();
	        if (this.isMenuOpen) {
	            this.adapter.closeMenu();
	            return;
	        }
	        this.adapter.setRippleCenter(normalizedX);
	        this.openMenu();
	    };
	    /**
	     * Handles keydown events on select element. Depending on the type of
	     * character typed, does typeahead matching or opens menu.
	     */
	    MDCSelectFoundation.prototype.handleKeydown = function (event) {
	        if (this.isMenuOpen || !this.adapter.hasClass(cssClasses$c.FOCUSED)) {
	            return;
	        }
	        var isEnter = normalizeKey(event) === KEY.ENTER;
	        var isSpace = normalizeKey(event) === KEY.SPACEBAR;
	        var arrowUp = normalizeKey(event) === KEY.ARROW_UP;
	        var arrowDown = normalizeKey(event) === KEY.ARROW_DOWN;
	        var isModifier = event.ctrlKey || event.metaKey;
	        // Typeahead
	        if (!isModifier &&
	            (!isSpace && event.key && event.key.length === 1 ||
	                isSpace && this.adapter.isTypeaheadInProgress())) {
	            var key = isSpace ? ' ' : event.key;
	            var typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.getSelectedIndex());
	            if (typeaheadNextIndex >= 0) {
	                this.setSelectedIndex(typeaheadNextIndex);
	            }
	            event.preventDefault();
	            return;
	        }
	        if (!isEnter && !isSpace && !arrowUp && !arrowDown) {
	            return;
	        }
	        // Increment/decrement index as necessary and open menu.
	        if (arrowUp && this.getSelectedIndex() > 0) {
	            this.setSelectedIndex(this.getSelectedIndex() - 1);
	        }
	        else if (arrowDown &&
	            this.getSelectedIndex() < this.adapter.getMenuItemCount() - 1) {
	            this.setSelectedIndex(this.getSelectedIndex() + 1);
	        }
	        this.openMenu();
	        event.preventDefault();
	    };
	    /**
	     * Opens/closes the notched outline.
	     */
	    MDCSelectFoundation.prototype.notchOutline = function (openNotch) {
	        if (!this.adapter.hasOutline()) {
	            return;
	        }
	        var isFocused = this.adapter.hasClass(cssClasses$c.FOCUSED);
	        if (openNotch) {
	            var labelScale = numbers$6.LABEL_SCALE;
	            var labelWidth = this.adapter.getLabelWidth() * labelScale;
	            this.adapter.notchOutline(labelWidth);
	        }
	        else if (!isFocused) {
	            this.adapter.closeOutline();
	        }
	    };
	    /**
	     * Sets the aria label of the leading icon.
	     */
	    MDCSelectFoundation.prototype.setLeadingIconAriaLabel = function (label) {
	        if (this.leadingIcon) {
	            this.leadingIcon.setAriaLabel(label);
	        }
	    };
	    /**
	     * Sets the text content of the leading icon.
	     */
	    MDCSelectFoundation.prototype.setLeadingIconContent = function (content) {
	        if (this.leadingIcon) {
	            this.leadingIcon.setContent(content);
	        }
	    };
	    MDCSelectFoundation.prototype.getUseDefaultValidation = function () {
	        return this.useDefaultValidation;
	    };
	    MDCSelectFoundation.prototype.setUseDefaultValidation = function (useDefaultValidation) {
	        this.useDefaultValidation = useDefaultValidation;
	    };
	    MDCSelectFoundation.prototype.setValid = function (isValid) {
	        if (!this.useDefaultValidation) {
	            this.customValidity = isValid;
	        }
	        this.adapter.setSelectAnchorAttr('aria-invalid', (!isValid).toString());
	        if (isValid) {
	            this.adapter.removeClass(cssClasses$c.INVALID);
	            this.adapter.removeMenuClass(cssClasses$c.MENU_INVALID);
	        }
	        else {
	            this.adapter.addClass(cssClasses$c.INVALID);
	            this.adapter.addMenuClass(cssClasses$c.MENU_INVALID);
	        }
	        this.syncHelperTextValidity(isValid);
	    };
	    MDCSelectFoundation.prototype.isValid = function () {
	        if (this.useDefaultValidation &&
	            this.adapter.hasClass(cssClasses$c.REQUIRED) &&
	            !this.adapter.hasClass(cssClasses$c.DISABLED)) {
	            // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element
	            // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.
	            return this.getSelectedIndex() !== numbers$6.UNSET_INDEX &&
	                (this.getSelectedIndex() !== 0 || Boolean(this.getValue()));
	        }
	        return this.customValidity;
	    };
	    MDCSelectFoundation.prototype.setRequired = function (isRequired) {
	        if (isRequired) {
	            this.adapter.addClass(cssClasses$c.REQUIRED);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$c.REQUIRED);
	        }
	        this.adapter.setSelectAnchorAttr('aria-required', isRequired.toString());
	        this.adapter.setLabelRequired(isRequired);
	    };
	    MDCSelectFoundation.prototype.getRequired = function () {
	        return this.adapter.getSelectAnchorAttr('aria-required') === 'true';
	    };
	    MDCSelectFoundation.prototype.init = function () {
	        var anchorEl = this.adapter.getAnchorElement();
	        if (anchorEl) {
	            this.adapter.setMenuAnchorElement(anchorEl);
	            this.adapter.setMenuAnchorCorner(Corner.BOTTOM_START);
	        }
	        this.adapter.setMenuWrapFocus(false);
	        this.setDisabled(this.adapter.hasClass(cssClasses$c.DISABLED));
	        this.syncHelperTextValidity(!this.adapter.hasClass(cssClasses$c.INVALID));
	        this.layout();
	        this.layoutOptions();
	    };
	    /**
	     * Unfocuses the select component.
	     */
	    MDCSelectFoundation.prototype.blur = function () {
	        this.adapter.removeClass(cssClasses$c.FOCUSED);
	        this.layout();
	        this.adapter.deactivateBottomLine();
	        var isRequired = this.adapter.hasClass(cssClasses$c.REQUIRED);
	        if (isRequired && this.useDefaultValidation) {
	            this.setValid(this.isValid());
	        }
	    };
	    MDCSelectFoundation.prototype.syncHelperTextValidity = function (isValid) {
	        if (!this.helperText) {
	            return;
	        }
	        this.helperText.setValidity(isValid);
	        var helperTextVisible = this.helperText.isVisible();
	        var helperTextId = this.helperText.getId();
	        if (helperTextVisible && helperTextId) {
	            this.adapter.setSelectAnchorAttr(strings$f.ARIA_DESCRIBEDBY, helperTextId);
	        }
	        else {
	            // Needed because screenreaders will read labels pointed to by
	            // `aria-describedby` even if they are `aria-hidden`.
	            this.adapter.removeSelectAnchorAttr(strings$f.ARIA_DESCRIBEDBY);
	        }
	    };
	    MDCSelectFoundation.prototype.setClickDebounceTimeout = function () {
	        var _this = this;
	        clearTimeout(this.clickDebounceTimeout);
	        this.clickDebounceTimeout = setTimeout(function () {
	            _this.recentlyClicked = false;
	        }, numbers$6.CLICK_DEBOUNCE_TIMEOUT_MS);
	        this.recentlyClicked = true;
	    };
	    return MDCSelectFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$e = {
	    ARIA_HIDDEN: 'aria-hidden',
	    ROLE: 'role',
	};
	var cssClasses$b = {
	    HELPER_TEXT_VALIDATION_MSG: 'mdc-select-helper-text--validation-msg',
	    HELPER_TEXT_VALIDATION_MSG_PERSISTENT: 'mdc-select-helper-text--validation-msg-persistent',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCSelectHelperTextFoundation = /** @class */ (function (_super) {
	    __extends(MDCSelectHelperTextFoundation, _super);
	    function MDCSelectHelperTextFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCSelectHelperTextFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCSelectHelperTextFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$b;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelectHelperTextFoundation, "strings", {
	        get: function () {
	            return strings$e;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelectHelperTextFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                setAttr: function () { return undefined; },
	                getAttr: function () { return null; },
	                removeAttr: function () { return undefined; },
	                setContent: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * @return The ID of the helper text, or null if none is set.
	     */
	    MDCSelectHelperTextFoundation.prototype.getId = function () {
	        return this.adapter.getAttr('id');
	    };
	    /**
	     * @return Whether the helper text is currently visible.
	     */
	    MDCSelectHelperTextFoundation.prototype.isVisible = function () {
	        return this.adapter.getAttr(strings$e.ARIA_HIDDEN) !== 'true';
	    };
	    /**
	     * Sets the content of the helper text field.
	     */
	    MDCSelectHelperTextFoundation.prototype.setContent = function (content) {
	        this.adapter.setContent(content);
	    };
	    /**
	     * Sets the helper text to act as a validation message.
	     * By default, validation messages are hidden when the select is valid and
	     * visible when the select is invalid.
	     *
	     * @param isValidation True to make the helper text act as an error validation
	     *     message.
	     */
	    MDCSelectHelperTextFoundation.prototype.setValidation = function (isValidation) {
	        if (isValidation) {
	            this.adapter.addClass(cssClasses$b.HELPER_TEXT_VALIDATION_MSG);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$b.HELPER_TEXT_VALIDATION_MSG);
	        }
	    };
	    /**
	     * Sets the persistency of the validation helper text.
	     * This keeps the validation message visible even if the select is valid,
	     * though it will be displayed in the normal (grey) color.
	     */
	    MDCSelectHelperTextFoundation.prototype.setValidationMsgPersistent = function (isPersistent) {
	        if (isPersistent) {
	            this.adapter.addClass(cssClasses$b.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$b.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
	        }
	    };
	    /**
	     * When acting as a validation message, shows/hides the helper text and
	     * triggers alerts as necessary based on the select's validity.
	     */
	    MDCSelectHelperTextFoundation.prototype.setValidity = function (selectIsValid) {
	        var isValidationMsg = this.adapter.hasClass(cssClasses$b.HELPER_TEXT_VALIDATION_MSG);
	        if (!isValidationMsg) {
	            // Non-validating helper-text is always displayed and does not participate
	            // in validation logic.
	            return;
	        }
	        var isPersistentValidationMsg = this.adapter.hasClass(cssClasses$b.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
	        // Validating helper text is displayed if select is invalid, unless it is
	        // set as persistent, in which case it always displays.
	        var msgShouldDisplay = !selectIsValid || isPersistentValidationMsg;
	        if (msgShouldDisplay) {
	            this.showToScreenReader();
	            // In addition to displaying, also trigger an alert if the select
	            // has become invalid.
	            if (!selectIsValid) {
	                this.adapter.setAttr(strings$e.ROLE, 'alert');
	            }
	            else {
	                this.adapter.removeAttr(strings$e.ROLE);
	            }
	            return;
	        }
	        // Hide everything.
	        this.adapter.removeAttr(strings$e.ROLE);
	        this.hide();
	    };
	    /**
	     * Makes the helper text visible to screen readers.
	     */
	    MDCSelectHelperTextFoundation.prototype.showToScreenReader = function () {
	        this.adapter.removeAttr(strings$e.ARIA_HIDDEN);
	    };
	    /**
	     * Hides the help text from screen readers.
	     */
	    MDCSelectHelperTextFoundation.prototype.hide = function () {
	        this.adapter.setAttr(strings$e.ARIA_HIDDEN, 'true');
	    };
	    return MDCSelectHelperTextFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCSelectHelperText = /** @class */ (function (_super) {
	    __extends(MDCSelectHelperText, _super);
	    function MDCSelectHelperText() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCSelectHelperText.attachTo = function (root) {
	        return new MDCSelectHelperText(root);
	    };
	    Object.defineProperty(MDCSelectHelperText.prototype, "foundationForSelect", {
	        // Provided for access by MDCSelect component
	        get: function () {
	            return this.foundation;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCSelectHelperText.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            getAttr: function (attr) { return _this.root.getAttribute(attr); },
	            setAttr: function (attr, value) { return _this.root.setAttribute(attr, value); },
	            removeAttr: function (attr) { return _this.root.removeAttribute(attr); },
	            setContent: function (content) {
	                _this.root.textContent = content;
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCSelectHelperTextFoundation(adapter);
	    };
	    return MDCSelectHelperText;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$d = {
	    ICON_EVENT: 'MDCSelect:icon',
	    ICON_ROLE: 'button',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var INTERACTION_EVENTS$2 = ['click', 'keydown'];
	var MDCSelectIconFoundation = /** @class */ (function (_super) {
	    __extends(MDCSelectIconFoundation, _super);
	    function MDCSelectIconFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCSelectIconFoundation.defaultAdapter), adapter)) || this;
	        _this.savedTabIndex = null;
	        _this.interactionHandler = function (evt) {
	            _this.handleInteraction(evt);
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCSelectIconFoundation, "strings", {
	        get: function () {
	            return strings$d;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelectIconFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCSelectIconAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                getAttr: function () { return null; },
	                setAttr: function () { return undefined; },
	                removeAttr: function () { return undefined; },
	                setContent: function () { return undefined; },
	                registerInteractionHandler: function () { return undefined; },
	                deregisterInteractionHandler: function () { return undefined; },
	                notifyIconAction: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCSelectIconFoundation.prototype.init = function () {
	        var e_1, _a;
	        this.savedTabIndex = this.adapter.getAttr('tabindex');
	        try {
	            for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS$2), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
	                var evtType = INTERACTION_EVENTS_1_1.value;
	                this.adapter.registerInteractionHandler(evtType, this.interactionHandler);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_a = INTERACTION_EVENTS_1.return)) _a.call(INTERACTION_EVENTS_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    MDCSelectIconFoundation.prototype.destroy = function () {
	        var e_2, _a;
	        try {
	            for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS$2), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
	                var evtType = INTERACTION_EVENTS_2_1.value;
	                this.adapter.deregisterInteractionHandler(evtType, this.interactionHandler);
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_a = INTERACTION_EVENTS_2.return)) _a.call(INTERACTION_EVENTS_2);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    };
	    MDCSelectIconFoundation.prototype.setDisabled = function (disabled) {
	        if (!this.savedTabIndex) {
	            return;
	        }
	        if (disabled) {
	            this.adapter.setAttr('tabindex', '-1');
	            this.adapter.removeAttr('role');
	        }
	        else {
	            this.adapter.setAttr('tabindex', this.savedTabIndex);
	            this.adapter.setAttr('role', strings$d.ICON_ROLE);
	        }
	    };
	    MDCSelectIconFoundation.prototype.setAriaLabel = function (label) {
	        this.adapter.setAttr('aria-label', label);
	    };
	    MDCSelectIconFoundation.prototype.setContent = function (content) {
	        this.adapter.setContent(content);
	    };
	    MDCSelectIconFoundation.prototype.handleInteraction = function (evt) {
	        var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;
	        if (evt.type === 'click' || isEnterKey) {
	            this.adapter.notifyIconAction();
	        }
	    };
	    return MDCSelectIconFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCSelectIcon = /** @class */ (function (_super) {
	    __extends(MDCSelectIcon, _super);
	    function MDCSelectIcon() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCSelectIcon.attachTo = function (root) {
	        return new MDCSelectIcon(root);
	    };
	    Object.defineProperty(MDCSelectIcon.prototype, "foundationForSelect", {
	        // Provided for access by MDCSelect component
	        get: function () {
	            return this.foundation;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCSelectIcon.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            getAttr: function (attr) { return _this.root.getAttribute(attr); },
	            setAttr: function (attr, value) { return _this.root.setAttribute(attr, value); },
	            removeAttr: function (attr) { return _this.root.removeAttribute(attr); },
	            setContent: function (content) {
	                _this.root.textContent = content;
	            },
	            registerInteractionHandler: function (evtType, handler) {
	                return _this.listen(evtType, handler);
	            },
	            deregisterInteractionHandler: function (evtType, handler) {
	                return _this.unlisten(evtType, handler);
	            },
	            notifyIconAction: function () { return _this.emit(MDCSelectIconFoundation.strings.ICON_EVENT, {} /* evtData */, true /* shouldBubble */); },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCSelectIconFoundation(adapter);
	    };
	    return MDCSelectIcon;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCSelect = /** @class */ (function (_super) {
	    __extends(MDCSelect, _super);
	    function MDCSelect() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCSelect.attachTo = function (root) {
	        return new MDCSelect(root);
	    };
	    MDCSelect.prototype.initialize = function (labelFactory, lineRippleFactory, outlineFactory, menuFactory, iconFactory, helperTextFactory) {
	        if (labelFactory === void 0) { labelFactory = function (el) { return new MDCFloatingLabel(el); }; }
	        if (lineRippleFactory === void 0) { lineRippleFactory = function (el) { return new MDCLineRipple(el); }; }
	        if (outlineFactory === void 0) { outlineFactory = function (el) { return new MDCNotchedOutline(el); }; }
	        if (menuFactory === void 0) { menuFactory = function (el) { return new MDCMenu(el); }; }
	        if (iconFactory === void 0) { iconFactory = function (el) { return new MDCSelectIcon(el); }; }
	        if (helperTextFactory === void 0) { helperTextFactory = function (el) { return new MDCSelectHelperText(el); }; }
	        this.selectAnchor =
	            this.root.querySelector(strings$f.SELECT_ANCHOR_SELECTOR);
	        this.selectedText =
	            this.root.querySelector(strings$f.SELECTED_TEXT_SELECTOR);
	        this.hiddenInput = this.root.querySelector(strings$f.HIDDEN_INPUT_SELECTOR);
	        if (!this.selectedText) {
	            throw new Error('MDCSelect: Missing required element: The following selector must be present: ' +
	                ("'" + strings$f.SELECTED_TEXT_SELECTOR + "'"));
	        }
	        if (this.selectAnchor.hasAttribute(strings$f.ARIA_CONTROLS)) {
	            var helperTextElement = document.getElementById(this.selectAnchor.getAttribute(strings$f.ARIA_CONTROLS));
	            if (helperTextElement) {
	                this.helperText = helperTextFactory(helperTextElement);
	            }
	        }
	        this.menuSetup(menuFactory);
	        var labelElement = this.root.querySelector(strings$f.LABEL_SELECTOR);
	        this.label = labelElement ? labelFactory(labelElement) : null;
	        var lineRippleElement = this.root.querySelector(strings$f.LINE_RIPPLE_SELECTOR);
	        this.lineRipple =
	            lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
	        var outlineElement = this.root.querySelector(strings$f.OUTLINE_SELECTOR);
	        this.outline = outlineElement ? outlineFactory(outlineElement) : null;
	        var leadingIcon = this.root.querySelector(strings$f.LEADING_ICON_SELECTOR);
	        if (leadingIcon) {
	            this.leadingIcon = iconFactory(leadingIcon);
	        }
	        if (!this.root.classList.contains(cssClasses$c.OUTLINED)) {
	            this.ripple = this.createRipple();
	        }
	    };
	    /**
	     * Initializes the select's event listeners and internal state based
	     * on the environment's state.
	     */
	    MDCSelect.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.handleFocus = function () {
	            _this.foundation.handleFocus();
	        };
	        this.handleBlur = function () {
	            _this.foundation.handleBlur();
	        };
	        this.handleClick = function (evt) {
	            _this.selectAnchor.focus();
	            _this.foundation.handleClick(_this.getNormalizedXCoordinate(evt));
	        };
	        this.handleKeydown = function (evt) {
	            _this.foundation.handleKeydown(evt);
	        };
	        this.handleMenuItemAction = function (evt) {
	            _this.foundation.handleMenuItemAction(evt.detail.index);
	        };
	        this.handleMenuOpened = function () {
	            _this.foundation.handleMenuOpened();
	        };
	        this.handleMenuClosed = function () {
	            _this.foundation.handleMenuClosed();
	        };
	        this.handleMenuClosing = function () {
	            _this.foundation.handleMenuClosing();
	        };
	        this.selectAnchor.addEventListener('focus', this.handleFocus);
	        this.selectAnchor.addEventListener('blur', this.handleBlur);
	        this.selectAnchor.addEventListener('click', this.handleClick);
	        this.selectAnchor.addEventListener('keydown', this.handleKeydown);
	        this.menu.listen(strings$j.CLOSED_EVENT, this.handleMenuClosed);
	        this.menu.listen(strings$j.CLOSING_EVENT, this.handleMenuClosing);
	        this.menu.listen(strings$j.OPENED_EVENT, this.handleMenuOpened);
	        this.menu.listen(strings$i.SELECTED_EVENT, this.handleMenuItemAction);
	        if (this.hiddenInput) {
	            if (this.hiddenInput.value) {
	                // If the hidden input already has a value, use it to restore the
	                // select's value. This can happen e.g. if the user goes back or (in
	                // some browsers) refreshes the page.
	                this.foundation.setValue(this.hiddenInput.value, /** skipNotify */ true);
	                this.foundation.layout();
	                return;
	            }
	            this.hiddenInput.value = this.value;
	        }
	    };
	    MDCSelect.prototype.destroy = function () {
	        this.selectAnchor.removeEventListener('focus', this.handleFocus);
	        this.selectAnchor.removeEventListener('blur', this.handleBlur);
	        this.selectAnchor.removeEventListener('keydown', this.handleKeydown);
	        this.selectAnchor.removeEventListener('click', this.handleClick);
	        this.menu.unlisten(strings$j.CLOSED_EVENT, this.handleMenuClosed);
	        this.menu.unlisten(strings$j.OPENED_EVENT, this.handleMenuOpened);
	        this.menu.unlisten(strings$i.SELECTED_EVENT, this.handleMenuItemAction);
	        this.menu.destroy();
	        if (this.ripple) {
	            this.ripple.destroy();
	        }
	        if (this.outline) {
	            this.outline.destroy();
	        }
	        if (this.leadingIcon) {
	            this.leadingIcon.destroy();
	        }
	        if (this.helperText) {
	            this.helperText.destroy();
	        }
	        _super.prototype.destroy.call(this);
	    };
	    Object.defineProperty(MDCSelect.prototype, "value", {
	        get: function () {
	            return this.foundation.getValue();
	        },
	        set: function (value) {
	            this.foundation.setValue(value);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCSelect.prototype.setValue = function (value, skipNotify) {
	        if (skipNotify === void 0) { skipNotify = false; }
	        this.foundation.setValue(value, skipNotify);
	    };
	    Object.defineProperty(MDCSelect.prototype, "selectedIndex", {
	        get: function () {
	            return this.foundation.getSelectedIndex();
	        },
	        set: function (selectedIndex) {
	            this.foundation.setSelectedIndex(selectedIndex, /* closeMenu */ true);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCSelect.prototype.setSelectedIndex = function (selectedIndex, skipNotify) {
	        if (skipNotify === void 0) { skipNotify = false; }
	        this.foundation.setSelectedIndex(selectedIndex, /* closeMenu */ true, skipNotify);
	    };
	    Object.defineProperty(MDCSelect.prototype, "disabled", {
	        get: function () {
	            return this.foundation.getDisabled();
	        },
	        set: function (disabled) {
	            this.foundation.setDisabled(disabled);
	            if (this.hiddenInput) {
	                this.hiddenInput.disabled = disabled;
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelect.prototype, "leadingIconAriaLabel", {
	        set: function (label) {
	            this.foundation.setLeadingIconAriaLabel(label);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelect.prototype, "leadingIconContent", {
	        /**
	         * Sets the text content of the leading icon.
	         */
	        set: function (content) {
	            this.foundation.setLeadingIconContent(content);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelect.prototype, "helperTextContent", {
	        /**
	         * Sets the text content of the helper text.
	         */
	        set: function (content) {
	            this.foundation.setHelperTextContent(content);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelect.prototype, "useDefaultValidation", {
	        /**
	         * Enables or disables the default validation scheme where a required select
	         * must be non-empty. Set to false for custom validation.
	         * @param useDefaultValidation Set this to false to ignore default
	         *     validation scheme.
	         */
	        set: function (useDefaultValidation) {
	            this.foundation.setUseDefaultValidation(useDefaultValidation);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelect.prototype, "valid", {
	        /**
	         * Checks if the select is in a valid state.
	         */
	        get: function () {
	            return this.foundation.isValid();
	        },
	        /**
	         * Sets the current invalid state of the select.
	         */
	        set: function (isValid) {
	            this.foundation.setValid(isValid);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSelect.prototype, "required", {
	        /**
	         * Returns whether the select is required.
	         */
	        get: function () {
	            return this.foundation.getRequired();
	        },
	        /**
	         * Sets the control to the required state.
	         */
	        set: function (isRequired) {
	            this.foundation.setRequired(isRequired);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Re-calculates if the notched outline should be notched and if the label
	     * should float.
	     */
	    MDCSelect.prototype.layout = function () {
	        this.foundation.layout();
	    };
	    /**
	     * Synchronizes the list of options with the state of the foundation. Call
	     * this whenever menu options are dynamically updated.
	     */
	    MDCSelect.prototype.layoutOptions = function () {
	        this.foundation.layoutOptions();
	        this.menu.layout();
	        // Update cached menuItemValues for adapter.
	        this.menuItemValues =
	            this.menu.items.map(function (el) { return el.getAttribute(strings$f.VALUE_ATTR) || ''; });
	        if (this.hiddenInput) {
	            this.hiddenInput.value = this.value;
	        }
	    };
	    MDCSelect.prototype.getDefaultFoundation = function () {
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = __assign(__assign(__assign(__assign({}, this.getSelectAdapterMethods()), this.getCommonAdapterMethods()), this.getOutlineAdapterMethods()), this.getLabelAdapterMethods());
	        return new MDCSelectFoundation(adapter, this.getFoundationMap());
	    };
	    /**
	     * Handles setup for the menu.
	     */
	    MDCSelect.prototype.menuSetup = function (menuFactory) {
	        this.menuElement = this.root.querySelector(strings$f.MENU_SELECTOR);
	        this.menu = menuFactory(this.menuElement);
	        this.menu.hasTypeahead = true;
	        this.menu.singleSelection = true;
	        this.menuItemValues =
	            this.menu.items.map(function (el) { return el.getAttribute(strings$f.VALUE_ATTR) || ''; });
	    };
	    MDCSelect.prototype.createRipple = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = __assign(__assign({}, MDCRipple.createAdapter({ root: this.selectAnchor })), { registerInteractionHandler: function (evtType, handler) {
	                _this.selectAnchor.addEventListener(evtType, handler);
	            }, deregisterInteractionHandler: function (evtType, handler) {
	                _this.selectAnchor.removeEventListener(evtType, handler);
	            } });
	        // tslint:enable:object-literal-sort-keys
	        return new MDCRipple(this.selectAnchor, new MDCRippleFoundation(adapter));
	    };
	    MDCSelect.prototype.getSelectAdapterMethods = function () {
	        var _this = this;
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        return {
	            getMenuItemAttr: function (menuItem, attr) {
	                return menuItem.getAttribute(attr);
	            },
	            setSelectedText: function (text) {
	                _this.selectedText.textContent = text;
	            },
	            isSelectAnchorFocused: function () { return document.activeElement === _this.selectAnchor; },
	            getSelectAnchorAttr: function (attr) {
	                return _this.selectAnchor.getAttribute(attr);
	            },
	            setSelectAnchorAttr: function (attr, value) {
	                _this.selectAnchor.setAttribute(attr, value);
	            },
	            removeSelectAnchorAttr: function (attr) {
	                _this.selectAnchor.removeAttribute(attr);
	            },
	            addMenuClass: function (className) {
	                _this.menuElement.classList.add(className);
	            },
	            removeMenuClass: function (className) {
	                _this.menuElement.classList.remove(className);
	            },
	            openMenu: function () {
	                _this.menu.open = true;
	            },
	            closeMenu: function () {
	                _this.menu.open = false;
	            },
	            getAnchorElement: function () {
	                return _this.root.querySelector(strings$f.SELECT_ANCHOR_SELECTOR);
	            },
	            setMenuAnchorElement: function (anchorEl) {
	                _this.menu.setAnchorElement(anchorEl);
	            },
	            setMenuAnchorCorner: function (anchorCorner) {
	                _this.menu.setAnchorCorner(anchorCorner);
	            },
	            setMenuWrapFocus: function (wrapFocus) {
	                _this.menu.wrapFocus = wrapFocus;
	            },
	            getSelectedIndex: function () {
	                var index = _this.menu.selectedIndex;
	                return index instanceof Array ? index[0] : index;
	            },
	            setSelectedIndex: function (index) {
	                _this.menu.selectedIndex = index;
	            },
	            focusMenuItemAtIndex: function (index) {
	                _this.menu.items[index].focus();
	            },
	            getMenuItemCount: function () { return _this.menu.items.length; },
	            // Cache menu item values. layoutOptions() updates this cache.
	            getMenuItemValues: function () { return _this.menuItemValues; },
	            getMenuItemTextAtIndex: function (index) {
	                return _this.menu.getPrimaryTextAtIndex(index);
	            },
	            isTypeaheadInProgress: function () { return _this.menu.typeaheadInProgress; },
	            typeaheadMatchItem: function (nextChar, startingIndex) {
	                return _this.menu.typeaheadMatchItem(nextChar, startingIndex);
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	    };
	    MDCSelect.prototype.getCommonAdapterMethods = function () {
	        var _this = this;
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        return {
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            setRippleCenter: function (normalizedX) {
	                _this.lineRipple && _this.lineRipple.setRippleCenter(normalizedX);
	            },
	            activateBottomLine: function () {
	                _this.lineRipple && _this.lineRipple.activate();
	            },
	            deactivateBottomLine: function () {
	                _this.lineRipple && _this.lineRipple.deactivate();
	            },
	            notifyChange: function (value) {
	                if (_this.hiddenInput) {
	                    _this.hiddenInput.value = value;
	                }
	                var index = _this.selectedIndex;
	                _this.emit(strings$f.CHANGE_EVENT, { value: value, index: index }, true /* shouldBubble  */);
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	    };
	    MDCSelect.prototype.getOutlineAdapterMethods = function () {
	        var _this = this;
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        return {
	            hasOutline: function () { return Boolean(_this.outline); },
	            notchOutline: function (labelWidth) {
	                _this.outline && _this.outline.notch(labelWidth);
	            },
	            closeOutline: function () {
	                _this.outline && _this.outline.closeNotch();
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	    };
	    MDCSelect.prototype.getLabelAdapterMethods = function () {
	        var _this = this;
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        return {
	            hasLabel: function () { return !!_this.label; },
	            floatLabel: function (shouldFloat) {
	                _this.label && _this.label.float(shouldFloat);
	            },
	            getLabelWidth: function () { return _this.label ? _this.label.getWidth() : 0; },
	            setLabelRequired: function (isRequired) {
	                _this.label && _this.label.setRequired(isRequired);
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	    };
	    /**
	     * Calculates where the line ripple should start based on the x coordinate within the component.
	     */
	    MDCSelect.prototype.getNormalizedXCoordinate = function (evt) {
	        var targetClientRect = evt.target.getBoundingClientRect();
	        var xCoordinate = this.isTouchEvent(evt) ? evt.touches[0].clientX : evt.clientX;
	        return xCoordinate - targetClientRect.left;
	    };
	    MDCSelect.prototype.isTouchEvent = function (evt) {
	        return Boolean(evt.touches);
	    };
	    /**
	     * Returns a map of all subcomponents to subfoundations.
	     */
	    MDCSelect.prototype.getFoundationMap = function () {
	        return {
	            helperText: this.helperText ? this.helperText.foundationForSelect :
	                undefined,
	            leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForSelect :
	                undefined,
	        };
	    };
	    return MDCSelect;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$b = {
		__proto__: null,
		MDCSelect: MDCSelect,
		cssClasses: cssClasses$c,
		strings: strings$f,
		numbers: numbers$6,
		MDCSelectFoundation: MDCSelectFoundation,
		helperTextCssClasses: cssClasses$b,
		helperTextStrings: strings$e,
		MDCSelectHelperText: MDCSelectHelperText,
		MDCSelectHelperTextFoundation: MDCSelectHelperTextFoundation,
		iconStrings: strings$d,
		MDCSelectIcon: MDCSelectIcon,
		MDCSelectIconFoundation: MDCSelectIconFoundation
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/** Slider element classes. */
	var cssClasses$a = {
	    DISABLED: 'mdc-slider--disabled',
	    DISCRETE: 'mdc-slider--discrete',
	    INPUT: 'mdc-slider__input',
	    RANGE: 'mdc-slider--range',
	    THUMB: 'mdc-slider__thumb',
	    // Applied when thumb is in the focused state.
	    THUMB_FOCUSED: 'mdc-slider__thumb--focused',
	    THUMB_KNOB: 'mdc-slider__thumb-knob',
	    // Class added to the top thumb (for overlapping thumbs in range slider).
	    THUMB_TOP: 'mdc-slider__thumb--top',
	    THUMB_WITH_INDICATOR: 'mdc-slider__thumb--with-indicator',
	    TICK_MARKS: 'mdc-slider--tick-marks',
	    TICK_MARKS_CONTAINER: 'mdc-slider__tick-marks',
	    TICK_MARK_ACTIVE: 'mdc-slider__tick-mark--active',
	    TICK_MARK_INACTIVE: 'mdc-slider__tick-mark--inactive',
	    TRACK: 'mdc-slider__track',
	    // The active track fill element that will be scaled as the value changes.
	    TRACK_ACTIVE: 'mdc-slider__track--active_fill',
	    VALUE_INDICATOR_TEXT: 'mdc-slider__value-indicator-text',
	};
	/** Slider numbers. */
	var numbers$5 = {
	    // Default step size.
	    STEP_SIZE: 1,
	    // Minimum absolute difference between clientX of move event / down event
	    // for which to update thumb, in the case of overlapping thumbs.
	    // This is needed to reduce chances of choosing the thumb based on
	    // pointer jitter.
	    THUMB_UPDATE_MIN_PX: 5,
	};
	/** Slider attributes. */
	var attributes$1 = {
	    ARIA_VALUETEXT: 'aria-valuetext',
	    INPUT_DISABLED: 'disabled',
	    INPUT_MIN: 'min',
	    INPUT_MAX: 'max',
	    INPUT_VALUE: 'value',
	    INPUT_STEP: 'step',
	};
	/** Slider events. */
	var events$1 = {
	    CHANGE: 'MDCSlider:change',
	    INPUT: 'MDCSlider:input',
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/** Tick mark enum, for discrete sliders. */
	var TickMark;
	(function (TickMark) {
	    TickMark[TickMark["ACTIVE"] = 0] = "ACTIVE";
	    TickMark[TickMark["INACTIVE"] = 1] = "INACTIVE";
	})(TickMark || (TickMark = {}));
	/**
	 * Thumb types: range slider has two thumbs (START, END) whereas single point
	 * slider only has one thumb (END).
	 */
	var Thumb;
	(function (Thumb) {
	    // Thumb at start of slider (e.g. in LTR mode, left thumb on range slider).
	    Thumb[Thumb["START"] = 1] = "START";
	    // Thumb at end of slider (e.g. in LTR mode, right thumb on range slider,
	    // or only thumb on single point slider).
	    Thumb[Thumb["END"] = 2] = "END";
	})(Thumb || (Thumb = {}));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var AnimationKeys$1;
	(function (AnimationKeys) {
	    AnimationKeys["SLIDER_UPDATE"] = "slider_update";
	})(AnimationKeys$1 || (AnimationKeys$1 = {}));
	// Accessing `window` without a `typeof` check will throw on Node environments.
	var HAS_WINDOW$1 = typeof window !== 'undefined';
	/**
	 * Foundation class for slider. Responsibilities include:
	 * - Updating slider values (internal state and DOM updates) based on client
	 *   'x' position.
	 * - Updating DOM after slider property updates (e.g. min, max).
	 */
	var MDCSliderFoundation = /** @class */ (function (_super) {
	    __extends(MDCSliderFoundation, _super);
	    function MDCSliderFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCSliderFoundation.defaultAdapter), adapter)) || this;
	        // Whether the initial styles (to position the thumb, before component
	        // initialization) have been removed.
	        _this.initialStylesRemoved = false;
	        _this.isDisabled = false;
	        _this.isDiscrete = false;
	        _this.step = numbers$5.STEP_SIZE;
	        _this.hasTickMarks = false;
	        // The following properties are only set for range sliders.
	        _this.isRange = false;
	        // Tracks the thumb being moved across a slider pointer interaction (down,
	        // move event).
	        _this.thumb = null;
	        // `clientX` from the most recent down event. Used in subsequent move
	        // events to determine which thumb to move (in the case of
	        // overlapping thumbs).
	        _this.downEventClientX = null;
	        // Width of the start thumb knob.
	        _this.startThumbKnobWidth = 0;
	        // Width of the end thumb knob.
	        _this.endThumbKnobWidth = 0;
	        _this.animFrame = new AnimationFrame();
	        return _this;
	    }
	    Object.defineProperty(MDCSliderFoundation, "defaultAdapter", {
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same
	            // order as the adapter interface.
	            return {
	                hasClass: function () { return false; },
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                addThumbClass: function () { return undefined; },
	                removeThumbClass: function () { return undefined; },
	                getAttribute: function () { return null; },
	                getInputValue: function () { return ''; },
	                setInputValue: function () { return undefined; },
	                getInputAttribute: function () { return null; },
	                setInputAttribute: function () { return null; },
	                removeInputAttribute: function () { return null; },
	                focusInput: function () { return undefined; },
	                isInputFocused: function () { return false; },
	                getThumbKnobWidth: function () { return 0; },
	                getThumbBoundingClientRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                getBoundingClientRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                isRTL: function () { return false; },
	                setThumbStyleProperty: function () { return undefined; },
	                removeThumbStyleProperty: function () { return undefined; },
	                setTrackActiveStyleProperty: function () { return undefined; },
	                removeTrackActiveStyleProperty: function () { return undefined; },
	                setValueIndicatorText: function () { return undefined; },
	                getValueToAriaValueTextFn: function () { return null; },
	                updateTickMarks: function () { return undefined; },
	                setPointerCapture: function () { return undefined; },
	                emitChangeEvent: function () { return undefined; },
	                emitInputEvent: function () { return undefined; },
	                emitDragStartEvent: function () { return undefined; },
	                emitDragEndEvent: function () { return undefined; },
	                registerEventHandler: function () { return undefined; },
	                deregisterEventHandler: function () { return undefined; },
	                registerThumbEventHandler: function () { return undefined; },
	                deregisterThumbEventHandler: function () { return undefined; },
	                registerInputEventHandler: function () { return undefined; },
	                deregisterInputEventHandler: function () { return undefined; },
	                registerBodyEventHandler: function () { return undefined; },
	                deregisterBodyEventHandler: function () { return undefined; },
	                registerWindowEventHandler: function () { return undefined; },
	                deregisterWindowEventHandler: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCSliderFoundation.prototype.init = function () {
	        var _this = this;
	        this.isDisabled = this.adapter.hasClass(cssClasses$a.DISABLED);
	        this.isDiscrete = this.adapter.hasClass(cssClasses$a.DISCRETE);
	        this.hasTickMarks = this.adapter.hasClass(cssClasses$a.TICK_MARKS);
	        this.isRange = this.adapter.hasClass(cssClasses$a.RANGE);
	        var min = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes$1.INPUT_MIN, this.isRange ? Thumb.START : Thumb.END), attributes$1.INPUT_MIN);
	        var max = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes$1.INPUT_MAX, Thumb.END), attributes$1.INPUT_MAX);
	        var value = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes$1.INPUT_VALUE, Thumb.END), attributes$1.INPUT_VALUE);
	        var valueStart = this.isRange ?
	            this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes$1.INPUT_VALUE, Thumb.START), attributes$1.INPUT_VALUE) :
	            min;
	        var stepAttr = this.adapter.getInputAttribute(attributes$1.INPUT_STEP, Thumb.END);
	        var step = stepAttr ?
	            this.convertAttributeValueToNumber(stepAttr, attributes$1.INPUT_STEP) :
	            this.step;
	        this.validateProperties({ min: min, max: max, value: value, valueStart: valueStart, step: step });
	        this.min = min;
	        this.max = max;
	        this.value = value;
	        this.valueStart = valueStart;
	        this.step = step;
	        this.numDecimalPlaces = getNumDecimalPlaces(this.step);
	        this.valueBeforeDownEvent = value;
	        this.valueStartBeforeDownEvent = valueStart;
	        this.mousedownOrTouchstartListener =
	            this.handleMousedownOrTouchstart.bind(this);
	        this.moveListener = this.handleMove.bind(this);
	        this.pointerdownListener = this.handlePointerdown.bind(this);
	        this.pointerupListener = this.handlePointerup.bind(this);
	        this.thumbMouseenterListener = this.handleThumbMouseenter.bind(this);
	        this.thumbMouseleaveListener = this.handleThumbMouseleave.bind(this);
	        this.inputStartChangeListener = function () {
	            _this.handleInputChange(Thumb.START);
	        };
	        this.inputEndChangeListener = function () {
	            _this.handleInputChange(Thumb.END);
	        };
	        this.inputStartFocusListener = function () {
	            _this.handleInputFocus(Thumb.START);
	        };
	        this.inputEndFocusListener = function () {
	            _this.handleInputFocus(Thumb.END);
	        };
	        this.inputStartBlurListener = function () {
	            _this.handleInputBlur(Thumb.START);
	        };
	        this.inputEndBlurListener = function () {
	            _this.handleInputBlur(Thumb.END);
	        };
	        this.resizeListener = this.handleResize.bind(this);
	        this.registerEventHandlers();
	    };
	    MDCSliderFoundation.prototype.destroy = function () {
	        this.deregisterEventHandlers();
	    };
	    MDCSliderFoundation.prototype.setMin = function (value) {
	        this.min = value;
	        if (!this.isRange) {
	            this.valueStart = value;
	        }
	        this.updateUI();
	    };
	    MDCSliderFoundation.prototype.setMax = function (value) {
	        this.max = value;
	        this.updateUI();
	    };
	    MDCSliderFoundation.prototype.getMin = function () {
	        return this.min;
	    };
	    MDCSliderFoundation.prototype.getMax = function () {
	        return this.max;
	    };
	    /**
	     * - For single point sliders, returns the thumb value.
	     * - For range (two-thumb) sliders, returns the end thumb's value.
	     */
	    MDCSliderFoundation.prototype.getValue = function () {
	        return this.value;
	    };
	    /**
	     * - For single point sliders, sets the thumb value.
	     * - For range (two-thumb) sliders, sets the end thumb's value.
	     */
	    MDCSliderFoundation.prototype.setValue = function (value) {
	        if (this.isRange && value < this.valueStart) {
	            throw new Error("end thumb value (" + value + ") must be >= start thumb " +
	                ("value (" + this.valueStart + ")"));
	        }
	        this.updateValue(value, Thumb.END);
	    };
	    /**
	     * Only applicable for range sliders.
	     * @return The start thumb's value.
	     */
	    MDCSliderFoundation.prototype.getValueStart = function () {
	        if (!this.isRange) {
	            throw new Error('`valueStart` is only applicable for range sliders.');
	        }
	        return this.valueStart;
	    };
	    /**
	     * Only applicable for range sliders. Sets the start thumb's value.
	     */
	    MDCSliderFoundation.prototype.setValueStart = function (valueStart) {
	        if (!this.isRange) {
	            throw new Error('`valueStart` is only applicable for range sliders.');
	        }
	        if (this.isRange && valueStart > this.value) {
	            throw new Error("start thumb value (" + valueStart + ") must be <= end thumb " +
	                ("value (" + this.value + ")"));
	        }
	        this.updateValue(valueStart, Thumb.START);
	    };
	    MDCSliderFoundation.prototype.setStep = function (value) {
	        this.step = value;
	        this.numDecimalPlaces = getNumDecimalPlaces(value);
	        this.updateUI();
	    };
	    MDCSliderFoundation.prototype.setIsDiscrete = function (value) {
	        this.isDiscrete = value;
	        this.updateValueIndicatorUI();
	        this.updateTickMarksUI();
	    };
	    MDCSliderFoundation.prototype.getStep = function () {
	        return this.step;
	    };
	    MDCSliderFoundation.prototype.setHasTickMarks = function (value) {
	        this.hasTickMarks = value;
	        this.updateTickMarksUI();
	    };
	    MDCSliderFoundation.prototype.getDisabled = function () {
	        return this.isDisabled;
	    };
	    /**
	     * Sets disabled state, including updating styles and thumb tabindex.
	     */
	    MDCSliderFoundation.prototype.setDisabled = function (disabled) {
	        this.isDisabled = disabled;
	        if (disabled) {
	            this.adapter.addClass(cssClasses$a.DISABLED);
	            if (this.isRange) {
	                this.adapter.setInputAttribute(attributes$1.INPUT_DISABLED, '', Thumb.START);
	            }
	            this.adapter.setInputAttribute(attributes$1.INPUT_DISABLED, '', Thumb.END);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$a.DISABLED);
	            if (this.isRange) {
	                this.adapter.removeInputAttribute(attributes$1.INPUT_DISABLED, Thumb.START);
	            }
	            this.adapter.removeInputAttribute(attributes$1.INPUT_DISABLED, Thumb.END);
	        }
	    };
	    /** @return Whether the slider is a range slider. */
	    MDCSliderFoundation.prototype.getIsRange = function () {
	        return this.isRange;
	    };
	    /**
	     * - Syncs slider boundingClientRect with the current DOM.
	     * - Updates UI based on internal state.
	     */
	    MDCSliderFoundation.prototype.layout = function (_a) {
	        var _b = _a === void 0 ? {} : _a, skipUpdateUI = _b.skipUpdateUI;
	        this.rect = this.adapter.getBoundingClientRect();
	        if (this.isRange) {
	            this.startThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.START);
	            this.endThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.END);
	        }
	        if (!skipUpdateUI) {
	            this.updateUI();
	        }
	    };
	    /** Handles resize events on the window. */
	    MDCSliderFoundation.prototype.handleResize = function () {
	        this.layout();
	    };
	    /**
	     * Handles pointer down events on the slider root element.
	     */
	    MDCSliderFoundation.prototype.handleDown = function (event) {
	        if (this.isDisabled)
	            return;
	        this.valueStartBeforeDownEvent = this.valueStart;
	        this.valueBeforeDownEvent = this.value;
	        var clientX = event.clientX != null ?
	            event.clientX :
	            event.targetTouches[0].clientX;
	        this.downEventClientX = clientX;
	        var value = this.mapClientXOnSliderScale(clientX);
	        this.thumb = this.getThumbFromDownEvent(clientX, value);
	        if (this.thumb === null)
	            return;
	        this.handleDragStart(event, value, this.thumb);
	        this.updateValue(value, this.thumb, { emitInputEvent: true });
	    };
	    /**
	     * Handles pointer move events on the slider root element.
	     */
	    MDCSliderFoundation.prototype.handleMove = function (event) {
	        if (this.isDisabled)
	            return;
	        // Prevent scrolling.
	        event.preventDefault();
	        var clientX = event.clientX != null ?
	            event.clientX :
	            event.targetTouches[0].clientX;
	        var dragAlreadyStarted = this.thumb != null;
	        this.thumb = this.getThumbFromMoveEvent(clientX);
	        if (this.thumb === null)
	            return;
	        var value = this.mapClientXOnSliderScale(clientX);
	        if (!dragAlreadyStarted) {
	            this.handleDragStart(event, value, this.thumb);
	            this.adapter.emitDragStartEvent(value, this.thumb);
	        }
	        this.updateValue(value, this.thumb, { emitInputEvent: true });
	    };
	    /**
	     * Handles pointer up events on the slider root element.
	     */
	    MDCSliderFoundation.prototype.handleUp = function () {
	        if (this.isDisabled || this.thumb === null)
	            return;
	        var oldValue = this.thumb === Thumb.START ?
	            this.valueStartBeforeDownEvent :
	            this.valueBeforeDownEvent;
	        var newValue = this.thumb === Thumb.START ? this.valueStart : this.value;
	        if (oldValue !== newValue) {
	            this.adapter.emitChangeEvent(newValue, this.thumb);
	        }
	        this.adapter.emitDragEndEvent(newValue, this.thumb);
	        this.thumb = null;
	    };
	    /**
	     * For range, discrete slider, shows the value indicator on both thumbs.
	     */
	    MDCSliderFoundation.prototype.handleThumbMouseenter = function () {
	        if (!this.isDiscrete || !this.isRange)
	            return;
	        this.adapter.addThumbClass(cssClasses$a.THUMB_WITH_INDICATOR, Thumb.START);
	        this.adapter.addThumbClass(cssClasses$a.THUMB_WITH_INDICATOR, Thumb.END);
	    };
	    /**
	     * For range, discrete slider, hides the value indicator on both thumbs.
	     */
	    MDCSliderFoundation.prototype.handleThumbMouseleave = function () {
	        if (!this.isDiscrete || !this.isRange)
	            return;
	        if (this.adapter.isInputFocused(Thumb.START) ||
	            this.adapter.isInputFocused(Thumb.END)) {
	            // Leave value indicator shown if either input is focused.
	            return;
	        }
	        this.adapter.removeThumbClass(cssClasses$a.THUMB_WITH_INDICATOR, Thumb.START);
	        this.adapter.removeThumbClass(cssClasses$a.THUMB_WITH_INDICATOR, Thumb.END);
	    };
	    MDCSliderFoundation.prototype.handleMousedownOrTouchstart = function (event) {
	        var _this = this;
	        var moveEventType = event.type === 'mousedown' ? 'mousemove' : 'touchmove';
	        // After a down event on the slider root, listen for move events on
	        // body (so the slider value is updated for events outside of the
	        // slider root).
	        this.adapter.registerBodyEventHandler(moveEventType, this.moveListener);
	        var upHandler = function () {
	            _this.handleUp();
	            // Once the drag is finished (up event on body), remove the move
	            // handler.
	            _this.adapter.deregisterBodyEventHandler(moveEventType, _this.moveListener);
	            // Also stop listening for subsequent up events.
	            _this.adapter.deregisterEventHandler('mouseup', upHandler);
	            _this.adapter.deregisterEventHandler('touchend', upHandler);
	        };
	        this.adapter.registerBodyEventHandler('mouseup', upHandler);
	        this.adapter.registerBodyEventHandler('touchend', upHandler);
	        this.handleDown(event);
	    };
	    MDCSliderFoundation.prototype.handlePointerdown = function (event) {
	        this.adapter.setPointerCapture(event.pointerId);
	        this.adapter.registerEventHandler('pointermove', this.moveListener);
	        this.handleDown(event);
	    };
	    /**
	     * Handles input `change` event by setting internal slider value to match
	     * input's new value.
	     */
	    MDCSliderFoundation.prototype.handleInputChange = function (thumb) {
	        var value = Number(this.adapter.getInputValue(thumb));
	        if (thumb === Thumb.START) {
	            this.setValueStart(value);
	        }
	        else {
	            this.setValue(value);
	        }
	        this.adapter.emitChangeEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
	        this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
	    };
	    /** Shows activated state and value indicator on thumb(s). */
	    MDCSliderFoundation.prototype.handleInputFocus = function (thumb) {
	        this.adapter.addThumbClass(cssClasses$a.THUMB_FOCUSED, thumb);
	        if (!this.isDiscrete)
	            return;
	        this.adapter.addThumbClass(cssClasses$a.THUMB_WITH_INDICATOR, thumb);
	        if (this.isRange) {
	            var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;
	            this.adapter.addThumbClass(cssClasses$a.THUMB_WITH_INDICATOR, otherThumb);
	        }
	    };
	    /** Removes activated state and value indicator from thumb(s). */
	    MDCSliderFoundation.prototype.handleInputBlur = function (thumb) {
	        this.adapter.removeThumbClass(cssClasses$a.THUMB_FOCUSED, thumb);
	        if (!this.isDiscrete)
	            return;
	        this.adapter.removeThumbClass(cssClasses$a.THUMB_WITH_INDICATOR, thumb);
	        if (this.isRange) {
	            var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;
	            this.adapter.removeThumbClass(cssClasses$a.THUMB_WITH_INDICATOR, otherThumb);
	        }
	    };
	    /**
	     * Emits custom dragStart event, along with focusing the underlying input.
	     */
	    MDCSliderFoundation.prototype.handleDragStart = function (event, value, thumb) {
	        this.adapter.emitDragStartEvent(value, thumb);
	        this.adapter.focusInput(thumb);
	        // Prevent the input (that we just focused) from losing focus.
	        event.preventDefault();
	    };
	    /**
	     * @return The thumb to be moved based on initial down event.
	     */
	    MDCSliderFoundation.prototype.getThumbFromDownEvent = function (clientX, value) {
	        // For single point slider, thumb to be moved is always the END (only)
	        // thumb.
	        if (!this.isRange)
	            return Thumb.END;
	        // Check if event press point is in the bounds of any thumb.
	        var thumbStartRect = this.adapter.getThumbBoundingClientRect(Thumb.START);
	        var thumbEndRect = this.adapter.getThumbBoundingClientRect(Thumb.END);
	        var inThumbStartBounds = clientX >= thumbStartRect.left && clientX <= thumbStartRect.right;
	        var inThumbEndBounds = clientX >= thumbEndRect.left && clientX <= thumbEndRect.right;
	        if (inThumbStartBounds && inThumbEndBounds) {
	            // Thumbs overlapping. Thumb to be moved cannot be determined yet.
	            return null;
	        }
	        // If press is in bounds for either thumb on down event, that's the thumb
	        // to be moved.
	        if (inThumbStartBounds) {
	            return Thumb.START;
	        }
	        if (inThumbEndBounds) {
	            return Thumb.END;
	        }
	        // For presses outside the range, return whichever thumb is closer.
	        if (value < this.valueStart) {
	            return Thumb.START;
	        }
	        if (value > this.value) {
	            return Thumb.END;
	        }
	        // For presses inside the range, return whichever thumb is closer.
	        return (value - this.valueStart <= this.value - value) ? Thumb.START :
	            Thumb.END;
	    };
	    /**
	     * @return The thumb to be moved based on move event (based on drag
	     *     direction from original down event). Only applicable if thumbs
	     *     were overlapping in the down event.
	     */
	    MDCSliderFoundation.prototype.getThumbFromMoveEvent = function (clientX) {
	        // Thumb has already been chosen.
	        if (this.thumb !== null)
	            return this.thumb;
	        if (this.downEventClientX === null) {
	            throw new Error('`downEventClientX` is null after move event.');
	        }
	        var moveDistanceUnderThreshold = Math.abs(this.downEventClientX - clientX) < numbers$5.THUMB_UPDATE_MIN_PX;
	        if (moveDistanceUnderThreshold)
	            return this.thumb;
	        var draggedThumbToLeft = clientX < this.downEventClientX;
	        if (draggedThumbToLeft) {
	            return this.adapter.isRTL() ? Thumb.END : Thumb.START;
	        }
	        else {
	            return this.adapter.isRTL() ? Thumb.START : Thumb.END;
	        }
	    };
	    /**
	     * Updates UI based on internal state.
	     * @param thumb Thumb whose value is being updated. If undefined, UI is
	     *     updated for both thumbs based on current internal state.
	     */
	    MDCSliderFoundation.prototype.updateUI = function (thumb) {
	        this.updateThumbAndInputAttributes(thumb);
	        this.updateThumbAndTrackUI(thumb);
	        this.updateValueIndicatorUI(thumb);
	        this.updateTickMarksUI();
	    };
	    /**
	     * Updates thumb and input attributes based on current value.
	     * @param thumb Thumb whose aria attributes to update.
	     */
	    MDCSliderFoundation.prototype.updateThumbAndInputAttributes = function (thumb) {
	        if (!thumb)
	            return;
	        var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;
	        var valueStr = String(value);
	        this.adapter.setInputAttribute(attributes$1.INPUT_VALUE, valueStr, thumb);
	        if (this.isRange && thumb === Thumb.START) {
	            this.adapter.setInputAttribute(attributes$1.INPUT_MIN, valueStr, Thumb.END);
	        }
	        else if (this.isRange && thumb === Thumb.END) {
	            this.adapter.setInputAttribute(attributes$1.INPUT_MAX, valueStr, Thumb.START);
	        }
	        // Sync attribute with property.
	        if (this.adapter.getInputValue(thumb) !== valueStr) {
	            this.adapter.setInputValue(valueStr, thumb);
	        }
	        var valueToAriaValueTextFn = this.adapter.getValueToAriaValueTextFn();
	        if (valueToAriaValueTextFn) {
	            this.adapter.setInputAttribute(attributes$1.ARIA_VALUETEXT, valueToAriaValueTextFn(value), thumb);
	        }
	    };
	    /**
	     * Updates value indicator UI based on current value.
	     * @param thumb Thumb whose value indicator to update. If undefined, all
	     *     thumbs' value indicators are updated.
	     */
	    MDCSliderFoundation.prototype.updateValueIndicatorUI = function (thumb) {
	        if (!this.isDiscrete)
	            return;
	        var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;
	        this.adapter.setValueIndicatorText(value, thumb === Thumb.START ? Thumb.START : Thumb.END);
	        if (!thumb && this.isRange) {
	            this.adapter.setValueIndicatorText(this.valueStart, Thumb.START);
	        }
	    };
	    /**
	     * Updates tick marks UI within slider, based on current min, max, and step.
	     */
	    MDCSliderFoundation.prototype.updateTickMarksUI = function () {
	        if (!this.isDiscrete || !this.hasTickMarks)
	            return;
	        var numTickMarksInactiveStart = (this.valueStart - this.min) / this.step;
	        var numTickMarksActive = (this.value - this.valueStart) / this.step + 1;
	        var numTickMarksInactiveEnd = (this.max - this.value) / this.step;
	        var tickMarksInactiveStart = Array.from({ length: numTickMarksInactiveStart })
	            .fill(TickMark.INACTIVE);
	        var tickMarksActive = Array.from({ length: numTickMarksActive })
	            .fill(TickMark.ACTIVE);
	        var tickMarksInactiveEnd = Array.from({ length: numTickMarksInactiveEnd })
	            .fill(TickMark.INACTIVE);
	        this.adapter.updateTickMarks(tickMarksInactiveStart.concat(tickMarksActive)
	            .concat(tickMarksInactiveEnd));
	    };
	    /** Maps clientX to a value on the slider scale. */
	    MDCSliderFoundation.prototype.mapClientXOnSliderScale = function (clientX) {
	        var xPos = clientX - this.rect.left;
	        var pctComplete = xPos / this.rect.width;
	        if (this.adapter.isRTL()) {
	            pctComplete = 1 - pctComplete;
	        }
	        // Fit the percentage complete between the range [min,max]
	        // by remapping from [0, 1] to [min, min+(max-min)].
	        var value = this.min + pctComplete * (this.max - this.min);
	        if (value === this.max || value === this.min) {
	            return value;
	        }
	        return Number(this.quantize(value).toFixed(this.numDecimalPlaces));
	    };
	    /** Calculates the quantized value based on step value. */
	    MDCSliderFoundation.prototype.quantize = function (value) {
	        var numSteps = Math.round((value - this.min) / this.step);
	        return this.min + numSteps * this.step;
	    };
	    /**
	     * Updates slider value (internal state and UI) based on the given value.
	     */
	    MDCSliderFoundation.prototype.updateValue = function (value, thumb, _a) {
	        var _b = _a === void 0 ? {} : _a, emitInputEvent = _b.emitInputEvent;
	        value = this.clampValue(value, thumb);
	        if (this.isRange && thumb === Thumb.START) {
	            // Exit early if current value is the same as the new value.
	            if (this.valueStart === value)
	                return;
	            this.valueStart = value;
	        }
	        else {
	            // Exit early if current value is the same as the new value.
	            if (this.value === value)
	                return;
	            this.value = value;
	        }
	        this.updateUI(thumb);
	        if (emitInputEvent) {
	            this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
	        }
	    };
	    /**
	     * Clamps the given value for the given thumb based on slider properties:
	     * - Restricts value within [min, max].
	     * - If range slider, clamp start value <= end value, and
	     *   end value >= start value.
	     */
	    MDCSliderFoundation.prototype.clampValue = function (value, thumb) {
	        // Clamp value to [min, max] range.
	        value = Math.min(Math.max(value, this.min), this.max);
	        var thumbStartMovedPastThumbEnd = this.isRange && thumb === Thumb.START && value > this.value;
	        if (thumbStartMovedPastThumbEnd) {
	            return this.value;
	        }
	        var thumbEndMovedPastThumbStart = this.isRange && thumb === Thumb.END && value < this.valueStart;
	        if (thumbEndMovedPastThumbStart) {
	            return this.valueStart;
	        }
	        return value;
	    };
	    /**
	     * Updates the active track and thumb style properties to reflect current
	     * value.
	     */
	    MDCSliderFoundation.prototype.updateThumbAndTrackUI = function (thumb) {
	        var _this = this;
	        var _a = this, max = _a.max, min = _a.min;
	        var pctComplete = (this.value - this.valueStart) / (max - min);
	        var rangePx = pctComplete * this.rect.width;
	        var isRtl = this.adapter.isRTL();
	        var transformProp = HAS_WINDOW$1 ? getCorrectPropertyName(window, 'transform') : 'transform';
	        if (this.isRange) {
	            var thumbLeftPos_1 = this.adapter.isRTL() ?
	                (max - this.value) / (max - min) * this.rect.width :
	                (this.valueStart - min) / (max - min) * this.rect.width;
	            var thumbRightPos_1 = thumbLeftPos_1 + rangePx;
	            this.animFrame.request(AnimationKeys$1.SLIDER_UPDATE, function () {
	                // Set active track styles, accounting for animation direction by
	                // setting `transform-origin`.
	                var trackAnimatesFromRight = (!isRtl && thumb === Thumb.START) ||
	                    (isRtl && thumb !== Thumb.START);
	                if (trackAnimatesFromRight) {
	                    _this.adapter.setTrackActiveStyleProperty('transform-origin', 'right');
	                    _this.adapter.setTrackActiveStyleProperty('left', 'unset');
	                    _this.adapter.setTrackActiveStyleProperty('right', _this.rect.width - thumbRightPos_1 + "px");
	                }
	                else {
	                    _this.adapter.setTrackActiveStyleProperty('transform-origin', 'left');
	                    _this.adapter.setTrackActiveStyleProperty('right', 'unset');
	                    _this.adapter.setTrackActiveStyleProperty('left', thumbLeftPos_1 + "px");
	                }
	                _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
	                // Set thumb styles.
	                var thumbStartPos = isRtl ? thumbRightPos_1 : thumbLeftPos_1;
	                var thumbEndPos = _this.adapter.isRTL() ? thumbLeftPos_1 : thumbRightPos_1;
	                if (thumb === Thumb.START || !thumb || !_this.initialStylesRemoved) {
	                    _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", Thumb.START);
	                }
	                if (thumb === Thumb.END || !thumb || !_this.initialStylesRemoved) {
	                    _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbEndPos + "px)", Thumb.END);
	                }
	                _this.removeInitialStyles(isRtl);
	                _this.updateOverlappingThumbsUI(thumbStartPos, thumbEndPos, thumb);
	            });
	        }
	        else {
	            this.animFrame.request(AnimationKeys$1.SLIDER_UPDATE, function () {
	                var thumbStartPos = isRtl ? _this.rect.width - rangePx : rangePx;
	                _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", Thumb.END);
	                _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
	                _this.removeInitialStyles(isRtl);
	            });
	        }
	    };
	    /**
	     * Removes initial inline styles if not already removed. `left:<...>%`
	     * inline styles can be added to position the thumb correctly before JS
	     * initialization. However, they need to be removed before the JS starts
	     * positioning the thumb. This is because the JS uses
	     * `transform:translateX(<...>)px` (for performance reasons) to position
	     * the thumb (which is not possible for initial styles since we need the
	     * bounding rect measurements).
	     */
	    MDCSliderFoundation.prototype.removeInitialStyles = function (isRtl) {
	        if (this.initialStylesRemoved)
	            return;
	        // Remove thumb position properties that were added for initial render.
	        var position = isRtl ? 'right' : 'left';
	        this.adapter.removeThumbStyleProperty(position, Thumb.END);
	        if (this.isRange) {
	            this.adapter.removeThumbStyleProperty(position, Thumb.START);
	        }
	        this.initialStylesRemoved = true;
	        this.resetTrackAndThumbAnimation();
	    };
	    /**
	     * Resets track/thumb animation to prevent animation when adding
	     * `transform` styles to thumb initially.
	     */
	    MDCSliderFoundation.prototype.resetTrackAndThumbAnimation = function () {
	        var _this = this;
	        if (!this.isDiscrete)
	            return;
	        // Set transition properties to default (no animation), so that the
	        // newly added `transform` styles do not animate thumb/track from
	        // their default positions.
	        var transitionProp = HAS_WINDOW$1 ?
	            getCorrectPropertyName(window, 'transition') :
	            'transition';
	        var transitionDefault = 'all 0s ease 0s';
	        this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.END);
	        if (this.isRange) {
	            this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.START);
	        }
	        this.adapter.setTrackActiveStyleProperty(transitionProp, transitionDefault);
	        // In the next frame, remove the transition inline styles we just
	        // added, such that any animations added in the CSS can now take effect.
	        requestAnimationFrame(function () {
	            _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.END);
	            _this.adapter.removeTrackActiveStyleProperty(transitionProp);
	            if (_this.isRange) {
	                _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.START);
	            }
	        });
	    };
	    /**
	     * Adds THUMB_TOP class to active thumb if thumb knobs overlap; otherwise
	     * removes THUMB_TOP class from both thumbs.
	     * @param thumb Thumb that is active (being moved).
	     */
	    MDCSliderFoundation.prototype.updateOverlappingThumbsUI = function (thumbStartPos, thumbEndPos, thumb) {
	        var thumbsOverlap = false;
	        if (this.adapter.isRTL()) {
	            var startThumbLeftEdge = thumbStartPos - this.startThumbKnobWidth / 2;
	            var endThumbRightEdge = thumbEndPos + this.endThumbKnobWidth / 2;
	            thumbsOverlap = endThumbRightEdge >= startThumbLeftEdge;
	        }
	        else {
	            var startThumbRightEdge = thumbStartPos + this.startThumbKnobWidth / 2;
	            var endThumbLeftEdge = thumbEndPos - this.endThumbKnobWidth / 2;
	            thumbsOverlap = startThumbRightEdge >= endThumbLeftEdge;
	        }
	        if (thumbsOverlap) {
	            this.adapter.addThumbClass(cssClasses$a.THUMB_TOP, 
	            // If no thumb was dragged (in the case of initial layout), end
	            // thumb is on top by default.
	            thumb || Thumb.END);
	            this.adapter.removeThumbClass(cssClasses$a.THUMB_TOP, thumb === Thumb.START ? Thumb.END : Thumb.START);
	        }
	        else {
	            this.adapter.removeThumbClass(cssClasses$a.THUMB_TOP, Thumb.START);
	            this.adapter.removeThumbClass(cssClasses$a.THUMB_TOP, Thumb.END);
	        }
	    };
	    /**
	     * Converts attribute value to a number, e.g. '100' => 100. Throws errors
	     * for invalid values.
	     * @param attributeValue Attribute value, e.g. 100.
	     * @param attributeName Attribute name, e.g. `aria-valuemax`.
	     */
	    MDCSliderFoundation.prototype.convertAttributeValueToNumber = function (attributeValue, attributeName) {
	        if (attributeValue === null) {
	            throw new Error("MDCSliderFoundation: `" + attributeName + "` must be non-null.");
	        }
	        var value = Number(attributeValue);
	        if (isNaN(value)) {
	            throw new Error("MDCSliderFoundation: `" + attributeName + "` value is " +
	                ("`" + attributeValue + "`, but must be a number."));
	        }
	        return value;
	    };
	    /** Checks that the given properties are valid slider values. */
	    MDCSliderFoundation.prototype.validateProperties = function (_a) {
	        var min = _a.min, max = _a.max, value = _a.value, valueStart = _a.valueStart, step = _a.step;
	        if (min >= max) {
	            throw new Error("MDCSliderFoundation: min must be strictly less than max. " +
	                ("Current: [min: " + min + ", max: " + max + "]"));
	        }
	        if (step <= 0) {
	            throw new Error("MDCSliderFoundation: step must be a positive number. " +
	                ("Current step: " + this.step));
	        }
	        if (this.isRange) {
	            if (value < min || value > max || valueStart < min || valueStart > max) {
	                throw new Error("MDCSliderFoundation: values must be in [min, max] range. " +
	                    ("Current values: [start value: " + valueStart + ", end value: " + value + "]"));
	            }
	            if (valueStart > value) {
	                throw new Error("MDCSliderFoundation: start value must be <= end value. " +
	                    ("Current values: [start value: " + valueStart + ", end value: " + value + "]"));
	            }
	            var numStepsValueStartFromMin = (valueStart - min) / step;
	            var numStepsValueFromMin = (value - min) / step;
	            if ((numStepsValueStartFromMin % 1) !== 0 ||
	                (numStepsValueFromMin % 1) !== 0) {
	                throw new Error("MDCSliderFoundation: Slider values must be valid based on the " +
	                    ("step value. Current values: [start value: " + valueStart + ", ") +
	                    ("end value: " + value + "]"));
	            }
	        }
	        else { // Single point slider.
	            if (value < min || value > max) {
	                throw new Error("MDCSliderFoundation: value must be in [min, max] range. " +
	                    ("Current value: " + value));
	            }
	            var numStepsValueFromMin = (value - min) / step;
	            if ((numStepsValueFromMin % 1) !== 0) {
	                throw new Error("MDCSliderFoundation: Slider value must be valid based on the " +
	                    ("step value. Current value: " + value));
	            }
	        }
	    };
	    MDCSliderFoundation.prototype.registerEventHandlers = function () {
	        this.adapter.registerWindowEventHandler('resize', this.resizeListener);
	        if (MDCSliderFoundation.SUPPORTS_POINTER_EVENTS) {
	            // If supported, use pointer events API with #setPointerCapture.
	            this.adapter.registerEventHandler('pointerdown', this.pointerdownListener);
	            this.adapter.registerEventHandler('pointerup', this.pointerupListener);
	        }
	        else {
	            // Otherwise, fall back to mousedown/touchstart events.
	            this.adapter.registerEventHandler('mousedown', this.mousedownOrTouchstartListener);
	            this.adapter.registerEventHandler('touchstart', this.mousedownOrTouchstartListener);
	        }
	        if (this.isRange) {
	            this.adapter.registerThumbEventHandler(Thumb.START, 'mouseenter', this.thumbMouseenterListener);
	            this.adapter.registerThumbEventHandler(Thumb.START, 'mouseleave', this.thumbMouseleaveListener);
	            this.adapter.registerInputEventHandler(Thumb.START, 'change', this.inputStartChangeListener);
	            this.adapter.registerInputEventHandler(Thumb.START, 'focus', this.inputStartFocusListener);
	            this.adapter.registerInputEventHandler(Thumb.START, 'blur', this.inputStartBlurListener);
	        }
	        this.adapter.registerThumbEventHandler(Thumb.END, 'mouseenter', this.thumbMouseenterListener);
	        this.adapter.registerThumbEventHandler(Thumb.END, 'mouseleave', this.thumbMouseleaveListener);
	        this.adapter.registerInputEventHandler(Thumb.END, 'change', this.inputEndChangeListener);
	        this.adapter.registerInputEventHandler(Thumb.END, 'focus', this.inputEndFocusListener);
	        this.adapter.registerInputEventHandler(Thumb.END, 'blur', this.inputEndBlurListener);
	    };
	    MDCSliderFoundation.prototype.deregisterEventHandlers = function () {
	        this.adapter.deregisterWindowEventHandler('resize', this.resizeListener);
	        if (MDCSliderFoundation.SUPPORTS_POINTER_EVENTS) {
	            this.adapter.deregisterEventHandler('pointerdown', this.pointerdownListener);
	            this.adapter.deregisterEventHandler('pointerup', this.pointerupListener);
	        }
	        else {
	            this.adapter.deregisterEventHandler('mousedown', this.mousedownOrTouchstartListener);
	            this.adapter.deregisterEventHandler('touchstart', this.mousedownOrTouchstartListener);
	        }
	        if (this.isRange) {
	            this.adapter.deregisterThumbEventHandler(Thumb.START, 'mouseenter', this.thumbMouseenterListener);
	            this.adapter.deregisterThumbEventHandler(Thumb.START, 'mouseleave', this.thumbMouseleaveListener);
	            this.adapter.deregisterInputEventHandler(Thumb.START, 'change', this.inputStartChangeListener);
	            this.adapter.deregisterInputEventHandler(Thumb.START, 'focus', this.inputStartFocusListener);
	            this.adapter.deregisterInputEventHandler(Thumb.START, 'blur', this.inputStartBlurListener);
	        }
	        this.adapter.deregisterThumbEventHandler(Thumb.END, 'mouseenter', this.thumbMouseenterListener);
	        this.adapter.deregisterThumbEventHandler(Thumb.END, 'mouseleave', this.thumbMouseleaveListener);
	        this.adapter.deregisterInputEventHandler(Thumb.END, 'change', this.inputEndChangeListener);
	        this.adapter.deregisterInputEventHandler(Thumb.END, 'focus', this.inputEndFocusListener);
	        this.adapter.deregisterInputEventHandler(Thumb.END, 'blur', this.inputEndBlurListener);
	    };
	    MDCSliderFoundation.prototype.handlePointerup = function () {
	        this.handleUp();
	        this.adapter.deregisterEventHandler('pointermove', this.moveListener);
	    };
	    MDCSliderFoundation.SUPPORTS_POINTER_EVENTS = HAS_WINDOW$1 && Boolean(window.PointerEvent) &&
	        // #setPointerCapture is buggy on iOS, so we can't use pointer events
	        // until the following bug is fixed:
	        // https://bugs.webkit.org/show_bug.cgi?id=220196
	        !isIOS();
	    return MDCSliderFoundation;
	}(MDCFoundation));
	function isIOS() {
	    // Source:
	    // https://stackoverflow.com/questions/9038625/detect-if-device-is-ios
	    return [
	        'iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone',
	        'iPod'
	    ].includes(navigator.platform)
	        // iPad on iOS 13 detection
	        || (navigator.userAgent.includes('Mac') && 'ontouchend' in document);
	}
	/**
	 * Given a number, returns the number of digits that appear after the
	 * decimal point.
	 * See
	 * https://stackoverflow.com/questions/9539513/is-there-a-reliable-way-in-javascript-to-obtain-the-number-of-decimal-places-of
	 */
	function getNumDecimalPlaces(n) {
	    // Pull out the fraction and the exponent.
	    var match = /(?:\.(\d+))?(?:[eE]([+\-]?\d+))?$/.exec(String(n));
	    // NaN or Infinity or integer.
	    // We arbitrarily decide that Infinity is integral.
	    if (!match)
	        return 0;
	    var fraction = match[1] || ''; // E.g. 1.234e-2 => 234
	    var exponent = match[2] || 0; // E.g. 1.234e-2 => -2
	    // Count the number of digits in the fraction and subtract the
	    // exponent to simulate moving the decimal point left by exponent places.
	    // 1.234e+2 has 1 fraction digit and '234'.length -  2 == 1
	    // 1.234e-2 has 5 fraction digit and '234'.length - -2 == 5
	    return Math.max(0, // lower limit
	    (fraction === '0' ? 0 : fraction.length) - Number(exponent));
	}

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/** Vanilla JS implementation of slider component. */
	var MDCSlider = /** @class */ (function (_super) {
	    __extends(MDCSlider, _super);
	    function MDCSlider() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.skipInitialUIUpdate = false;
	        // Function that maps a slider value to the value of the `aria-valuetext`
	        // attribute on the thumb element.
	        _this.valueToAriaValueTextFn = null;
	        return _this;
	    }
	    MDCSlider.attachTo = function (root, options) {
	        if (options === void 0) { options = {}; }
	        return new MDCSlider(root, undefined, options);
	    };
	    MDCSlider.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // tslint:disable:object-literal-sort-keys Methods should be in the same
	        // order as the adapter interface.
	        var adapter = {
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            addThumbClass: function (className, thumb) {
	                _this.getThumbEl(thumb).classList.add(className);
	            },
	            removeThumbClass: function (className, thumb) {
	                _this.getThumbEl(thumb).classList.remove(className);
	            },
	            getAttribute: function (attribute) { return _this.root.getAttribute(attribute); },
	            getInputValue: function (thumb) { return _this.getInput(thumb).value; },
	            setInputValue: function (value, thumb) {
	                _this.getInput(thumb).value = value;
	            },
	            getInputAttribute: function (attribute, thumb) {
	                return _this.getInput(thumb).getAttribute(attribute);
	            },
	            setInputAttribute: function (attribute, value, thumb) {
	                _this.getInput(thumb).setAttribute(attribute, value);
	            },
	            removeInputAttribute: function (attribute, thumb) {
	                _this.getInput(thumb).removeAttribute(attribute);
	            },
	            focusInput: function (thumb) {
	                _this.getInput(thumb).focus();
	            },
	            isInputFocused: function (thumb) {
	                return _this.getInput(thumb) === document.activeElement;
	            },
	            getThumbKnobWidth: function (thumb) {
	                return _this.getThumbEl(thumb)
	                    .querySelector("." + cssClasses$a.THUMB_KNOB)
	                    .getBoundingClientRect()
	                    .width;
	            },
	            getThumbBoundingClientRect: function (thumb) {
	                return _this.getThumbEl(thumb).getBoundingClientRect();
	            },
	            getBoundingClientRect: function () { return _this.root.getBoundingClientRect(); },
	            isRTL: function () { return getComputedStyle(_this.root).direction === 'rtl'; },
	            setThumbStyleProperty: function (propertyName, value, thumb) {
	                _this.getThumbEl(thumb).style.setProperty(propertyName, value);
	            },
	            removeThumbStyleProperty: function (propertyName, thumb) {
	                _this.getThumbEl(thumb).style.removeProperty(propertyName);
	            },
	            setTrackActiveStyleProperty: function (propertyName, value) {
	                _this.trackActive.style.setProperty(propertyName, value);
	            },
	            removeTrackActiveStyleProperty: function (propertyName) {
	                _this.trackActive.style.removeProperty(propertyName);
	            },
	            setValueIndicatorText: function (value, thumb) {
	                var valueIndicatorEl = _this.getThumbEl(thumb).querySelector("." + cssClasses$a.VALUE_INDICATOR_TEXT);
	                valueIndicatorEl.textContent = String(value);
	            },
	            getValueToAriaValueTextFn: function () { return _this.valueToAriaValueTextFn; },
	            updateTickMarks: function (tickMarks) {
	                var tickMarksContainer = _this.root.querySelector("." + cssClasses$a.TICK_MARKS_CONTAINER);
	                if (!tickMarksContainer) {
	                    tickMarksContainer = document.createElement('div');
	                    tickMarksContainer.classList.add(cssClasses$a.TICK_MARKS_CONTAINER);
	                    var track = _this.root.querySelector("." + cssClasses$a.TRACK);
	                    track.appendChild(tickMarksContainer);
	                }
	                if (tickMarks.length !== tickMarksContainer.children.length) {
	                    while (tickMarksContainer.firstChild) {
	                        tickMarksContainer.removeChild(tickMarksContainer.firstChild);
	                    }
	                    _this.addTickMarks(tickMarksContainer, tickMarks);
	                }
	                else {
	                    _this.updateTickMarks(tickMarksContainer, tickMarks);
	                }
	            },
	            setPointerCapture: function (pointerId) {
	                _this.root.setPointerCapture(pointerId);
	            },
	            emitChangeEvent: function (value, thumb) {
	                _this.emit(events$1.CHANGE, { value: value, thumb: thumb });
	            },
	            emitInputEvent: function (value, thumb) {
	                _this.emit(events$1.INPUT, { value: value, thumb: thumb });
	            },
	            emitDragStartEvent: function (_, thumb) {
	                // Emitting event is not yet implemented. See issue:
	                // https://github.com/material-components/material-components-web/issues/6448
	                _this.getRipple(thumb).activate();
	            },
	            emitDragEndEvent: function (_, thumb) {
	                // Emitting event is not yet implemented. See issue:
	                // https://github.com/material-components/material-components-web/issues/6448
	                _this.getRipple(thumb).deactivate();
	            },
	            registerEventHandler: function (evtType, handler) {
	                _this.listen(evtType, handler);
	            },
	            deregisterEventHandler: function (evtType, handler) {
	                _this.unlisten(evtType, handler);
	            },
	            registerThumbEventHandler: function (thumb, evtType, handler) {
	                _this.getThumbEl(thumb).addEventListener(evtType, handler);
	            },
	            deregisterThumbEventHandler: function (thumb, evtType, handler) {
	                _this.getThumbEl(thumb).removeEventListener(evtType, handler);
	            },
	            registerInputEventHandler: function (thumb, evtType, handler) {
	                _this.getInput(thumb).addEventListener(evtType, handler);
	            },
	            deregisterInputEventHandler: function (thumb, evtType, handler) {
	                _this.getInput(thumb).removeEventListener(evtType, handler);
	            },
	            registerBodyEventHandler: function (evtType, handler) {
	                document.body.addEventListener(evtType, handler);
	            },
	            deregisterBodyEventHandler: function (evtType, handler) {
	                document.body.removeEventListener(evtType, handler);
	            },
	            registerWindowEventHandler: function (evtType, handler) {
	                window.addEventListener(evtType, handler);
	            },
	            deregisterWindowEventHandler: function (evtType, handler) {
	                window.removeEventListener(evtType, handler);
	            },
	            // tslint:enable:object-literal-sort-keys
	        };
	        return new MDCSliderFoundation(adapter);
	    };
	    /**
	     * Initializes component, with the following options:
	     * - `skipInitialUIUpdate`: Whether to skip updating the UI when initially
	     *   syncing with the DOM. This should be enabled when the slider position
	     *   is set before component initialization.
	     */
	    MDCSlider.prototype.initialize = function (_a) {
	        var _b = _a === void 0 ? {} : _a, skipInitialUIUpdate = _b.skipInitialUIUpdate;
	        this.inputs =
	            [].slice.call(this.root.querySelectorAll("." + cssClasses$a.INPUT));
	        this.thumbs =
	            [].slice.call(this.root.querySelectorAll("." + cssClasses$a.THUMB));
	        this.trackActive =
	            this.root.querySelector("." + cssClasses$a.TRACK_ACTIVE);
	        this.ripples = this.createRipples();
	        if (skipInitialUIUpdate) {
	            this.skipInitialUIUpdate = true;
	        }
	    };
	    MDCSlider.prototype.initialSyncWithDOM = function () {
	        this.foundation.layout({ skipUpdateUI: this.skipInitialUIUpdate });
	    };
	    /** Redraws UI based on DOM (e.g. element dimensions, RTL). */
	    MDCSlider.prototype.layout = function () {
	        this.foundation.layout();
	    };
	    MDCSlider.prototype.getValueStart = function () {
	        return this.foundation.getValueStart();
	    };
	    MDCSlider.prototype.setValueStart = function (valueStart) {
	        this.foundation.setValueStart(valueStart);
	    };
	    MDCSlider.prototype.getValue = function () {
	        return this.foundation.getValue();
	    };
	    MDCSlider.prototype.setValue = function (value) {
	        this.foundation.setValue(value);
	    };
	    /** @return Slider disabled state. */
	    MDCSlider.prototype.getDisabled = function () {
	        return this.foundation.getDisabled();
	    };
	    /** Sets slider disabled state. */
	    MDCSlider.prototype.setDisabled = function (disabled) {
	        this.foundation.setDisabled(disabled);
	    };
	    /**
	     * Sets a function that maps the slider value to the value of the
	     * `aria-valuetext` attribute on the thumb element.
	     */
	    MDCSlider.prototype.setValueToAriaValueTextFn = function (mapFn) {
	        this.valueToAriaValueTextFn = mapFn;
	    };
	    MDCSlider.prototype.getThumbEl = function (thumb) {
	        return thumb === Thumb.END ? this.thumbs[this.thumbs.length - 1] :
	            this.thumbs[0];
	    };
	    MDCSlider.prototype.getInput = function (thumb) {
	        return thumb === Thumb.END ? this.inputs[this.inputs.length - 1] :
	            this.inputs[0];
	    };
	    MDCSlider.prototype.getRipple = function (thumb) {
	        return thumb === Thumb.END ? this.ripples[this.ripples.length - 1] :
	            this.ripples[0];
	    };
	    /** Adds tick mark elements to the given container. */
	    MDCSlider.prototype.addTickMarks = function (tickMarkContainer, tickMarks) {
	        var fragment = document.createDocumentFragment();
	        for (var i = 0; i < tickMarks.length; i++) {
	            var div = document.createElement('div');
	            var tickMarkClass = tickMarks[i] === TickMark.ACTIVE ?
	                cssClasses$a.TICK_MARK_ACTIVE :
	                cssClasses$a.TICK_MARK_INACTIVE;
	            div.classList.add(tickMarkClass);
	            fragment.appendChild(div);
	        }
	        tickMarkContainer.appendChild(fragment);
	    };
	    /** Updates tick mark elements' classes in the given container. */
	    MDCSlider.prototype.updateTickMarks = function (tickMarkContainer, tickMarks) {
	        var tickMarkEls = Array.from(tickMarkContainer.children);
	        for (var i = 0; i < tickMarkEls.length; i++) {
	            if (tickMarks[i] === TickMark.ACTIVE) {
	                tickMarkEls[i].classList.add(cssClasses$a.TICK_MARK_ACTIVE);
	                tickMarkEls[i].classList.remove(cssClasses$a.TICK_MARK_INACTIVE);
	            }
	            else {
	                tickMarkEls[i].classList.add(cssClasses$a.TICK_MARK_INACTIVE);
	                tickMarkEls[i].classList.remove(cssClasses$a.TICK_MARK_ACTIVE);
	            }
	        }
	    };
	    /** Initializes thumb ripples. */
	    MDCSlider.prototype.createRipples = function () {
	        var ripples = [];
	        var rippleSurfaces = [].slice.call(this.root.querySelectorAll("." + cssClasses$a.THUMB));
	        var _loop_1 = function (i) {
	            var rippleSurface = rippleSurfaces[i];
	            // Use the corresponding input as the focus source for the ripple (i.e.
	            // when the input is focused, the ripple is in the focused state).
	            var input = this_1.inputs[i];
	            var adapter = __assign(__assign({}, MDCRipple.createAdapter(this_1)), { addClass: function (className) {
	                    rippleSurface.classList.add(className);
	                }, computeBoundingRect: function () { return rippleSurface.getBoundingClientRect(); }, deregisterInteractionHandler: function (evtType, handler) {
	                    input.removeEventListener(evtType, handler);
	                }, isSurfaceActive: function () { return matches$2(input, ':active'); }, isUnbounded: function () { return true; }, registerInteractionHandler: function (evtType, handler) {
	                    input.addEventListener(evtType, handler, applyPassive());
	                }, removeClass: function (className) {
	                    rippleSurface.classList.remove(className);
	                }, updateCssVariable: function (varName, value) {
	                    rippleSurface.style.setProperty(varName, value);
	                } });
	            var ripple = new MDCRipple(rippleSurface, new MDCRippleFoundation(adapter));
	            ripple.unbounded = true;
	            ripples.push(ripple);
	        };
	        var this_1 = this;
	        for (var i = 0; i < rippleSurfaces.length; i++) {
	            _loop_1(i);
	        }
	        return ripples;
	    };
	    return MDCSlider;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$a = {
		__proto__: null,
		MDCSlider: MDCSlider,
		cssClasses: cssClasses$a,
		numbers: numbers$5,
		attributes: attributes$1,
		events: events$1,
		MDCSliderFoundation: MDCSliderFoundation,
		get TickMark () { return TickMark; },
		get Thumb () { return Thumb; }
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$9 = {
	    CLOSING: 'mdc-snackbar--closing',
	    OPEN: 'mdc-snackbar--open',
	    OPENING: 'mdc-snackbar--opening',
	};
	var strings$c = {
	    ACTION_SELECTOR: '.mdc-snackbar__action',
	    ARIA_LIVE_LABEL_TEXT_ATTR: 'data-mdc-snackbar-label-text',
	    CLOSED_EVENT: 'MDCSnackbar:closed',
	    CLOSING_EVENT: 'MDCSnackbar:closing',
	    DISMISS_SELECTOR: '.mdc-snackbar__dismiss',
	    LABEL_SELECTOR: '.mdc-snackbar__label',
	    OPENED_EVENT: 'MDCSnackbar:opened',
	    OPENING_EVENT: 'MDCSnackbar:opening',
	    REASON_ACTION: 'action',
	    REASON_DISMISS: 'dismiss',
	    SURFACE_SELECTOR: '.mdc-snackbar__surface',
	};
	var numbers$4 = {
	    DEFAULT_AUTO_DISMISS_TIMEOUT_MS: 5000,
	    INDETERMINATE: -1,
	    MAX_AUTO_DISMISS_TIMEOUT_MS: 10000,
	    MIN_AUTO_DISMISS_TIMEOUT_MS: 4000,
	    // These variables need to be kept in sync with the values in _variables.scss.
	    SNACKBAR_ANIMATION_CLOSE_TIME_MS: 75,
	    SNACKBAR_ANIMATION_OPEN_TIME_MS: 150,
	    /**
	     * Number of milliseconds to wait between temporarily clearing the label text
	     * in the DOM and subsequently restoring it. This is necessary to force IE 11
	     * to pick up the `aria-live` content change and announce it to the user.
	     */
	    ARIA_LIVE_DELAY_MS: 1000,
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var ARIA_LIVE_DELAY_MS = numbers$4.ARIA_LIVE_DELAY_MS;
	var ARIA_LIVE_LABEL_TEXT_ATTR = strings$c.ARIA_LIVE_LABEL_TEXT_ATTR;
	function announce(ariaEl, labelEl) {
	    if (labelEl === void 0) { labelEl = ariaEl; }
	    var priority = ariaEl.getAttribute('aria-live');
	    // Trim text to ignore `&nbsp;` (see below).
	    // textContent is only null if the node is a document, DOCTYPE, or notation.
	    var labelText = labelEl.textContent.trim();
	    if (!labelText || !priority) {
	        return;
	    }
	    // Temporarily disable `aria-live` to prevent JAWS+Firefox from announcing the message twice.
	    ariaEl.setAttribute('aria-live', 'off');
	    // Temporarily clear `textContent` to force a DOM mutation event that will be detected by screen readers.
	    // `aria-live` elements are only announced when the element's `textContent` *changes*, so snackbars
	    // sent to the browser in the initial HTML response won't be read unless we clear the element's `textContent` first.
	    // Similarly, displaying the same snackbar message twice in a row doesn't trigger a DOM mutation event,
	    // so screen readers won't announce the second message unless we first clear `textContent`.
	    //
	    // We have to clear the label text two different ways to make it work in all browsers and screen readers:
	    //
	    //   1. `textContent = ''` is required for IE11 + JAWS
	    //   2. `innerHTML = '&nbsp;'` is required for Chrome + JAWS and NVDA
	    //
	    // All other browser/screen reader combinations support both methods.
	    //
	    // The wrapper `<span>` visually hides the space character so that it doesn't cause jank when added/removed.
	    // N.B.: Setting `position: absolute`, `opacity: 0`, or `height: 0` prevents Chrome from detecting the DOM change.
	    //
	    // This technique has been tested in:
	    //
	    //   * JAWS 2019:
	    //       - Chrome 70
	    //       - Firefox 60 (ESR)
	    //       - IE 11
	    //   * NVDA 2018:
	    //       - Chrome 70
	    //       - Firefox 60 (ESR)
	    //       - IE 11
	    //   * ChromeVox 53
	    labelEl.textContent = '';
	    labelEl.innerHTML = '<span style="display: inline-block; width: 0; height: 1px;">&nbsp;</span>';
	    // Prevent visual jank by temporarily displaying the label text in the ::before pseudo-element.
	    // CSS generated content is normally announced by screen readers
	    // (except in IE 11; see https://tink.uk/accessibility-support-for-css-generated-content/);
	    // however, `aria-live` is turned off, so this DOM update will be ignored by screen readers.
	    labelEl.setAttribute(ARIA_LIVE_LABEL_TEXT_ATTR, labelText);
	    setTimeout(function () {
	        // Allow screen readers to announce changes to the DOM again.
	        ariaEl.setAttribute('aria-live', priority);
	        // Remove the message from the ::before pseudo-element.
	        labelEl.removeAttribute(ARIA_LIVE_LABEL_TEXT_ATTR);
	        // Restore the original label text, which will be announced by screen readers.
	        labelEl.textContent = labelText;
	    }, ARIA_LIVE_DELAY_MS);
	}

	var util$1 = {
		__proto__: null,
		announce: announce
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var OPENING = cssClasses$9.OPENING, OPEN = cssClasses$9.OPEN, CLOSING = cssClasses$9.CLOSING;
	var REASON_ACTION = strings$c.REASON_ACTION, REASON_DISMISS = strings$c.REASON_DISMISS;
	var MDCSnackbarFoundation = /** @class */ (function (_super) {
	    __extends(MDCSnackbarFoundation, _super);
	    function MDCSnackbarFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCSnackbarFoundation.defaultAdapter), adapter)) || this;
	        _this.opened = false;
	        _this.animationFrame = 0;
	        _this.animationTimer = 0;
	        _this.autoDismissTimer = 0;
	        _this.autoDismissTimeoutMs = numbers$4.DEFAULT_AUTO_DISMISS_TIMEOUT_MS;
	        _this.closeOnEscape = true;
	        return _this;
	    }
	    Object.defineProperty(MDCSnackbarFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$9;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSnackbarFoundation, "strings", {
	        get: function () {
	            return strings$c;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSnackbarFoundation, "numbers", {
	        get: function () {
	            return numbers$4;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSnackbarFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                announce: function () { return undefined; },
	                notifyClosed: function () { return undefined; },
	                notifyClosing: function () { return undefined; },
	                notifyOpened: function () { return undefined; },
	                notifyOpening: function () { return undefined; },
	                removeClass: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCSnackbarFoundation.prototype.destroy = function () {
	        this.clearAutoDismissTimer();
	        cancelAnimationFrame(this.animationFrame);
	        this.animationFrame = 0;
	        clearTimeout(this.animationTimer);
	        this.animationTimer = 0;
	        this.adapter.removeClass(OPENING);
	        this.adapter.removeClass(OPEN);
	        this.adapter.removeClass(CLOSING);
	    };
	    MDCSnackbarFoundation.prototype.open = function () {
	        var _this = this;
	        this.clearAutoDismissTimer();
	        this.opened = true;
	        this.adapter.notifyOpening();
	        this.adapter.removeClass(CLOSING);
	        this.adapter.addClass(OPENING);
	        this.adapter.announce();
	        // Wait a frame once display is no longer "none", to establish basis for animation
	        this.runNextAnimationFrame(function () {
	            _this.adapter.addClass(OPEN);
	            _this.animationTimer = setTimeout(function () {
	                var timeoutMs = _this.getTimeoutMs();
	                _this.handleAnimationTimerEnd();
	                _this.adapter.notifyOpened();
	                if (timeoutMs !== numbers$4.INDETERMINATE) {
	                    _this.autoDismissTimer = setTimeout(function () {
	                        _this.close(REASON_DISMISS);
	                    }, timeoutMs);
	                }
	            }, numbers$4.SNACKBAR_ANIMATION_OPEN_TIME_MS);
	        });
	    };
	    /**
	     * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the
	     *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom
	     *     client-specific values may also be used if desired.
	     */
	    MDCSnackbarFoundation.prototype.close = function (reason) {
	        var _this = this;
	        if (reason === void 0) { reason = ''; }
	        if (!this.opened) {
	            // Avoid redundant close calls (and events), e.g. repeated interactions as the snackbar is animating closed
	            return;
	        }
	        cancelAnimationFrame(this.animationFrame);
	        this.animationFrame = 0;
	        this.clearAutoDismissTimer();
	        this.opened = false;
	        this.adapter.notifyClosing(reason);
	        this.adapter.addClass(cssClasses$9.CLOSING);
	        this.adapter.removeClass(cssClasses$9.OPEN);
	        this.adapter.removeClass(cssClasses$9.OPENING);
	        clearTimeout(this.animationTimer);
	        this.animationTimer = setTimeout(function () {
	            _this.handleAnimationTimerEnd();
	            _this.adapter.notifyClosed(reason);
	        }, numbers$4.SNACKBAR_ANIMATION_CLOSE_TIME_MS);
	    };
	    MDCSnackbarFoundation.prototype.isOpen = function () {
	        return this.opened;
	    };
	    MDCSnackbarFoundation.prototype.getTimeoutMs = function () {
	        return this.autoDismissTimeoutMs;
	    };
	    MDCSnackbarFoundation.prototype.setTimeoutMs = function (timeoutMs) {
	        // Use shorter variable names to make the code more readable
	        var minValue = numbers$4.MIN_AUTO_DISMISS_TIMEOUT_MS;
	        var maxValue = numbers$4.MAX_AUTO_DISMISS_TIMEOUT_MS;
	        var indeterminateValue = numbers$4.INDETERMINATE;
	        if (timeoutMs === numbers$4.INDETERMINATE || (timeoutMs <= maxValue && timeoutMs >= minValue)) {
	            this.autoDismissTimeoutMs = timeoutMs;
	        }
	        else {
	            throw new Error("\n        timeoutMs must be an integer in the range " + minValue + "\u2013" + maxValue + "\n        (or " + indeterminateValue + " to disable), but got '" + timeoutMs + "'");
	        }
	    };
	    MDCSnackbarFoundation.prototype.getCloseOnEscape = function () {
	        return this.closeOnEscape;
	    };
	    MDCSnackbarFoundation.prototype.setCloseOnEscape = function (closeOnEscape) {
	        this.closeOnEscape = closeOnEscape;
	    };
	    MDCSnackbarFoundation.prototype.handleKeyDown = function (evt) {
	        var isEscapeKey = evt.key === 'Escape' || evt.keyCode === 27;
	        if (isEscapeKey && this.getCloseOnEscape()) {
	            this.close(REASON_DISMISS);
	        }
	    };
	    MDCSnackbarFoundation.prototype.handleActionButtonClick = function (_evt) {
	        this.close(REASON_ACTION);
	    };
	    MDCSnackbarFoundation.prototype.handleActionIconClick = function (_evt) {
	        this.close(REASON_DISMISS);
	    };
	    MDCSnackbarFoundation.prototype.clearAutoDismissTimer = function () {
	        clearTimeout(this.autoDismissTimer);
	        this.autoDismissTimer = 0;
	    };
	    MDCSnackbarFoundation.prototype.handleAnimationTimerEnd = function () {
	        this.animationTimer = 0;
	        this.adapter.removeClass(cssClasses$9.OPENING);
	        this.adapter.removeClass(cssClasses$9.CLOSING);
	    };
	    /**
	     * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.
	     */
	    MDCSnackbarFoundation.prototype.runNextAnimationFrame = function (callback) {
	        var _this = this;
	        cancelAnimationFrame(this.animationFrame);
	        this.animationFrame = requestAnimationFrame(function () {
	            _this.animationFrame = 0;
	            clearTimeout(_this.animationTimer);
	            _this.animationTimer = setTimeout(callback, 0);
	        });
	    };
	    return MDCSnackbarFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var SURFACE_SELECTOR = strings$c.SURFACE_SELECTOR, LABEL_SELECTOR = strings$c.LABEL_SELECTOR, ACTION_SELECTOR = strings$c.ACTION_SELECTOR, DISMISS_SELECTOR = strings$c.DISMISS_SELECTOR, OPENING_EVENT = strings$c.OPENING_EVENT, OPENED_EVENT = strings$c.OPENED_EVENT, CLOSING_EVENT = strings$c.CLOSING_EVENT, CLOSED_EVENT = strings$c.CLOSED_EVENT;
	var MDCSnackbar = /** @class */ (function (_super) {
	    __extends(MDCSnackbar, _super);
	    function MDCSnackbar() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCSnackbar.attachTo = function (root) {
	        return new MDCSnackbar(root);
	    };
	    MDCSnackbar.prototype.initialize = function (announcerFactory) {
	        if (announcerFactory === void 0) { announcerFactory = function () { return announce; }; }
	        this.announce = announcerFactory();
	    };
	    MDCSnackbar.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.surfaceEl = this.root.querySelector(SURFACE_SELECTOR);
	        this.labelEl = this.root.querySelector(LABEL_SELECTOR);
	        this.actionEl = this.root.querySelector(ACTION_SELECTOR);
	        this.handleKeyDown = function (evt) {
	            _this.foundation.handleKeyDown(evt);
	        };
	        this.handleSurfaceClick = function (evt) {
	            var target = evt.target;
	            if (_this.isActionButton(target)) {
	                _this.foundation.handleActionButtonClick(evt);
	            }
	            else if (_this.isActionIcon(target)) {
	                _this.foundation.handleActionIconClick(evt);
	            }
	        };
	        this.registerKeyDownHandler(this.handleKeyDown);
	        this.registerSurfaceClickHandler(this.handleSurfaceClick);
	    };
	    MDCSnackbar.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.deregisterKeyDownHandler(this.handleKeyDown);
	        this.deregisterSurfaceClickHandler(this.handleSurfaceClick);
	    };
	    MDCSnackbar.prototype.open = function () {
	        this.foundation.open();
	    };
	    /**
	     * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the
	     *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom
	     *     client-specific values may also be used if desired.
	     */
	    MDCSnackbar.prototype.close = function (reason) {
	        if (reason === void 0) { reason = ''; }
	        this.foundation.close(reason);
	    };
	    MDCSnackbar.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            announce: function () {
	                _this.announce(_this.labelEl);
	            },
	            notifyClosed: function (reason) { return _this.emit(CLOSED_EVENT, reason ? { reason: reason } : {}); },
	            notifyClosing: function (reason) { return _this.emit(CLOSING_EVENT, reason ? { reason: reason } : {}); },
	            notifyOpened: function () { return _this.emit(OPENED_EVENT, {}); },
	            notifyOpening: function () { return _this.emit(OPENING_EVENT, {}); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	        };
	        return new MDCSnackbarFoundation(adapter);
	    };
	    Object.defineProperty(MDCSnackbar.prototype, "timeoutMs", {
	        get: function () {
	            return this.foundation.getTimeoutMs();
	        },
	        set: function (timeoutMs) {
	            this.foundation.setTimeoutMs(timeoutMs);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSnackbar.prototype, "closeOnEscape", {
	        get: function () {
	            return this.foundation.getCloseOnEscape();
	        },
	        set: function (closeOnEscape) {
	            this.foundation.setCloseOnEscape(closeOnEscape);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSnackbar.prototype, "isOpen", {
	        get: function () {
	            return this.foundation.isOpen();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSnackbar.prototype, "labelText", {
	        get: function () {
	            // This property only returns null if the node is a document, DOCTYPE,
	            // or notation. On Element nodes, it always returns a string.
	            return this.labelEl.textContent;
	        },
	        set: function (labelText) {
	            this.labelEl.textContent = labelText;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSnackbar.prototype, "actionButtonText", {
	        get: function () {
	            return this.actionEl.textContent;
	        },
	        set: function (actionButtonText) {
	            this.actionEl.textContent = actionButtonText;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCSnackbar.prototype.registerKeyDownHandler = function (handler) {
	        this.listen('keydown', handler);
	    };
	    MDCSnackbar.prototype.deregisterKeyDownHandler = function (handler) {
	        this.unlisten('keydown', handler);
	    };
	    MDCSnackbar.prototype.registerSurfaceClickHandler = function (handler) {
	        this.surfaceEl.addEventListener('click', handler);
	    };
	    MDCSnackbar.prototype.deregisterSurfaceClickHandler = function (handler) {
	        this.surfaceEl.removeEventListener('click', handler);
	    };
	    MDCSnackbar.prototype.isActionButton = function (target) {
	        return Boolean(closest(target, ACTION_SELECTOR));
	    };
	    MDCSnackbar.prototype.isActionIcon = function (target) {
	        return Boolean(closest(target, DISMISS_SELECTOR));
	    };
	    return MDCSnackbar;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$9 = {
		__proto__: null,
		util: util$1,
		MDCSnackbar: MDCSnackbar,
		cssClasses: cssClasses$9,
		strings: strings$c,
		numbers: numbers$4,
		MDCSnackbarFoundation: MDCSnackbarFoundation
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/** CSS classes used by the switch. */
	var cssClasses$8 = {
	    /** Class used for a switch that is in the "checked" (on) position. */
	    CHECKED: 'mdc-switch--checked',
	    /** Class used for a switch that is disabled. */
	    DISABLED: 'mdc-switch--disabled',
	};
	/** String constants used by the switch. */
	var strings$b = {
	    /** Aria attribute for checked or unchecked state of switch */
	    ARIA_CHECKED_ATTR: 'aria-checked',
	    /** A CSS selector used to locate the native HTML control for the switch.  */
	    NATIVE_CONTROL_SELECTOR: '.mdc-switch__native-control',
	    /** A CSS selector used to locate the ripple surface element for the switch. */
	    RIPPLE_SURFACE_SELECTOR: '.mdc-switch__thumb-underlay',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCSwitchFoundation$1 = /** @class */ (function (_super) {
	    __extends(MDCSwitchFoundation, _super);
	    function MDCSwitchFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCSwitchFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCSwitchFoundation, "strings", {
	        /** The string constants used by the switch. */
	        get: function () {
	            return strings$b;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSwitchFoundation, "cssClasses", {
	        /** The CSS classes used by the switch. */
	        get: function () {
	            return cssClasses$8;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSwitchFoundation, "defaultAdapter", {
	        /** The default Adapter for the switch. */
	        get: function () {
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                setNativeControlChecked: function () { return undefined; },
	                setNativeControlDisabled: function () { return undefined; },
	                setNativeControlAttr: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /** Sets the checked state of the switch. */
	    MDCSwitchFoundation.prototype.setChecked = function (checked) {
	        this.adapter.setNativeControlChecked(checked);
	        this.updateAriaChecked(checked);
	        this.updateCheckedStyling(checked);
	    };
	    /** Sets the disabled state of the switch. */
	    MDCSwitchFoundation.prototype.setDisabled = function (disabled) {
	        this.adapter.setNativeControlDisabled(disabled);
	        if (disabled) {
	            this.adapter.addClass(cssClasses$8.DISABLED);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$8.DISABLED);
	        }
	    };
	    /** Handles the change event for the switch native control. */
	    MDCSwitchFoundation.prototype.handleChange = function (evt) {
	        var nativeControl = evt.target;
	        this.updateAriaChecked(nativeControl.checked);
	        this.updateCheckedStyling(nativeControl.checked);
	    };
	    /** Updates the styling of the switch based on its checked state. */
	    MDCSwitchFoundation.prototype.updateCheckedStyling = function (checked) {
	        if (checked) {
	            this.adapter.addClass(cssClasses$8.CHECKED);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$8.CHECKED);
	        }
	    };
	    MDCSwitchFoundation.prototype.updateAriaChecked = function (checked) {
	        this.adapter.setNativeControlAttr(strings$b.ARIA_CHECKED_ATTR, "" + !!checked);
	    };
	    return MDCSwitchFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCSwitch$1 = /** @class */ (function (_super) {
	    __extends(MDCSwitch, _super);
	    function MDCSwitch() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.rippleSurface = _this.createRipple();
	        return _this;
	    }
	    MDCSwitch.attachTo = function (root) {
	        return new MDCSwitch(root);
	    };
	    MDCSwitch.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.rippleSurface.destroy();
	        this.nativeControl.removeEventListener('change', this.changeHandler);
	    };
	    MDCSwitch.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.changeHandler = function () {
	            var _a;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            (_a = _this.foundation).handleChange.apply(_a, __spreadArray([], __read(args)));
	        };
	        this.nativeControl.addEventListener('change', this.changeHandler);
	        // Sometimes the checked state of the input element is saved in the history.
	        // The switch styling should match the checked state of the input element.
	        // Do an initial sync between the native control and the foundation.
	        this.checked = this.checked;
	    };
	    MDCSwitch.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            setNativeControlChecked: function (checked) { return _this.nativeControl.checked =
	                checked; },
	            setNativeControlDisabled: function (disabled) { return _this.nativeControl.disabled =
	                disabled; },
	            setNativeControlAttr: function (attr, value) {
	                _this.nativeControl.setAttribute(attr, value);
	            },
	        };
	        return new MDCSwitchFoundation$1(adapter);
	    };
	    Object.defineProperty(MDCSwitch.prototype, "ripple", {
	        get: function () {
	            return this.rippleSurface;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSwitch.prototype, "checked", {
	        get: function () {
	            return this.nativeControl.checked;
	        },
	        set: function (checked) {
	            this.foundation.setChecked(checked);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCSwitch.prototype, "disabled", {
	        get: function () {
	            return this.nativeControl.disabled;
	        },
	        set: function (disabled) {
	            this.foundation.setDisabled(disabled);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCSwitch.prototype.createRipple = function () {
	        var _this = this;
	        var RIPPLE_SURFACE_SELECTOR = MDCSwitchFoundation$1.strings.RIPPLE_SURFACE_SELECTOR;
	        var rippleSurface = this.root.querySelector(RIPPLE_SURFACE_SELECTOR);
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { addClass: function (className) { return rippleSurface.classList.add(className); }, computeBoundingRect: function () { return rippleSurface.getBoundingClientRect(); }, deregisterInteractionHandler: function (evtType, handler) {
	                _this.nativeControl.removeEventListener(evtType, handler, applyPassive());
	            }, isSurfaceActive: function () { return matches$2(_this.nativeControl, ':active'); }, isUnbounded: function () { return true; }, registerInteractionHandler: function (evtType, handler) {
	                _this.nativeControl.addEventListener(evtType, handler, applyPassive());
	            }, removeClass: function (className) {
	                rippleSurface.classList.remove(className);
	            }, updateCssVariable: function (varName, value) {
	                rippleSurface.style.setProperty(varName, value);
	            } });
	        return new MDCRipple(this.root, new MDCRippleFoundation(adapter));
	    };
	    Object.defineProperty(MDCSwitch.prototype, "nativeControl", {
	        get: function () {
	            var NATIVE_CONTROL_SELECTOR = MDCSwitchFoundation$1.strings.NATIVE_CONTROL_SELECTOR;
	            return this.root.querySelector(NATIVE_CONTROL_SELECTOR);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    return MDCSwitch;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$8 = {
		__proto__: null,
		MDCSwitch: MDCSwitch$1,
		cssClasses: cssClasses$8,
		strings: strings$b,
		MDCSwitchFoundation: MDCSwitchFoundation$1
	};

	/**
	 * @license
	 * Copyright 2021 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2021 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * CSS classes used for switch.
	 */
	var CssClasses$1;
	(function (CssClasses) {
	    CssClasses["PROCESSING"] = "mdc-switch--processing";
	    CssClasses["SELECTED"] = "mdc-switch--selected";
	    CssClasses["UNSELECTED"] = "mdc-switch--unselected";
	})(CssClasses$1 || (CssClasses$1 = {}));
	/**
	 * Query selectors used for switch.
	 */
	var Selectors;
	(function (Selectors) {
	    Selectors["RIPPLE"] = ".mdc-switch__ripple";
	})(Selectors || (Selectors = {}));

	/**
	 * @license
	 * Copyright 2021 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Mixin to add `MDCObserver` functionality to an optional base class.
	 *
	 * @deprecated Prefer MDCObserverFoundation for stricter closure compliance.
	 * @template C Optional base class constructor type.
	 * @param baseClass - Optional base class.
	 * @return A class that extends the optional base class with `MDCObserver`
	 *     functionality.
	 */
	function mdcObserver(baseClass) {
	    if (baseClass === void 0) { baseClass = /** @class */ (function () {
	        function class_1() {
	        }
	        return class_1;
	    }()); }
	    // Mixin classes cannot use private members and Symbol() cannot be used in 3P
	    // for IE11.
	    var unobserveMap = new WeakMap();
	    return /** @class */ (function (_super) {
	        __extends(MDCObserver, _super);
	        function MDCObserver() {
	            return _super !== null && _super.apply(this, arguments) || this;
	        }
	        MDCObserver.prototype.observe = function (target, observers) {
	            var e_1, _a;
	            var _this = this;
	            var cleanup = [];
	            try {
	                for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {
	                    var property = _c.value;
	                    var observer = observers[property].bind(this);
	                    cleanup.push(observeProperty(target, property, observer));
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	            var unobserve = function () {
	                var e_2, _a;
	                try {
	                    for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {
	                        var cleanupFn = cleanup_1_1.value;
	                        cleanupFn();
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (cleanup_1_1 && !cleanup_1_1.done && (_a = cleanup_1.return)) _a.call(cleanup_1);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	                var unobserves = unobserveMap.get(_this) || [];
	                var index = unobserves.indexOf(unobserve);
	                if (index > -1) {
	                    unobserves.splice(index, 1);
	                }
	            };
	            var unobserves = unobserveMap.get(this);
	            if (!unobserves) {
	                unobserves = [];
	                unobserveMap.set(this, unobserves);
	            }
	            unobserves.push(unobserve);
	            return unobserve;
	        };
	        MDCObserver.prototype.setObserversEnabled = function (target, enabled) {
	            setObserversEnabled(target, enabled);
	        };
	        MDCObserver.prototype.unobserve = function () {
	            var e_3, _a;
	            // Iterate over a copy since unobserve() will remove themselves from the
	            // array
	            var unobserves = unobserveMap.get(this) || [];
	            try {
	                for (var _b = __values(__spreadArray([], __read(unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {
	                    var unobserve = _c.value;
	                    unobserve();
	                }
	            }
	            catch (e_3_1) { e_3 = { error: e_3_1 }; }
	            finally {
	                try {
	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	                }
	                finally { if (e_3) throw e_3.error; }
	            }
	        };
	        return MDCObserver;
	    }(baseClass));
	}
	/**
	 * Observe a target's property for changes. When a property changes, the
	 * provided `Observer` function will be invoked with the properties current and
	 * previous values.
	 *
	 * The returned cleanup function will stop listening to changes for the
	 * provided `Observer`.
	 *
	 * @template T The observed target type.
	 * @template K The observed property.
	 * @param target - The target to observe.
	 * @param property - The property of the target to observe.
	 * @param observer - An observer function to invoke each time the property
	 *     changes.
	 * @return A cleanup function that will stop observing changes for the provided
	 *     `Observer`.
	 */
	function observeProperty(target, property, observer) {
	    var targetObservers = installObserver(target, property);
	    var observers = targetObservers.getObservers(property);
	    observers.push(observer);
	    return function () {
	        observers.splice(observers.indexOf(observer), 1);
	    };
	}
	/**
	 * A Map of all `TargetObservers` that have been installed.
	 */
	var allTargetObservers = new WeakMap();
	/**
	 * Installs a `TargetObservers` for the provided target (if not already
	 * installed), and replaces the given property with a getter and setter that
	 * will respond to changes and call `TargetObservers`.
	 *
	 * Subsequent calls to `installObserver()` with the same target and property
	 * will not override the property's previously installed getter/setter.
	 *
	 * @template T The observed target type.
	 * @template K The observed property to create a getter/setter for.
	 * @param target - The target to observe.
	 * @param property - The property to create a getter/setter for, if needed.
	 * @return The installed `TargetObservers` for the provided target.
	 */
	function installObserver(target, property) {
	    var observersMap = new Map();
	    if (!allTargetObservers.has(target)) {
	        allTargetObservers.set(target, {
	            isEnabled: true,
	            getObservers: function (key) {
	                var observers = observersMap.get(key) || [];
	                if (!observersMap.has(key)) {
	                    observersMap.set(key, observers);
	                }
	                return observers;
	            },
	            installedProperties: new Set()
	        });
	    }
	    var targetObservers = allTargetObservers.get(target);
	    if (targetObservers.installedProperties.has(property)) {
	        // The getter/setter has already been replaced for this property
	        return targetObservers;
	    }
	    // Retrieve (or create if it's a plain property) the original descriptor from
	    // the target...
	    var descriptor = getDescriptor(target, property) || {
	        configurable: true,
	        enumerable: true,
	        value: target[property],
	        writable: true
	    };
	    // ...and create a copy that will be used for the observer.
	    var observedDescriptor = __assign({}, descriptor);
	    var descGet = descriptor.get, descSet = descriptor.set;
	    if ('value' in descriptor) {
	        // The descriptor is a simple value (not a getter/setter).
	        // For our observer descriptor that we copied, delete the value/writable
	        // properties, since they are incompatible with the get/set properties
	        // for descriptors.
	        delete observedDescriptor.value;
	        delete observedDescriptor.writable;
	        // Set up a simple getter...
	        var value_1 = descriptor.value;
	        descGet = function () { return value_1; };
	        // ...and setter (if the original property was writable).
	        if (descriptor.writable) {
	            descSet = function (newValue) {
	                value_1 = newValue;
	            };
	        }
	    }
	    if (descGet) {
	        observedDescriptor.get = function () {
	            // `this as T` needed for closure conformance
	            return descGet.call(this);
	        };
	    }
	    if (descSet) {
	        observedDescriptor.set = function (newValue) {
	            var e_4, _a;
	            // `thus as T` needed for closure conformance
	            var previous = descGet ? descGet.call(this) : newValue;
	            descSet.call(this, newValue);
	            if (targetObservers.isEnabled && (!descGet || newValue !== previous)) {
	                try {
	                    for (var _b = __values(targetObservers.getObservers(property)), _c = _b.next(); !_c.done; _c = _b.next()) {
	                        var observer = _c.value;
	                        observer(newValue, previous);
	                    }
	                }
	                catch (e_4_1) { e_4 = { error: e_4_1 }; }
	                finally {
	                    try {
	                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	                    }
	                    finally { if (e_4) throw e_4.error; }
	                }
	            }
	        };
	    }
	    targetObservers.installedProperties.add(property);
	    Object.defineProperty(target, property, observedDescriptor);
	    return targetObservers;
	}
	/**
	 * Retrieves the descriptor for a property from the provided target. This
	 * function will walk up the target's prototype chain to search for the
	 * descriptor.
	 *
	 * @template T The target type.
	 * @template K The property type.
	 * @param target - The target to retrieve a descriptor from.
	 * @param property - The name of the property to retrieve a descriptor for.
	 * @return the descriptor, or undefined if it does not exist. Keep in mind that
	 *     plain properties may not have a descriptor defined.
	 */
	function getDescriptor(target, property) {
	    var descriptorTarget = target;
	    var descriptor;
	    while (descriptorTarget) {
	        descriptor = Object.getOwnPropertyDescriptor(descriptorTarget, property);
	        if (descriptor) {
	            break;
	        }
	        // Walk up the instance's prototype chain in case the property is declared
	        // on a superclass.
	        descriptorTarget = Object.getPrototypeOf(descriptorTarget);
	    }
	    return descriptor;
	}
	/**
	 * Enables or disables all observers for a provided target. Changes to observed
	 * properties will not call any observers when disabled.
	 *
	 * @template T The observed target type.
	 * @param target - The target to enable or disable observers for.
	 * @param enabled - True to enable or false to disable observers.
	 */
	function setObserversEnabled(target, enabled) {
	    var targetObservers = allTargetObservers.get(target);
	    if (targetObservers) {
	        targetObservers.isEnabled = enabled;
	    }
	}

	/**
	 * @license
	 * Copyright 2021 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCObserverFoundation = /** @class */ (function (_super) {
	    __extends(MDCObserverFoundation, _super);
	    function MDCObserverFoundation(adapter) {
	        var _this = _super.call(this, adapter) || this;
	        /** A set of cleanup functions to unobserve changes. */
	        _this.unobserves = new Set();
	        return _this;
	    }
	    MDCObserverFoundation.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.unobserve();
	    };
	    /**
	     * Observe a target's properties for changes using the provided map of
	     * property names and observer functions.
	     *
	     * @template T The target type.
	     * @param target - The target to observe.
	     * @param observers - An object whose keys are target properties and values
	     *     are observer functions that are called when the associated property
	     *     changes.
	     * @return A cleanup function that can be called to unobserve the
	     *     target.
	     */
	    MDCObserverFoundation.prototype.observe = function (target, observers) {
	        var e_1, _a;
	        var _this = this;
	        var cleanup = [];
	        try {
	            for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var property = _c.value;
	                var observer = observers[property].bind(this);
	                cleanup.push(this.observeProperty(target, property, observer));
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        var unobserve = function () {
	            var e_2, _a;
	            try {
	                for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {
	                    var cleanupFn = cleanup_1_1.value;
	                    cleanupFn();
	                }
	            }
	            catch (e_2_1) { e_2 = { error: e_2_1 }; }
	            finally {
	                try {
	                    if (cleanup_1_1 && !cleanup_1_1.done && (_a = cleanup_1.return)) _a.call(cleanup_1);
	                }
	                finally { if (e_2) throw e_2.error; }
	            }
	            _this.unobserves.delete(unobserve);
	        };
	        this.unobserves.add(unobserve);
	        return unobserve;
	    };
	    /**
	     * Observe a target's property for changes. When a property changes, the
	     * provided `Observer` function will be invoked with the properties current
	     * and previous values.
	     *
	     * The returned cleanup function will stop listening to changes for the
	     * provided `Observer`.
	     *
	     * @template T The observed target type.
	     * @template K The observed property.
	     * @param target - The target to observe.
	     * @param property - The property of the target to observe.
	     * @param observer - An observer function to invoke each time the property
	     *     changes.
	     * @return A cleanup function that will stop observing changes for the
	     *     provided `Observer`.
	     */
	    MDCObserverFoundation.prototype.observeProperty = function (target, property, observer) {
	        return observeProperty(target, property, observer);
	    };
	    /**
	     * Enables or disables all observers for the provided target. Disabling
	     * observers will prevent them from being called until they are re-enabled.
	     *
	     * @param target - The target to enable or disable observers for.
	     * @param enabled - Whether or not observers should be called.
	     */
	    MDCObserverFoundation.prototype.setObserversEnabled = function (target, enabled) {
	        setObserversEnabled(target, enabled);
	    };
	    /**
	     * Clean up all observers and stop listening for property changes.
	     */
	    MDCObserverFoundation.prototype.unobserve = function () {
	        var e_3, _a;
	        try {
	            // Iterate over a copy since unobserve() will remove themselves from the set
	            for (var _b = __values(__spreadArray([], __read(this.unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var unobserve = _c.value;
	                unobserve();
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	    };
	    return MDCObserverFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2021 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * `MDCSwitchFoundation` provides a state-only foundation for a switch
	 * component.
	 *
	 * State observers and event handler entrypoints update a component's adapter's
	 * state with the logic needed for switch to function.
	 */
	var MDCSwitchFoundation = /** @class */ (function (_super) {
	    __extends(MDCSwitchFoundation, _super);
	    function MDCSwitchFoundation(adapter) {
	        var _this = _super.call(this, adapter) || this;
	        _this.handleClick = _this.handleClick.bind(_this);
	        return _this;
	    }
	    /**
	     * Initializes the foundation and starts observing state changes.
	     */
	    MDCSwitchFoundation.prototype.init = function () {
	        this.observe(this.adapter.state, {
	            disabled: this.stopProcessingIfDisabled,
	            processing: this.stopProcessingIfDisabled,
	        });
	    };
	    /**
	     * Event handler for switch click events. Clicking on a switch will toggle its
	     * selected state.
	     */
	    MDCSwitchFoundation.prototype.handleClick = function () {
	        if (this.adapter.state.disabled) {
	            return;
	        }
	        this.adapter.state.selected = !this.adapter.state.selected;
	    };
	    MDCSwitchFoundation.prototype.stopProcessingIfDisabled = function () {
	        if (this.adapter.state.disabled) {
	            this.adapter.state.processing = false;
	        }
	    };
	    return MDCSwitchFoundation;
	}(MDCObserverFoundation));
	/**
	 * `MDCSwitchRenderFoundation` provides a state and rendering foundation for a
	 * switch component.
	 *
	 * State observers and event handler entrypoints update a component's
	 * adapter's state with the logic needed for switch to function.
	 *
	 * In response to state changes, the rendering foundation uses the component's
	 * render adapter to keep the component's DOM updated with the state.
	 */
	var MDCSwitchRenderFoundation = /** @class */ (function (_super) {
	    __extends(MDCSwitchRenderFoundation, _super);
	    function MDCSwitchRenderFoundation() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    /**
	     * Initializes the foundation and starts observing state changes.
	     */
	    MDCSwitchRenderFoundation.prototype.init = function () {
	        _super.prototype.init.call(this);
	        this.observe(this.adapter.state, {
	            disabled: this.onDisabledChange,
	            processing: this.onProcessingChange,
	            selected: this.onSelectedChange,
	        });
	    };
	    /**
	     * Initializes the foundation from a server side rendered (SSR) component.
	     * This will sync the adapter's state with the current state of the DOM.
	     *
	     * This method should be called after `init()`.
	     */
	    MDCSwitchRenderFoundation.prototype.initFromDOM = function () {
	        // Turn off observers while setting state
	        this.setObserversEnabled(this.adapter.state, false);
	        this.adapter.state.selected = this.adapter.hasClass(CssClasses$1.SELECTED);
	        // Ensure aria-checked is set if attribute is not present
	        this.onSelectedChange();
	        this.adapter.state.disabled = this.adapter.isDisabled();
	        this.adapter.state.processing =
	            this.adapter.hasClass(CssClasses$1.PROCESSING);
	        // Re-observe state
	        this.setObserversEnabled(this.adapter.state, true);
	        this.stopProcessingIfDisabled();
	    };
	    MDCSwitchRenderFoundation.prototype.onDisabledChange = function () {
	        this.adapter.setDisabled(this.adapter.state.disabled);
	    };
	    MDCSwitchRenderFoundation.prototype.onProcessingChange = function () {
	        this.toggleClass(this.adapter.state.processing, CssClasses$1.PROCESSING);
	    };
	    MDCSwitchRenderFoundation.prototype.onSelectedChange = function () {
	        this.adapter.setAriaChecked(String(this.adapter.state.selected));
	        this.toggleClass(this.adapter.state.selected, CssClasses$1.SELECTED);
	        this.toggleClass(!this.adapter.state.selected, CssClasses$1.UNSELECTED);
	    };
	    MDCSwitchRenderFoundation.prototype.toggleClass = function (addClass, className) {
	        if (addClass) {
	            this.adapter.addClass(className);
	        }
	        else {
	            this.adapter.removeClass(className);
	        }
	    };
	    return MDCSwitchRenderFoundation;
	}(MDCSwitchFoundation));

	/**
	 * @license
	 * Copyright 2021 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * `MDCSwitch` provides a component implementation of a Material Design switch.
	 */
	var MDCSwitch = /** @class */ (function (_super) {
	    __extends(MDCSwitch, _super);
	    function MDCSwitch(root, foundation) {
	        var _this = _super.call(this, root, foundation) || this;
	        _this.root = root;
	        return _this;
	    }
	    /**
	     * Creates a new `MDCSwitch` and attaches it to the given root element.
	     * @param root The root to attach to.
	     * @return the new component instance.
	     */
	    MDCSwitch.attachTo = function (root) {
	        return new MDCSwitch(root);
	    };
	    MDCSwitch.prototype.initialize = function () {
	        this.ripple = new MDCRipple(this.root, this.createRippleFoundation());
	    };
	    MDCSwitch.prototype.initialSyncWithDOM = function () {
	        var rippleElement = this.root.querySelector(Selectors.RIPPLE);
	        if (!rippleElement) {
	            throw new Error("Switch " + Selectors.RIPPLE + " element is required.");
	        }
	        this.rippleElement = rippleElement;
	        this.root.addEventListener('click', this.foundation.handleClick);
	        this.foundation.initFromDOM();
	    };
	    MDCSwitch.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.ripple.destroy();
	        this.root.removeEventListener('click', this.foundation.handleClick);
	    };
	    MDCSwitch.prototype.getDefaultFoundation = function () {
	        return new MDCSwitchRenderFoundation(this.createAdapter());
	    };
	    MDCSwitch.prototype.createAdapter = function () {
	        var _this = this;
	        return {
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            isDisabled: function () { return _this.root.disabled; },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            setAriaChecked: function (ariaChecked) {
	                return _this.root.setAttribute('aria-checked', ariaChecked);
	            },
	            setDisabled: function (disabled) {
	                _this.root.disabled = disabled;
	            },
	            state: this,
	        };
	    };
	    MDCSwitch.prototype.createRippleFoundation = function () {
	        return new MDCRippleFoundation(this.createRippleAdapter());
	    };
	    MDCSwitch.prototype.createRippleAdapter = function () {
	        var _this = this;
	        return __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function () { return _this.rippleElement.getBoundingClientRect(); }, isUnbounded: function () { return true; } });
	    };
	    return MDCSwitch;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2021 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$7 = {
		__proto__: null,
		deprecated: index$8,
		MDCSwitch: MDCSwitch,
		get CssClasses () { return CssClasses$1; },
		get Selectors () { return Selectors; },
		MDCSwitchFoundation: MDCSwitchFoundation,
		MDCSwitchRenderFoundation: MDCSwitchRenderFoundation
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$7 = {
	    ANIMATING: 'mdc-tab-scroller--animating',
	    SCROLL_AREA_SCROLL: 'mdc-tab-scroller__scroll-area--scroll',
	    SCROLL_TEST: 'mdc-tab-scroller__test',
	};
	var strings$a = {
	    AREA_SELECTOR: '.mdc-tab-scroller__scroll-area',
	    CONTENT_SELECTOR: '.mdc-tab-scroller__scroll-content',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabScrollerRTL = /** @class */ (function () {
	    function MDCTabScrollerRTL(adapter) {
	        this.adapter = adapter;
	    }
	    return MDCTabScrollerRTL;
	}());

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabScrollerRTLDefault = /** @class */ (function (_super) {
	    __extends(MDCTabScrollerRTLDefault, _super);
	    function MDCTabScrollerRTLDefault() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTabScrollerRTLDefault.prototype.getScrollPositionRTL = function () {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var right = this.calculateScrollEdges().right;
	        // Scroll values on most browsers are ints instead of floats so we round
	        return Math.round(right - currentScrollLeft);
	    };
	    MDCTabScrollerRTLDefault.prototype.scrollToRTL = function (scrollX) {
	        var edges = this.calculateScrollEdges();
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(edges.right - scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: clampedScrollLeft - currentScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLDefault.prototype.incrementScrollRTL = function (scrollX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(currentScrollLeft - scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: clampedScrollLeft - currentScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLDefault.prototype.getAnimatingScrollPosition = function (scrollX) {
	        return scrollX;
	    };
	    MDCTabScrollerRTLDefault.prototype.calculateScrollEdges = function () {
	        var contentWidth = this.adapter.getScrollContentOffsetWidth();
	        var rootWidth = this.adapter.getScrollAreaOffsetWidth();
	        return {
	            left: 0,
	            right: contentWidth - rootWidth,
	        };
	    };
	    MDCTabScrollerRTLDefault.prototype.clampScrollValue = function (scrollX) {
	        var edges = this.calculateScrollEdges();
	        return Math.min(Math.max(edges.left, scrollX), edges.right);
	    };
	    return MDCTabScrollerRTLDefault;
	}(MDCTabScrollerRTL));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabScrollerRTLNegative = /** @class */ (function (_super) {
	    __extends(MDCTabScrollerRTLNegative, _super);
	    function MDCTabScrollerRTLNegative() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTabScrollerRTLNegative.prototype.getScrollPositionRTL = function (translateX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        return Math.round(translateX - currentScrollLeft);
	    };
	    MDCTabScrollerRTLNegative.prototype.scrollToRTL = function (scrollX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(-scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: clampedScrollLeft - currentScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLNegative.prototype.incrementScrollRTL = function (scrollX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(currentScrollLeft - scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: clampedScrollLeft - currentScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLNegative.prototype.getAnimatingScrollPosition = function (scrollX, translateX) {
	        return scrollX - translateX;
	    };
	    MDCTabScrollerRTLNegative.prototype.calculateScrollEdges = function () {
	        var contentWidth = this.adapter.getScrollContentOffsetWidth();
	        var rootWidth = this.adapter.getScrollAreaOffsetWidth();
	        return {
	            left: rootWidth - contentWidth,
	            right: 0,
	        };
	    };
	    MDCTabScrollerRTLNegative.prototype.clampScrollValue = function (scrollX) {
	        var edges = this.calculateScrollEdges();
	        return Math.max(Math.min(edges.right, scrollX), edges.left);
	    };
	    return MDCTabScrollerRTLNegative;
	}(MDCTabScrollerRTL));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabScrollerRTLReverse = /** @class */ (function (_super) {
	    __extends(MDCTabScrollerRTLReverse, _super);
	    function MDCTabScrollerRTLReverse() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTabScrollerRTLReverse.prototype.getScrollPositionRTL = function (translateX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        // Scroll values on most browsers are ints instead of floats so we round
	        return Math.round(currentScrollLeft - translateX);
	    };
	    MDCTabScrollerRTLReverse.prototype.scrollToRTL = function (scrollX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: currentScrollLeft - clampedScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLReverse.prototype.incrementScrollRTL = function (scrollX) {
	        var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        var clampedScrollLeft = this.clampScrollValue(currentScrollLeft + scrollX);
	        return {
	            finalScrollPosition: clampedScrollLeft,
	            scrollDelta: currentScrollLeft - clampedScrollLeft,
	        };
	    };
	    MDCTabScrollerRTLReverse.prototype.getAnimatingScrollPosition = function (scrollX, translateX) {
	        return scrollX + translateX;
	    };
	    MDCTabScrollerRTLReverse.prototype.calculateScrollEdges = function () {
	        var contentWidth = this.adapter.getScrollContentOffsetWidth();
	        var rootWidth = this.adapter.getScrollAreaOffsetWidth();
	        return {
	            left: contentWidth - rootWidth,
	            right: 0,
	        };
	    };
	    MDCTabScrollerRTLReverse.prototype.clampScrollValue = function (scrollX) {
	        var edges = this.calculateScrollEdges();
	        return Math.min(Math.max(edges.right, scrollX), edges.left);
	    };
	    return MDCTabScrollerRTLReverse;
	}(MDCTabScrollerRTL));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabScrollerFoundation = /** @class */ (function (_super) {
	    __extends(MDCTabScrollerFoundation, _super);
	    function MDCTabScrollerFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCTabScrollerFoundation.defaultAdapter), adapter)) || this;
	        /**
	         * Controls whether we should handle the transitionend and interaction events during the animation.
	         */
	        _this.isAnimating = false;
	        return _this;
	    }
	    Object.defineProperty(MDCTabScrollerFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$7;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabScrollerFoundation, "strings", {
	        get: function () {
	            return strings$a;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabScrollerFoundation, "defaultAdapter", {
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                eventTargetMatchesSelector: function () { return false; },
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                addScrollAreaClass: function () { return undefined; },
	                setScrollAreaStyleProperty: function () { return undefined; },
	                setScrollContentStyleProperty: function () { return undefined; },
	                getScrollContentStyleValue: function () { return ''; },
	                setScrollAreaScrollLeft: function () { return undefined; },
	                getScrollAreaScrollLeft: function () { return 0; },
	                getScrollContentOffsetWidth: function () { return 0; },
	                getScrollAreaOffsetWidth: function () { return 0; },
	                computeScrollAreaClientRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                computeScrollContentClientRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                computeHorizontalScrollbarHeight: function () { return 0; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTabScrollerFoundation.prototype.init = function () {
	        // Compute horizontal scrollbar height on scroller with overflow initially hidden, then update overflow to scroll
	        // and immediately adjust bottom margin to avoid the scrollbar initially appearing before JS runs.
	        var horizontalScrollbarHeight = this.adapter.computeHorizontalScrollbarHeight();
	        this.adapter.setScrollAreaStyleProperty('margin-bottom', -horizontalScrollbarHeight + 'px');
	        this.adapter.addScrollAreaClass(MDCTabScrollerFoundation.cssClasses.SCROLL_AREA_SCROLL);
	    };
	    /**
	     * Computes the current visual scroll position
	     */
	    MDCTabScrollerFoundation.prototype.getScrollPosition = function () {
	        if (this.isRTL()) {
	            return this.computeCurrentScrollPositionRTL();
	        }
	        var currentTranslateX = this.calculateCurrentTranslateX();
	        var scrollLeft = this.adapter.getScrollAreaScrollLeft();
	        return scrollLeft - currentTranslateX;
	    };
	    /**
	     * Handles interaction events that occur during transition
	     */
	    MDCTabScrollerFoundation.prototype.handleInteraction = function () {
	        // Early exit if we aren't animating
	        if (!this.isAnimating) {
	            return;
	        }
	        // Prevent other event listeners from handling this event
	        this.stopScrollAnimation();
	    };
	    /**
	     * Handles the transitionend event
	     */
	    MDCTabScrollerFoundation.prototype.handleTransitionEnd = function (evt) {
	        // Early exit if we aren't animating or the event was triggered by a different element.
	        var evtTarget = evt.target;
	        if (!this.isAnimating ||
	            !this.adapter.eventTargetMatchesSelector(evtTarget, MDCTabScrollerFoundation.strings.CONTENT_SELECTOR)) {
	            return;
	        }
	        this.isAnimating = false;
	        this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
	    };
	    /**
	     * Increment the scroll value by the scrollXIncrement using animation.
	     * @param scrollXIncrement The value by which to increment the scroll position
	     */
	    MDCTabScrollerFoundation.prototype.incrementScroll = function (scrollXIncrement) {
	        // Early exit for non-operational increment values
	        if (scrollXIncrement === 0) {
	            return;
	        }
	        this.animate(this.getIncrementScrollOperation(scrollXIncrement));
	    };
	    /**
	     * Increment the scroll value by the scrollXIncrement without animation.
	     * @param scrollXIncrement The value by which to increment the scroll position
	     */
	    MDCTabScrollerFoundation.prototype.incrementScrollImmediate = function (scrollXIncrement) {
	        // Early exit for non-operational increment values
	        if (scrollXIncrement === 0) {
	            return;
	        }
	        var operation = this.getIncrementScrollOperation(scrollXIncrement);
	        if (operation.scrollDelta === 0) {
	            return;
	        }
	        this.stopScrollAnimation();
	        this.adapter.setScrollAreaScrollLeft(operation.finalScrollPosition);
	    };
	    /**
	     * Scrolls to the given scrollX value
	     */
	    MDCTabScrollerFoundation.prototype.scrollTo = function (scrollX) {
	        if (this.isRTL()) {
	            this.scrollToImplRTL(scrollX);
	            return;
	        }
	        this.scrollToImpl(scrollX);
	    };
	    /**
	     * @return Browser-specific {@link MDCTabScrollerRTL} instance.
	     */
	    MDCTabScrollerFoundation.prototype.getRTLScroller = function () {
	        if (!this.rtlScrollerInstance) {
	            this.rtlScrollerInstance = this.rtlScrollerFactory();
	        }
	        return this.rtlScrollerInstance;
	    };
	    /**
	     * @return translateX value from a CSS matrix transform function string.
	     */
	    MDCTabScrollerFoundation.prototype.calculateCurrentTranslateX = function () {
	        var transformValue = this.adapter.getScrollContentStyleValue('transform');
	        // Early exit if no transform is present
	        if (transformValue === 'none') {
	            return 0;
	        }
	        // The transform value comes back as a matrix transformation in the form
	        // of `matrix(a, b, c, d, tx, ty)`. We only care about tx (translateX) so
	        // we're going to grab all the parenthesized values, strip out tx, and
	        // parse it.
	        var match = /\((.+?)\)/.exec(transformValue);
	        if (!match) {
	            return 0;
	        }
	        var matrixParams = match[1];
	        // tslint:disable-next-line:ban-ts-ignore "Unused vars" should be a linter warning, not a compiler error.
	        // @ts-ignore These unused variables should retain their semantic names for clarity.
	        var _a = __read(matrixParams.split(','), 6), a = _a[0], b = _a[1], c = _a[2], d = _a[3], tx = _a[4], ty = _a[5];
	        return parseFloat(tx); // tslint:disable-line:ban
	    };
	    /**
	     * Calculates a safe scroll value that is > 0 and < the max scroll value
	     * @param scrollX The distance to scroll
	     */
	    MDCTabScrollerFoundation.prototype.clampScrollValue = function (scrollX) {
	        var edges = this.calculateScrollEdges();
	        return Math.min(Math.max(edges.left, scrollX), edges.right);
	    };
	    MDCTabScrollerFoundation.prototype.computeCurrentScrollPositionRTL = function () {
	        var translateX = this.calculateCurrentTranslateX();
	        return this.getRTLScroller().getScrollPositionRTL(translateX);
	    };
	    MDCTabScrollerFoundation.prototype.calculateScrollEdges = function () {
	        var contentWidth = this.adapter.getScrollContentOffsetWidth();
	        var rootWidth = this.adapter.getScrollAreaOffsetWidth();
	        return {
	            left: 0,
	            right: contentWidth - rootWidth,
	        };
	    };
	    /**
	     * Internal scroll method
	     * @param scrollX The new scroll position
	     */
	    MDCTabScrollerFoundation.prototype.scrollToImpl = function (scrollX) {
	        var currentScrollX = this.getScrollPosition();
	        var safeScrollX = this.clampScrollValue(scrollX);
	        var scrollDelta = safeScrollX - currentScrollX;
	        this.animate({
	            finalScrollPosition: safeScrollX,
	            scrollDelta: scrollDelta,
	        });
	    };
	    /**
	     * Internal RTL scroll method
	     * @param scrollX The new scroll position
	     */
	    MDCTabScrollerFoundation.prototype.scrollToImplRTL = function (scrollX) {
	        var animation = this.getRTLScroller().scrollToRTL(scrollX);
	        this.animate(animation);
	    };
	    /**
	     * Internal method to compute the increment scroll operation values.
	     * @param scrollX The desired scroll position increment
	     * @return MDCTabScrollerAnimation with the sanitized values for performing the scroll operation.
	     */
	    MDCTabScrollerFoundation.prototype.getIncrementScrollOperation = function (scrollX) {
	        if (this.isRTL()) {
	            return this.getRTLScroller().incrementScrollRTL(scrollX);
	        }
	        var currentScrollX = this.getScrollPosition();
	        var targetScrollX = scrollX + currentScrollX;
	        var safeScrollX = this.clampScrollValue(targetScrollX);
	        var scrollDelta = safeScrollX - currentScrollX;
	        return {
	            finalScrollPosition: safeScrollX,
	            scrollDelta: scrollDelta,
	        };
	    };
	    /**
	     * Animates the tab scrolling
	     * @param animation The animation to apply
	     */
	    MDCTabScrollerFoundation.prototype.animate = function (animation) {
	        var _this = this;
	        // Early exit if translateX is 0, which means there's no animation to perform
	        if (animation.scrollDelta === 0) {
	            return;
	        }
	        this.stopScrollAnimation();
	        // This animation uses the FLIP approach.
	        // Read more here: https://aerotwist.com/blog/flip-your-animations/
	        this.adapter.setScrollAreaScrollLeft(animation.finalScrollPosition);
	        this.adapter.setScrollContentStyleProperty('transform', "translateX(" + animation.scrollDelta + "px)");
	        // Force repaint
	        this.adapter.computeScrollAreaClientRect();
	        requestAnimationFrame(function () {
	            _this.adapter.addClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
	            _this.adapter.setScrollContentStyleProperty('transform', 'none');
	        });
	        this.isAnimating = true;
	    };
	    /**
	     * Stops scroll animation
	     */
	    MDCTabScrollerFoundation.prototype.stopScrollAnimation = function () {
	        this.isAnimating = false;
	        var currentScrollPosition = this.getAnimatingScrollPosition();
	        this.adapter.removeClass(MDCTabScrollerFoundation.cssClasses.ANIMATING);
	        this.adapter.setScrollContentStyleProperty('transform', 'translateX(0px)');
	        this.adapter.setScrollAreaScrollLeft(currentScrollPosition);
	    };
	    /**
	     * Gets the current scroll position during animation
	     */
	    MDCTabScrollerFoundation.prototype.getAnimatingScrollPosition = function () {
	        var currentTranslateX = this.calculateCurrentTranslateX();
	        var scrollLeft = this.adapter.getScrollAreaScrollLeft();
	        if (this.isRTL()) {
	            return this.getRTLScroller().getAnimatingScrollPosition(scrollLeft, currentTranslateX);
	        }
	        return scrollLeft - currentTranslateX;
	    };
	    /**
	     * Determines the RTL Scroller to use
	     */
	    MDCTabScrollerFoundation.prototype.rtlScrollerFactory = function () {
	        // Browsers have three different implementations of scrollLeft in RTL mode,
	        // dependent on the browser. The behavior is based off the max LTR
	        // scrollLeft value and 0.
	        //
	        // * Default scrolling in RTL *
	        //    - Left-most value: 0
	        //    - Right-most value: Max LTR scrollLeft value
	        //
	        // * Negative scrolling in RTL *
	        //    - Left-most value: Negated max LTR scrollLeft value
	        //    - Right-most value: 0
	        //
	        // * Reverse scrolling in RTL *
	        //    - Left-most value: Max LTR scrollLeft value
	        //    - Right-most value: 0
	        //
	        // We use those principles below to determine which RTL scrollLeft
	        // behavior is implemented in the current browser.
	        var initialScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        this.adapter.setScrollAreaScrollLeft(initialScrollLeft - 1);
	        var newScrollLeft = this.adapter.getScrollAreaScrollLeft();
	        // If the newScrollLeft value is negative,then we know that the browser has
	        // implemented negative RTL scrolling, since all other implementations have
	        // only positive values.
	        if (newScrollLeft < 0) {
	            // Undo the scrollLeft test check
	            this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
	            return new MDCTabScrollerRTLNegative(this.adapter);
	        }
	        var rootClientRect = this.adapter.computeScrollAreaClientRect();
	        var contentClientRect = this.adapter.computeScrollContentClientRect();
	        var rightEdgeDelta = Math.round(contentClientRect.right - rootClientRect.right);
	        // Undo the scrollLeft test check
	        this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
	        // By calculating the clientRect of the root element and the clientRect of
	        // the content element, we can determine how much the scroll value changed
	        // when we performed the scrollLeft subtraction above.
	        if (rightEdgeDelta === newScrollLeft) {
	            return new MDCTabScrollerRTLReverse(this.adapter);
	        }
	        return new MDCTabScrollerRTLDefault(this.adapter);
	    };
	    MDCTabScrollerFoundation.prototype.isRTL = function () {
	        return this.adapter.getScrollContentStyleValue('direction') === 'rtl';
	    };
	    return MDCTabScrollerFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/**
	 * Stores result from computeHorizontalScrollbarHeight to avoid redundant processing.
	 */
	var horizontalScrollbarHeight_;
	/**
	 * Computes the height of browser-rendered horizontal scrollbars using a self-created test element.
	 * May return 0 (e.g. on OS X browsers under default configuration).
	 */
	function computeHorizontalScrollbarHeight(documentObj, shouldCacheResult) {
	    if (shouldCacheResult === void 0) { shouldCacheResult = true; }
	    if (shouldCacheResult && typeof horizontalScrollbarHeight_ !== 'undefined') {
	        return horizontalScrollbarHeight_;
	    }
	    var el = documentObj.createElement('div');
	    el.classList.add(cssClasses$7.SCROLL_TEST);
	    documentObj.body.appendChild(el);
	    var horizontalScrollbarHeight = el.offsetHeight - el.clientHeight;
	    documentObj.body.removeChild(el);
	    if (shouldCacheResult) {
	        horizontalScrollbarHeight_ = horizontalScrollbarHeight;
	    }
	    return horizontalScrollbarHeight;
	}

	var util = {
		__proto__: null,
		computeHorizontalScrollbarHeight: computeHorizontalScrollbarHeight
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabScroller = /** @class */ (function (_super) {
	    __extends(MDCTabScroller, _super);
	    function MDCTabScroller() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTabScroller.attachTo = function (root) {
	        return new MDCTabScroller(root);
	    };
	    // initialSyncWithDOM()
	    MDCTabScroller.prototype.initialize = function () {
	        this.area = this.root.querySelector(MDCTabScrollerFoundation.strings.AREA_SELECTOR);
	        this.content = this.root.querySelector(MDCTabScrollerFoundation.strings.CONTENT_SELECTOR);
	    };
	    MDCTabScroller.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.handleInteraction = function () {
	            _this.foundation.handleInteraction();
	        };
	        this.handleTransitionEnd = function (evt) {
	            _this.foundation.handleTransitionEnd(evt);
	        };
	        this.area.addEventListener('wheel', this.handleInteraction, applyPassive());
	        this.area.addEventListener('touchstart', this.handleInteraction, applyPassive());
	        this.area.addEventListener('pointerdown', this.handleInteraction, applyPassive());
	        this.area.addEventListener('mousedown', this.handleInteraction, applyPassive());
	        this.area.addEventListener('keydown', this.handleInteraction, applyPassive());
	        this.content.addEventListener('transitionend', this.handleTransitionEnd);
	    };
	    MDCTabScroller.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.area.removeEventListener('wheel', this.handleInteraction, applyPassive());
	        this.area.removeEventListener('touchstart', this.handleInteraction, applyPassive());
	        this.area.removeEventListener('pointerdown', this.handleInteraction, applyPassive());
	        this.area.removeEventListener('mousedown', this.handleInteraction, applyPassive());
	        this.area.removeEventListener('keydown', this.handleInteraction, applyPassive());
	        this.content.removeEventListener('transitionend', this.handleTransitionEnd);
	    };
	    MDCTabScroller.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            eventTargetMatchesSelector: function (evtTarget, selector) {
	                return matches$2(evtTarget, selector);
	            },
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            addScrollAreaClass: function (className) {
	                _this.area.classList.add(className);
	            },
	            setScrollAreaStyleProperty: function (prop, value) {
	                _this.area.style.setProperty(prop, value);
	            },
	            setScrollContentStyleProperty: function (prop, value) {
	                _this.content.style.setProperty(prop, value);
	            },
	            getScrollContentStyleValue: function (propName) {
	                return window.getComputedStyle(_this.content).getPropertyValue(propName);
	            },
	            setScrollAreaScrollLeft: function (scrollX) { return _this.area.scrollLeft = scrollX; },
	            getScrollAreaScrollLeft: function () { return _this.area.scrollLeft; },
	            getScrollContentOffsetWidth: function () { return _this.content.offsetWidth; },
	            getScrollAreaOffsetWidth: function () { return _this.area.offsetWidth; },
	            computeScrollAreaClientRect: function () { return _this.area.getBoundingClientRect(); },
	            computeScrollContentClientRect: function () {
	                return _this.content.getBoundingClientRect();
	            },
	            computeHorizontalScrollbarHeight: function () {
	                return computeHorizontalScrollbarHeight(document);
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCTabScrollerFoundation(adapter);
	    };
	    /**
	     * Returns the current visual scroll position
	     */
	    MDCTabScroller.prototype.getScrollPosition = function () {
	        return this.foundation.getScrollPosition();
	    };
	    /**
	     * Returns the width of the scroll content
	     */
	    MDCTabScroller.prototype.getScrollContentWidth = function () {
	        return this.content.offsetWidth;
	    };
	    /**
	     * Increments the scroll value by the given amount
	     * @param scrollXIncrement The pixel value by which to increment the scroll value
	     */
	    MDCTabScroller.prototype.incrementScroll = function (scrollXIncrement) {
	        this.foundation.incrementScroll(scrollXIncrement);
	    };
	    /**
	     * Scrolls to the given pixel position
	     * @param scrollX The pixel value to scroll to
	     */
	    MDCTabScroller.prototype.scrollTo = function (scrollX) {
	        this.foundation.scrollTo(scrollX);
	    };
	    return MDCTabScroller;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$6 = {
	    ACTIVE: 'mdc-tab-indicator--active',
	    FADE: 'mdc-tab-indicator--fade',
	    NO_TRANSITION: 'mdc-tab-indicator--no-transition',
	};
	var strings$9 = {
	    CONTENT_SELECTOR: '.mdc-tab-indicator__content',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabIndicatorFoundation = /** @class */ (function (_super) {
	    __extends(MDCTabIndicatorFoundation, _super);
	    function MDCTabIndicatorFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCTabIndicatorFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCTabIndicatorFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$6;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabIndicatorFoundation, "strings", {
	        get: function () {
	            return strings$9;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabIndicatorFoundation, "defaultAdapter", {
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                computeContentClientRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                setContentStyleProperty: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTabIndicatorFoundation.prototype.computeContentClientRect = function () {
	        return this.adapter.computeContentClientRect();
	    };
	    return MDCTabIndicatorFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/* istanbul ignore next: subclass is not a branch statement */
	var MDCFadingTabIndicatorFoundation = /** @class */ (function (_super) {
	    __extends(MDCFadingTabIndicatorFoundation, _super);
	    function MDCFadingTabIndicatorFoundation() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCFadingTabIndicatorFoundation.prototype.activate = function () {
	        this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
	    };
	    MDCFadingTabIndicatorFoundation.prototype.deactivate = function () {
	        this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
	    };
	    return MDCFadingTabIndicatorFoundation;
	}(MDCTabIndicatorFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	/* istanbul ignore next: subclass is not a branch statement */
	var MDCSlidingTabIndicatorFoundation = /** @class */ (function (_super) {
	    __extends(MDCSlidingTabIndicatorFoundation, _super);
	    function MDCSlidingTabIndicatorFoundation() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCSlidingTabIndicatorFoundation.prototype.activate = function (previousIndicatorClientRect) {
	        // Early exit if no indicator is present to handle cases where an indicator
	        // may be activated without a prior indicator state
	        if (!previousIndicatorClientRect) {
	            this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
	            return;
	        }
	        // This animation uses the FLIP approach. You can read more about it at the link below:
	        // https://aerotwist.com/blog/flip-your-animations/
	        // Calculate the dimensions based on the dimensions of the previous indicator
	        var currentClientRect = this.computeContentClientRect();
	        var widthDelta = previousIndicatorClientRect.width / currentClientRect.width;
	        var xPosition = previousIndicatorClientRect.left - currentClientRect.left;
	        this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
	        this.adapter.setContentStyleProperty('transform', "translateX(" + xPosition + "px) scaleX(" + widthDelta + ")");
	        // Force repaint before updating classes and transform to ensure the transform properly takes effect
	        this.computeContentClientRect();
	        this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
	        this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
	        this.adapter.setContentStyleProperty('transform', '');
	    };
	    MDCSlidingTabIndicatorFoundation.prototype.deactivate = function () {
	        this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
	    };
	    return MDCSlidingTabIndicatorFoundation;
	}(MDCTabIndicatorFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabIndicator = /** @class */ (function (_super) {
	    __extends(MDCTabIndicator, _super);
	    function MDCTabIndicator() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTabIndicator.attachTo = function (root) {
	        return new MDCTabIndicator(root);
	    };
	    MDCTabIndicator.prototype.initialize = function () {
	        this.content = this.root.querySelector(MDCTabIndicatorFoundation.strings.CONTENT_SELECTOR);
	    };
	    MDCTabIndicator.prototype.computeContentClientRect = function () {
	        return this.foundation.computeContentClientRect();
	    };
	    MDCTabIndicator.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            computeContentClientRect: function () { return _this.content.getBoundingClientRect(); },
	            setContentStyleProperty: function (prop, value) {
	                _this.content.style.setProperty(prop, value);
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	        if (this.root.classList.contains(MDCTabIndicatorFoundation.cssClasses.FADE)) {
	            return new MDCFadingTabIndicatorFoundation(adapter);
	        }
	        // Default to the sliding indicator
	        return new MDCSlidingTabIndicatorFoundation(adapter);
	    };
	    MDCTabIndicator.prototype.activate = function (previousIndicatorClientRect) {
	        this.foundation.activate(previousIndicatorClientRect);
	    };
	    MDCTabIndicator.prototype.deactivate = function () {
	        this.foundation.deactivate();
	    };
	    return MDCTabIndicator;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$5 = {
	    ACTIVE: 'mdc-tab--active',
	};
	var strings$8 = {
	    ARIA_SELECTED: 'aria-selected',
	    CONTENT_SELECTOR: '.mdc-tab__content',
	    INTERACTED_EVENT: 'MDCTab:interacted',
	    RIPPLE_SELECTOR: '.mdc-tab__ripple',
	    TABINDEX: 'tabIndex',
	    TAB_INDICATOR_SELECTOR: '.mdc-tab-indicator',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTabFoundation = /** @class */ (function (_super) {
	    __extends(MDCTabFoundation, _super);
	    function MDCTabFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCTabFoundation.defaultAdapter), adapter)) || this;
	        _this.focusOnActivate = true;
	        return _this;
	    }
	    Object.defineProperty(MDCTabFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$5;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabFoundation, "strings", {
	        get: function () {
	            return strings$8;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabFoundation, "defaultAdapter", {
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                setAttr: function () { return undefined; },
	                activateIndicator: function () { return undefined; },
	                deactivateIndicator: function () { return undefined; },
	                notifyInteracted: function () { return undefined; },
	                getOffsetLeft: function () { return 0; },
	                getOffsetWidth: function () { return 0; },
	                getContentOffsetLeft: function () { return 0; },
	                getContentOffsetWidth: function () { return 0; },
	                focus: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTabFoundation.prototype.handleClick = function () {
	        // It's up to the parent component to keep track of the active Tab and
	        // ensure we don't activate a Tab that's already active.
	        this.adapter.notifyInteracted();
	    };
	    MDCTabFoundation.prototype.isActive = function () {
	        return this.adapter.hasClass(cssClasses$5.ACTIVE);
	    };
	    /**
	     * Sets whether the tab should focus itself when activated
	     */
	    MDCTabFoundation.prototype.setFocusOnActivate = function (focusOnActivate) {
	        this.focusOnActivate = focusOnActivate;
	    };
	    /**
	     * Activates the Tab
	     */
	    MDCTabFoundation.prototype.activate = function (previousIndicatorClientRect) {
	        this.adapter.addClass(cssClasses$5.ACTIVE);
	        this.adapter.setAttr(strings$8.ARIA_SELECTED, 'true');
	        this.adapter.setAttr(strings$8.TABINDEX, '0');
	        this.adapter.activateIndicator(previousIndicatorClientRect);
	        if (this.focusOnActivate) {
	            this.adapter.focus();
	        }
	    };
	    /**
	     * Deactivates the Tab
	     */
	    MDCTabFoundation.prototype.deactivate = function () {
	        // Early exit
	        if (!this.isActive()) {
	            return;
	        }
	        this.adapter.removeClass(cssClasses$5.ACTIVE);
	        this.adapter.setAttr(strings$8.ARIA_SELECTED, 'false');
	        this.adapter.setAttr(strings$8.TABINDEX, '-1');
	        this.adapter.deactivateIndicator();
	    };
	    /**
	     * Returns the dimensions of the Tab
	     */
	    MDCTabFoundation.prototype.computeDimensions = function () {
	        var rootWidth = this.adapter.getOffsetWidth();
	        var rootLeft = this.adapter.getOffsetLeft();
	        var contentWidth = this.adapter.getContentOffsetWidth();
	        var contentLeft = this.adapter.getContentOffsetLeft();
	        return {
	            contentLeft: rootLeft + contentLeft,
	            contentRight: rootLeft + contentLeft + contentWidth,
	            rootLeft: rootLeft,
	            rootRight: rootLeft + rootWidth,
	        };
	    };
	    return MDCTabFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTab = /** @class */ (function (_super) {
	    __extends(MDCTab, _super);
	    function MDCTab() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTab.attachTo = function (root) {
	        return new MDCTab(root);
	    };
	    MDCTab.prototype.initialize = function (rippleFactory, tabIndicatorFactory) {
	        if (rippleFactory === void 0) { rippleFactory = function (el, foundation) { return new MDCRipple(el, foundation); }; }
	        if (tabIndicatorFactory === void 0) { tabIndicatorFactory = function (el) { return new MDCTabIndicator(el); }; }
	        this.id = this.root.id;
	        var rippleFoundation = new MDCRippleFoundation(MDCRipple.createAdapter(this));
	        this.ripple = rippleFactory(this.root, rippleFoundation);
	        var tabIndicatorElement = this.root.querySelector(MDCTabFoundation.strings.TAB_INDICATOR_SELECTOR);
	        this.tabIndicator = tabIndicatorFactory(tabIndicatorElement);
	        this.content = this.root.querySelector(MDCTabFoundation.strings.CONTENT_SELECTOR);
	    };
	    MDCTab.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.handleClick = function () {
	            _this.foundation.handleClick();
	        };
	        this.listen('click', this.handleClick);
	    };
	    MDCTab.prototype.destroy = function () {
	        this.unlisten('click', this.handleClick);
	        this.ripple.destroy();
	        _super.prototype.destroy.call(this);
	    };
	    MDCTab.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            setAttr: function (attr, value) { return _this.root.setAttribute(attr, value); },
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            activateIndicator: function (previousIndicatorClientRect) {
	                _this.tabIndicator.activate(previousIndicatorClientRect);
	            },
	            deactivateIndicator: function () {
	                _this.tabIndicator.deactivate();
	            },
	            notifyInteracted: function () { return _this.emit(MDCTabFoundation.strings.INTERACTED_EVENT, { tabId: _this.id }, true /* bubble */); },
	            getOffsetLeft: function () { return _this.root.offsetLeft; },
	            getOffsetWidth: function () { return _this.root.offsetWidth; },
	            getContentOffsetLeft: function () { return _this.content.offsetLeft; },
	            getContentOffsetWidth: function () { return _this.content.offsetWidth; },
	            focus: function () { return _this.root.focus(); },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCTabFoundation(adapter);
	    };
	    Object.defineProperty(MDCTab.prototype, "active", {
	        /**
	         * Getter for the active state of the tab
	         */
	        get: function () {
	            return this.foundation.isActive();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTab.prototype, "focusOnActivate", {
	        set: function (focusOnActivate) {
	            this.foundation.setFocusOnActivate(focusOnActivate);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Activates the tab
	     */
	    MDCTab.prototype.activate = function (computeIndicatorClientRect) {
	        this.foundation.activate(computeIndicatorClientRect);
	    };
	    /**
	     * Deactivates the tab
	     */
	    MDCTab.prototype.deactivate = function () {
	        this.foundation.deactivate();
	    };
	    /**
	     * Returns the indicator's client rect
	     */
	    MDCTab.prototype.computeIndicatorClientRect = function () {
	        return this.tabIndicator.computeContentClientRect();
	    };
	    MDCTab.prototype.computeDimensions = function () {
	        return this.foundation.computeDimensions();
	    };
	    /**
	     * Focuses the tab
	     */
	    MDCTab.prototype.focus = function () {
	        this.root.focus();
	    };
	    return MDCTab;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$7 = {
	    ARROW_LEFT_KEY: 'ArrowLeft',
	    ARROW_RIGHT_KEY: 'ArrowRight',
	    END_KEY: 'End',
	    ENTER_KEY: 'Enter',
	    HOME_KEY: 'Home',
	    SPACE_KEY: 'Space',
	    TAB_ACTIVATED_EVENT: 'MDCTabBar:activated',
	    TAB_SCROLLER_SELECTOR: '.mdc-tab-scroller',
	    TAB_SELECTOR: '.mdc-tab',
	};
	var numbers$3 = {
	    ARROW_LEFT_KEYCODE: 37,
	    ARROW_RIGHT_KEYCODE: 39,
	    END_KEYCODE: 35,
	    ENTER_KEYCODE: 13,
	    EXTRA_SCROLL_AMOUNT: 20,
	    HOME_KEYCODE: 36,
	    SPACE_KEYCODE: 32,
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var ACCEPTABLE_KEYS = new Set();
	// IE11 has no support for new Set with iterable so we need to initialize this by hand
	ACCEPTABLE_KEYS.add(strings$7.ARROW_LEFT_KEY);
	ACCEPTABLE_KEYS.add(strings$7.ARROW_RIGHT_KEY);
	ACCEPTABLE_KEYS.add(strings$7.END_KEY);
	ACCEPTABLE_KEYS.add(strings$7.HOME_KEY);
	ACCEPTABLE_KEYS.add(strings$7.ENTER_KEY);
	ACCEPTABLE_KEYS.add(strings$7.SPACE_KEY);
	var KEYCODE_MAP = new Map();
	// IE11 has no support for new Map with iterable so we need to initialize this by hand
	KEYCODE_MAP.set(numbers$3.ARROW_LEFT_KEYCODE, strings$7.ARROW_LEFT_KEY);
	KEYCODE_MAP.set(numbers$3.ARROW_RIGHT_KEYCODE, strings$7.ARROW_RIGHT_KEY);
	KEYCODE_MAP.set(numbers$3.END_KEYCODE, strings$7.END_KEY);
	KEYCODE_MAP.set(numbers$3.HOME_KEYCODE, strings$7.HOME_KEY);
	KEYCODE_MAP.set(numbers$3.ENTER_KEYCODE, strings$7.ENTER_KEY);
	KEYCODE_MAP.set(numbers$3.SPACE_KEYCODE, strings$7.SPACE_KEY);
	var MDCTabBarFoundation = /** @class */ (function (_super) {
	    __extends(MDCTabBarFoundation, _super);
	    function MDCTabBarFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCTabBarFoundation.defaultAdapter), adapter)) || this;
	        _this.useAutomaticActivation = false;
	        return _this;
	    }
	    Object.defineProperty(MDCTabBarFoundation, "strings", {
	        get: function () {
	            return strings$7;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabBarFoundation, "numbers", {
	        get: function () {
	            return numbers$3;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabBarFoundation, "defaultAdapter", {
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                scrollTo: function () { return undefined; },
	                incrementScroll: function () { return undefined; },
	                getScrollPosition: function () { return 0; },
	                getScrollContentWidth: function () { return 0; },
	                getOffsetWidth: function () { return 0; },
	                isRTL: function () { return false; },
	                setActiveTab: function () { return undefined; },
	                activateTabAtIndex: function () { return undefined; },
	                deactivateTabAtIndex: function () { return undefined; },
	                focusTabAtIndex: function () { return undefined; },
	                getTabIndicatorClientRectAtIndex: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                getTabDimensionsAtIndex: function () {
	                    return ({ rootLeft: 0, rootRight: 0, contentLeft: 0, contentRight: 0 });
	                },
	                getPreviousActiveTabIndex: function () { return -1; },
	                getFocusedTabIndex: function () { return -1; },
	                getIndexOfTabById: function () { return -1; },
	                getTabListLength: function () { return 0; },
	                notifyTabActivated: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Switches between automatic and manual activation modes.
	     * See https://www.w3.org/TR/wai-aria-practices/#tabpanel for examples.
	     */
	    MDCTabBarFoundation.prototype.setUseAutomaticActivation = function (useAutomaticActivation) {
	        this.useAutomaticActivation = useAutomaticActivation;
	    };
	    MDCTabBarFoundation.prototype.activateTab = function (index) {
	        var previousActiveIndex = this.adapter.getPreviousActiveTabIndex();
	        if (!this.indexIsInRange(index) || index === previousActiveIndex) {
	            return;
	        }
	        var previousClientRect;
	        if (previousActiveIndex !== -1) {
	            this.adapter.deactivateTabAtIndex(previousActiveIndex);
	            previousClientRect =
	                this.adapter.getTabIndicatorClientRectAtIndex(previousActiveIndex);
	        }
	        this.adapter.activateTabAtIndex(index, previousClientRect);
	        this.scrollIntoView(index);
	        this.adapter.notifyTabActivated(index);
	    };
	    MDCTabBarFoundation.prototype.handleKeyDown = function (evt) {
	        // Get the key from the event
	        var key = this.getKeyFromEvent(evt);
	        // Early exit if the event key isn't one of the keyboard navigation keys
	        if (key === undefined) {
	            return;
	        }
	        // Prevent default behavior for movement keys, but not for activation keys, since :active is used to apply ripple
	        if (!this.isActivationKey(key)) {
	            evt.preventDefault();
	        }
	        if (this.useAutomaticActivation) {
	            if (this.isActivationKey(key)) {
	                return;
	            }
	            var index = this.determineTargetFromKey(this.adapter.getPreviousActiveTabIndex(), key);
	            this.adapter.setActiveTab(index);
	            this.scrollIntoView(index);
	        }
	        else {
	            var focusedTabIndex = this.adapter.getFocusedTabIndex();
	            if (this.isActivationKey(key)) {
	                this.adapter.setActiveTab(focusedTabIndex);
	            }
	            else {
	                var index = this.determineTargetFromKey(focusedTabIndex, key);
	                this.adapter.focusTabAtIndex(index);
	                this.scrollIntoView(index);
	            }
	        }
	    };
	    /**
	     * Handles the MDCTab:interacted event
	     */
	    MDCTabBarFoundation.prototype.handleTabInteraction = function (evt) {
	        this.adapter.setActiveTab(this.adapter.getIndexOfTabById(evt.detail.tabId));
	    };
	    /**
	     * Scrolls the tab at the given index into view
	     * @param index The tab index to make visible
	     */
	    MDCTabBarFoundation.prototype.scrollIntoView = function (index) {
	        // Early exit if the index is out of range
	        if (!this.indexIsInRange(index)) {
	            return;
	        }
	        // Always scroll to 0 if scrolling to the 0th index
	        if (index === 0) {
	            this.adapter.scrollTo(0);
	            return;
	        }
	        // Always scroll to the max value if scrolling to the Nth index
	        // MDCTabScroller.scrollTo() will never scroll past the max possible value
	        if (index === this.adapter.getTabListLength() - 1) {
	            this.adapter.scrollTo(this.adapter.getScrollContentWidth());
	            return;
	        }
	        if (this.isRTL()) {
	            this.scrollIntoViewImplRTL(index);
	            return;
	        }
	        this.scrollIntoViewImpl(index);
	    };
	    /**
	     * Private method for determining the index of the destination tab based on what key was pressed
	     * @param origin The original index from which to determine the destination
	     * @param key The name of the key
	     */
	    MDCTabBarFoundation.prototype.determineTargetFromKey = function (origin, key) {
	        var isRTL = this.isRTL();
	        var maxIndex = this.adapter.getTabListLength() - 1;
	        var shouldGoToEnd = key === strings$7.END_KEY;
	        var shouldDecrement = key === strings$7.ARROW_LEFT_KEY && !isRTL || key === strings$7.ARROW_RIGHT_KEY && isRTL;
	        var shouldIncrement = key === strings$7.ARROW_RIGHT_KEY && !isRTL || key === strings$7.ARROW_LEFT_KEY && isRTL;
	        var index = origin;
	        if (shouldGoToEnd) {
	            index = maxIndex;
	        }
	        else if (shouldDecrement) {
	            index -= 1;
	        }
	        else if (shouldIncrement) {
	            index += 1;
	        }
	        else {
	            index = 0;
	        }
	        if (index < 0) {
	            index = maxIndex;
	        }
	        else if (index > maxIndex) {
	            index = 0;
	        }
	        return index;
	    };
	    /**
	     * Calculates the scroll increment that will make the tab at the given index visible
	     * @param index The index of the tab
	     * @param nextIndex The index of the next tab
	     * @param scrollPosition The current scroll position
	     * @param barWidth The width of the Tab Bar
	     */
	    MDCTabBarFoundation.prototype.calculateScrollIncrement = function (index, nextIndex, scrollPosition, barWidth) {
	        var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
	        var relativeContentLeft = nextTabDimensions.contentLeft - scrollPosition - barWidth;
	        var relativeContentRight = nextTabDimensions.contentRight - scrollPosition;
	        var leftIncrement = relativeContentRight - numbers$3.EXTRA_SCROLL_AMOUNT;
	        var rightIncrement = relativeContentLeft + numbers$3.EXTRA_SCROLL_AMOUNT;
	        if (nextIndex < index) {
	            return Math.min(leftIncrement, 0);
	        }
	        return Math.max(rightIncrement, 0);
	    };
	    /**
	     * Calculates the scroll increment that will make the tab at the given index visible in RTL
	     * @param index The index of the tab
	     * @param nextIndex The index of the next tab
	     * @param scrollPosition The current scroll position
	     * @param barWidth The width of the Tab Bar
	     * @param scrollContentWidth The width of the scroll content
	     */
	    MDCTabBarFoundation.prototype.calculateScrollIncrementRTL = function (index, nextIndex, scrollPosition, barWidth, scrollContentWidth) {
	        var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
	        var relativeContentLeft = scrollContentWidth - nextTabDimensions.contentLeft - scrollPosition;
	        var relativeContentRight = scrollContentWidth - nextTabDimensions.contentRight - scrollPosition - barWidth;
	        var leftIncrement = relativeContentRight + numbers$3.EXTRA_SCROLL_AMOUNT;
	        var rightIncrement = relativeContentLeft - numbers$3.EXTRA_SCROLL_AMOUNT;
	        if (nextIndex > index) {
	            return Math.max(leftIncrement, 0);
	        }
	        return Math.min(rightIncrement, 0);
	    };
	    /**
	     * Determines the index of the adjacent tab closest to either edge of the Tab Bar
	     * @param index The index of the tab
	     * @param tabDimensions The dimensions of the tab
	     * @param scrollPosition The current scroll position
	     * @param barWidth The width of the tab bar
	     */
	    MDCTabBarFoundation.prototype.findAdjacentTabIndexClosestToEdge = function (index, tabDimensions, scrollPosition, barWidth) {
	        /**
	         * Tabs are laid out in the Tab Scroller like this:
	         *
	         *    Scroll Position
	         *    +---+
	         *    |   |   Bar Width
	         *    |   +-----------------------------------+
	         *    |   |                                   |
	         *    |   V                                   V
	         *    |   +-----------------------------------+
	         *    V   |             Tab Scroller          |
	         *    +------------+--------------+-------------------+
	         *    |    Tab     |      Tab     |        Tab        |
	         *    +------------+--------------+-------------------+
	         *        |                                   |
	         *        +-----------------------------------+
	         *
	         * To determine the next adjacent index, we look at the Tab root left and
	         * Tab root right, both relative to the scroll position. If the Tab root
	         * left is less than 0, then we know it's out of view to the left. If the
	         * Tab root right minus the bar width is greater than 0, we know the Tab is
	         * out of view to the right. From there, we either increment or decrement
	         * the index.
	         */
	        var relativeRootLeft = tabDimensions.rootLeft - scrollPosition;
	        var relativeRootRight = tabDimensions.rootRight - scrollPosition - barWidth;
	        var relativeRootDelta = relativeRootLeft + relativeRootRight;
	        var leftEdgeIsCloser = relativeRootLeft < 0 || relativeRootDelta < 0;
	        var rightEdgeIsCloser = relativeRootRight > 0 || relativeRootDelta > 0;
	        if (leftEdgeIsCloser) {
	            return index - 1;
	        }
	        if (rightEdgeIsCloser) {
	            return index + 1;
	        }
	        return -1;
	    };
	    /**
	     * Determines the index of the adjacent tab closest to either edge of the Tab Bar in RTL
	     * @param index The index of the tab
	     * @param tabDimensions The dimensions of the tab
	     * @param scrollPosition The current scroll position
	     * @param barWidth The width of the tab bar
	     * @param scrollContentWidth The width of the scroller content
	     */
	    MDCTabBarFoundation.prototype.findAdjacentTabIndexClosestToEdgeRTL = function (index, tabDimensions, scrollPosition, barWidth, scrollContentWidth) {
	        var rootLeft = scrollContentWidth - tabDimensions.rootLeft - barWidth - scrollPosition;
	        var rootRight = scrollContentWidth - tabDimensions.rootRight - scrollPosition;
	        var rootDelta = rootLeft + rootRight;
	        var leftEdgeIsCloser = rootLeft > 0 || rootDelta > 0;
	        var rightEdgeIsCloser = rootRight < 0 || rootDelta < 0;
	        if (leftEdgeIsCloser) {
	            return index + 1;
	        }
	        if (rightEdgeIsCloser) {
	            return index - 1;
	        }
	        return -1;
	    };
	    /**
	     * Returns the key associated with a keydown event
	     * @param evt The keydown event
	     */
	    MDCTabBarFoundation.prototype.getKeyFromEvent = function (evt) {
	        if (ACCEPTABLE_KEYS.has(evt.key)) {
	            return evt.key;
	        }
	        return KEYCODE_MAP.get(evt.keyCode);
	    };
	    MDCTabBarFoundation.prototype.isActivationKey = function (key) {
	        return key === strings$7.SPACE_KEY || key === strings$7.ENTER_KEY;
	    };
	    /**
	     * Returns whether a given index is inclusively between the ends
	     * @param index The index to test
	     */
	    MDCTabBarFoundation.prototype.indexIsInRange = function (index) {
	        return index >= 0 && index < this.adapter.getTabListLength();
	    };
	    /**
	     * Returns the view's RTL property
	     */
	    MDCTabBarFoundation.prototype.isRTL = function () {
	        return this.adapter.isRTL();
	    };
	    /**
	     * Scrolls the tab at the given index into view for left-to-right user agents.
	     * @param index The index of the tab to scroll into view
	     */
	    MDCTabBarFoundation.prototype.scrollIntoViewImpl = function (index) {
	        var scrollPosition = this.adapter.getScrollPosition();
	        var barWidth = this.adapter.getOffsetWidth();
	        var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
	        var nextIndex = this.findAdjacentTabIndexClosestToEdge(index, tabDimensions, scrollPosition, barWidth);
	        if (!this.indexIsInRange(nextIndex)) {
	            return;
	        }
	        var scrollIncrement = this.calculateScrollIncrement(index, nextIndex, scrollPosition, barWidth);
	        this.adapter.incrementScroll(scrollIncrement);
	    };
	    /**
	     * Scrolls the tab at the given index into view in RTL
	     * @param index The tab index to make visible
	     */
	    MDCTabBarFoundation.prototype.scrollIntoViewImplRTL = function (index) {
	        var scrollPosition = this.adapter.getScrollPosition();
	        var barWidth = this.adapter.getOffsetWidth();
	        var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
	        var scrollWidth = this.adapter.getScrollContentWidth();
	        var nextIndex = this.findAdjacentTabIndexClosestToEdgeRTL(index, tabDimensions, scrollPosition, barWidth, scrollWidth);
	        if (!this.indexIsInRange(nextIndex)) {
	            return;
	        }
	        var scrollIncrement = this.calculateScrollIncrementRTL(index, nextIndex, scrollPosition, barWidth, scrollWidth);
	        this.adapter.incrementScroll(scrollIncrement);
	    };
	    return MDCTabBarFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$6 = MDCTabBarFoundation.strings;
	var tabIdCounter = 0;
	var MDCTabBar = /** @class */ (function (_super) {
	    __extends(MDCTabBar, _super);
	    function MDCTabBar() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTabBar.attachTo = function (root) {
	        return new MDCTabBar(root);
	    };
	    Object.defineProperty(MDCTabBar.prototype, "focusOnActivate", {
	        set: function (focusOnActivate) {
	            var e_1, _a;
	            try {
	                for (var _b = __values(this.tabList), _c = _b.next(); !_c.done; _c = _b.next()) {
	                    var tab = _c.value;
	                    tab.focusOnActivate = focusOnActivate;
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTabBar.prototype, "useAutomaticActivation", {
	        set: function (useAutomaticActivation) {
	            this.foundation.setUseAutomaticActivation(useAutomaticActivation);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTabBar.prototype.initialize = function (tabFactory, tabScrollerFactory) {
	        if (tabFactory === void 0) { tabFactory = function (el) { return new MDCTab(el); }; }
	        if (tabScrollerFactory === void 0) { tabScrollerFactory = function (el) { return new MDCTabScroller(el); }; }
	        this.tabList = this.instantiateTabs(tabFactory);
	        this.tabScroller = this.instantiatetabScroller(tabScrollerFactory);
	    };
	    MDCTabBar.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.handleTabInteraction = function (evt) {
	            _this.foundation.handleTabInteraction(evt);
	        };
	        this.handleKeyDown = function (evt) {
	            _this.foundation.handleKeyDown(evt);
	        };
	        this.listen(MDCTabFoundation.strings.INTERACTED_EVENT, this.handleTabInteraction);
	        this.listen('keydown', this.handleKeyDown);
	        for (var i = 0; i < this.tabList.length; i++) {
	            if (this.tabList[i].active) {
	                this.scrollIntoView(i);
	                break;
	            }
	        }
	    };
	    MDCTabBar.prototype.destroy = function () {
	        var e_2, _a;
	        _super.prototype.destroy.call(this);
	        this.unlisten(MDCTabFoundation.strings.INTERACTED_EVENT, this.handleTabInteraction);
	        this.unlisten('keydown', this.handleKeyDown);
	        try {
	            for (var _b = __values(this.tabList), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var tab = _c.value;
	                tab.destroy();
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	        if (this.tabScroller) {
	            this.tabScroller.destroy();
	        }
	    };
	    MDCTabBar.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            scrollTo: function (scrollX) {
	                _this.tabScroller.scrollTo(scrollX);
	            },
	            incrementScroll: function (scrollXIncrement) {
	                _this.tabScroller.incrementScroll(scrollXIncrement);
	            },
	            getScrollPosition: function () { return _this.tabScroller.getScrollPosition(); },
	            getScrollContentWidth: function () { return _this.tabScroller.getScrollContentWidth(); },
	            getOffsetWidth: function () { return _this.root.offsetWidth; },
	            isRTL: function () { return window.getComputedStyle(_this.root).getPropertyValue('direction') === 'rtl'; },
	            setActiveTab: function (index) {
	                _this.foundation.activateTab(index);
	            },
	            activateTabAtIndex: function (index, clientRect) {
	                _this.tabList[index].activate(clientRect);
	            },
	            deactivateTabAtIndex: function (index) {
	                _this.tabList[index].deactivate();
	            },
	            focusTabAtIndex: function (index) {
	                _this.tabList[index].focus();
	            },
	            getTabIndicatorClientRectAtIndex: function (index) {
	                return _this.tabList[index].computeIndicatorClientRect();
	            },
	            getTabDimensionsAtIndex: function (index) {
	                return _this.tabList[index].computeDimensions();
	            },
	            getPreviousActiveTabIndex: function () {
	                for (var i = 0; i < _this.tabList.length; i++) {
	                    if (_this.tabList[i].active) {
	                        return i;
	                    }
	                }
	                return -1;
	            },
	            getFocusedTabIndex: function () {
	                var tabElements = _this.getTabElements();
	                var activeElement = document.activeElement;
	                return tabElements.indexOf(activeElement);
	            },
	            getIndexOfTabById: function (id) {
	                for (var i = 0; i < _this.tabList.length; i++) {
	                    if (_this.tabList[i].id === id) {
	                        return i;
	                    }
	                }
	                return -1;
	            },
	            getTabListLength: function () { return _this.tabList.length; },
	            notifyTabActivated: function (index) { return _this.emit(strings$6.TAB_ACTIVATED_EVENT, { index: index }, true); },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCTabBarFoundation(adapter);
	    };
	    /**
	     * Activates the tab at the given index
	     * @param index The index of the tab
	     */
	    MDCTabBar.prototype.activateTab = function (index) {
	        this.foundation.activateTab(index);
	    };
	    /**
	     * Scrolls the tab at the given index into view
	     * @param index THe index of the tab
	     */
	    MDCTabBar.prototype.scrollIntoView = function (index) {
	        this.foundation.scrollIntoView(index);
	    };
	    /**
	     * Returns all the tab elements in a nice clean array
	     */
	    MDCTabBar.prototype.getTabElements = function () {
	        return [].slice.call(this.root.querySelectorAll(strings$6.TAB_SELECTOR));
	    };
	    /**
	     * Instantiates tab components on all child tab elements
	     */
	    MDCTabBar.prototype.instantiateTabs = function (tabFactory) {
	        return this.getTabElements().map(function (el) {
	            el.id = el.id || "mdc-tab-" + ++tabIdCounter;
	            return tabFactory(el);
	        });
	    };
	    /**
	     * Instantiates tab scroller component on the child tab scroller element
	     */
	    MDCTabBar.prototype.instantiatetabScroller = function (tabScrollerFactory) {
	        var tabScrollerElement = this.root.querySelector(strings$6.TAB_SCROLLER_SELECTOR);
	        if (tabScrollerElement) {
	            return tabScrollerFactory(tabScrollerElement);
	        }
	        return null;
	    };
	    return MDCTabBar;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$6 = {
		__proto__: null,
		MDCTabBar: MDCTabBar,
		numbers: numbers$3,
		strings: strings$7,
		MDCTabBarFoundation: MDCTabBarFoundation
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$5 = {
		__proto__: null,
		MDCTabIndicator: MDCTabIndicator,
		cssClasses: cssClasses$6,
		strings: strings$9,
		MDCTabIndicatorFoundation: MDCTabIndicatorFoundation,
		MDCFadingTabIndicatorFoundation: MDCFadingTabIndicatorFoundation,
		MDCSlidingTabIndicatorFoundation: MDCSlidingTabIndicatorFoundation
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$4 = {
		__proto__: null,
		util: util,
		MDCTabScroller: MDCTabScroller,
		cssClasses: cssClasses$7,
		strings: strings$a,
		MDCTabScrollerFoundation: MDCTabScrollerFoundation
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$3 = {
		__proto__: null,
		MDCTab: MDCTab,
		cssClasses: cssClasses$5,
		strings: strings$8,
		MDCTabFoundation: MDCTabFoundation
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$4 = {
	    ROOT: 'mdc-text-field-character-counter',
	};
	var strings$5 = {
	    ROOT_SELECTOR: "." + cssClasses$4.ROOT,
	};

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTextFieldCharacterCounterFoundation = /** @class */ (function (_super) {
	    __extends(MDCTextFieldCharacterCounterFoundation, _super);
	    function MDCTextFieldCharacterCounterFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCTextFieldCharacterCounterFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$4;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "strings", {
	        get: function () {
	            return strings$5;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldCharacterCounterFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCTextFieldCharacterCounterAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            return {
	                setContent: function () { return undefined; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTextFieldCharacterCounterFoundation.prototype.setCounterValue = function (currentLength, maxLength) {
	        currentLength = Math.min(currentLength, maxLength);
	        this.adapter.setContent(currentLength + " / " + maxLength);
	    };
	    return MDCTextFieldCharacterCounterFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTextFieldCharacterCounter = /** @class */ (function (_super) {
	    __extends(MDCTextFieldCharacterCounter, _super);
	    function MDCTextFieldCharacterCounter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTextFieldCharacterCounter.attachTo = function (root) {
	        return new MDCTextFieldCharacterCounter(root);
	    };
	    Object.defineProperty(MDCTextFieldCharacterCounter.prototype, "foundationForTextField", {
	        // Provided for access by MDCTextField component
	        get: function () {
	            return this.foundation;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTextFieldCharacterCounter.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        var adapter = {
	            setContent: function (content) {
	                _this.root.textContent = content;
	            },
	        };
	        return new MDCTextFieldCharacterCounterFoundation(adapter);
	    };
	    return MDCTextFieldCharacterCounter;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$4 = {
	    ARIA_CONTROLS: 'aria-controls',
	    ARIA_DESCRIBEDBY: 'aria-describedby',
	    INPUT_SELECTOR: '.mdc-text-field__input',
	    LABEL_SELECTOR: '.mdc-floating-label',
	    LEADING_ICON_SELECTOR: '.mdc-text-field__icon--leading',
	    LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',
	    OUTLINE_SELECTOR: '.mdc-notched-outline',
	    PREFIX_SELECTOR: '.mdc-text-field__affix--prefix',
	    SUFFIX_SELECTOR: '.mdc-text-field__affix--suffix',
	    TRAILING_ICON_SELECTOR: '.mdc-text-field__icon--trailing'
	};
	var cssClasses$3 = {
	    DISABLED: 'mdc-text-field--disabled',
	    FOCUSED: 'mdc-text-field--focused',
	    HELPER_LINE: 'mdc-text-field-helper-line',
	    INVALID: 'mdc-text-field--invalid',
	    LABEL_FLOATING: 'mdc-text-field--label-floating',
	    NO_LABEL: 'mdc-text-field--no-label',
	    OUTLINED: 'mdc-text-field--outlined',
	    ROOT: 'mdc-text-field',
	    TEXTAREA: 'mdc-text-field--textarea',
	    WITH_LEADING_ICON: 'mdc-text-field--with-leading-icon',
	    WITH_TRAILING_ICON: 'mdc-text-field--with-trailing-icon',
	    WITH_INTERNAL_COUNTER: 'mdc-text-field--with-internal-counter',
	};
	var numbers$2 = {
	    LABEL_SCALE: 0.75,
	};
	/**
	 * Whitelist based off of
	 * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation
	 * under the "Validation-related attributes" section.
	 */
	var VALIDATION_ATTR_WHITELIST = [
	    'pattern',
	    'min',
	    'max',
	    'required',
	    'step',
	    'minlength',
	    'maxlength',
	];
	/**
	 * Label should always float for these types as they show some UI even if value
	 * is empty.
	 */
	var ALWAYS_FLOAT_TYPES = [
	    'color',
	    'date',
	    'datetime-local',
	    'month',
	    'range',
	    'time',
	    'week',
	];

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var POINTERDOWN_EVENTS = ['mousedown', 'touchstart'];
	var INTERACTION_EVENTS$1 = ['click', 'keydown'];
	var MDCTextFieldFoundation = /** @class */ (function (_super) {
	    __extends(MDCTextFieldFoundation, _super);
	    /**
	     * @param adapter
	     * @param foundationMap Map from subcomponent names to their subfoundations.
	     */
	    function MDCTextFieldFoundation(adapter, foundationMap) {
	        if (foundationMap === void 0) { foundationMap = {}; }
	        var _this = _super.call(this, __assign(__assign({}, MDCTextFieldFoundation.defaultAdapter), adapter)) || this;
	        _this.isFocused = false;
	        _this.receivedUserInput = false;
	        _this.valid = true;
	        _this.useNativeValidation = true;
	        _this.validateOnValueChange = true;
	        _this.helperText = foundationMap.helperText;
	        _this.characterCounter = foundationMap.characterCounter;
	        _this.leadingIcon = foundationMap.leadingIcon;
	        _this.trailingIcon = foundationMap.trailingIcon;
	        _this.inputFocusHandler = function () {
	            _this.activateFocus();
	        };
	        _this.inputBlurHandler = function () {
	            _this.deactivateFocus();
	        };
	        _this.inputInputHandler = function () {
	            _this.handleInput();
	        };
	        _this.setPointerXOffset = function (evt) {
	            _this.setTransformOrigin(evt);
	        };
	        _this.textFieldInteractionHandler = function () {
	            _this.handleTextFieldInteraction();
	        };
	        _this.validationAttributeChangeHandler = function (attributesList) {
	            _this.handleValidationAttributeChange(attributesList);
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCTextFieldFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$3;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation, "strings", {
	        get: function () {
	            return strings$4;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation, "numbers", {
	        get: function () {
	            return numbers$2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldAlwaysFloat", {
	        get: function () {
	            var type = this.getNativeInput().type;
	            return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldFloat", {
	        get: function () {
	            return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() ||
	                this.isBadInput();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation.prototype, "shouldShake", {
	        get: function () {
	            return !this.isFocused && !this.isValid() && !!this.getValue();
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCTextFieldAdapter} for typing information on parameters and
	         * return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return true; },
	                setInputAttr: function () { return undefined; },
	                removeInputAttr: function () { return undefined; },
	                registerTextFieldInteractionHandler: function () { return undefined; },
	                deregisterTextFieldInteractionHandler: function () { return undefined; },
	                registerInputInteractionHandler: function () { return undefined; },
	                deregisterInputInteractionHandler: function () { return undefined; },
	                registerValidationAttributeChangeHandler: function () {
	                    return new MutationObserver(function () { return undefined; });
	                },
	                deregisterValidationAttributeChangeHandler: function () { return undefined; },
	                getNativeInput: function () { return null; },
	                isFocused: function () { return false; },
	                activateLineRipple: function () { return undefined; },
	                deactivateLineRipple: function () { return undefined; },
	                setLineRippleTransformOrigin: function () { return undefined; },
	                shakeLabel: function () { return undefined; },
	                floatLabel: function () { return undefined; },
	                setLabelRequired: function () { return undefined; },
	                hasLabel: function () { return false; },
	                getLabelWidth: function () { return 0; },
	                hasOutline: function () { return false; },
	                notchOutline: function () { return undefined; },
	                closeOutline: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTextFieldFoundation.prototype.init = function () {
	        var e_1, _a, e_2, _b;
	        if (this.adapter.hasLabel() && this.getNativeInput().required) {
	            this.adapter.setLabelRequired(true);
	        }
	        if (this.adapter.isFocused()) {
	            this.inputFocusHandler();
	        }
	        else if (this.adapter.hasLabel() && this.shouldFloat) {
	            this.notchOutline(true);
	            this.adapter.floatLabel(true);
	            this.styleFloating(true);
	        }
	        this.adapter.registerInputInteractionHandler('focus', this.inputFocusHandler);
	        this.adapter.registerInputInteractionHandler('blur', this.inputBlurHandler);
	        this.adapter.registerInputInteractionHandler('input', this.inputInputHandler);
	        try {
	            for (var POINTERDOWN_EVENTS_1 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next(); !POINTERDOWN_EVENTS_1_1.done; POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next()) {
	                var evtType = POINTERDOWN_EVENTS_1_1.value;
	                this.adapter.registerInputInteractionHandler(evtType, this.setPointerXOffset);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (POINTERDOWN_EVENTS_1_1 && !POINTERDOWN_EVENTS_1_1.done && (_a = POINTERDOWN_EVENTS_1.return)) _a.call(POINTERDOWN_EVENTS_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        try {
	            for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS$1), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
	                var evtType = INTERACTION_EVENTS_1_1.value;
	                this.adapter.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_b = INTERACTION_EVENTS_1.return)) _b.call(INTERACTION_EVENTS_1);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	        this.validationObserver =
	            this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler);
	        this.setcharacterCounter(this.getValue().length);
	    };
	    MDCTextFieldFoundation.prototype.destroy = function () {
	        var e_3, _a, e_4, _b;
	        this.adapter.deregisterInputInteractionHandler('focus', this.inputFocusHandler);
	        this.adapter.deregisterInputInteractionHandler('blur', this.inputBlurHandler);
	        this.adapter.deregisterInputInteractionHandler('input', this.inputInputHandler);
	        try {
	            for (var POINTERDOWN_EVENTS_2 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next(); !POINTERDOWN_EVENTS_2_1.done; POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next()) {
	                var evtType = POINTERDOWN_EVENTS_2_1.value;
	                this.adapter.deregisterInputInteractionHandler(evtType, this.setPointerXOffset);
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (POINTERDOWN_EVENTS_2_1 && !POINTERDOWN_EVENTS_2_1.done && (_a = POINTERDOWN_EVENTS_2.return)) _a.call(POINTERDOWN_EVENTS_2);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	        try {
	            for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS$1), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
	                var evtType = INTERACTION_EVENTS_2_1.value;
	                this.adapter.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
	            }
	        }
	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
	        finally {
	            try {
	                if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_b = INTERACTION_EVENTS_2.return)) _b.call(INTERACTION_EVENTS_2);
	            }
	            finally { if (e_4) throw e_4.error; }
	        }
	        this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);
	    };
	    /**
	     * Handles user interactions with the Text Field.
	     */
	    MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function () {
	        var nativeInput = this.adapter.getNativeInput();
	        if (nativeInput && nativeInput.disabled) {
	            return;
	        }
	        this.receivedUserInput = true;
	    };
	    /**
	     * Handles validation attribute changes
	     */
	    MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function (attributesList) {
	        var _this = this;
	        attributesList.some(function (attributeName) {
	            if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {
	                _this.styleValidity(true);
	                _this.adapter.setLabelRequired(_this.getNativeInput().required);
	                return true;
	            }
	            return false;
	        });
	        if (attributesList.indexOf('maxlength') > -1) {
	            this.setcharacterCounter(this.getValue().length);
	        }
	    };
	    /**
	     * Opens/closes the notched outline.
	     */
	    MDCTextFieldFoundation.prototype.notchOutline = function (openNotch) {
	        if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) {
	            return;
	        }
	        if (openNotch) {
	            var labelWidth = this.adapter.getLabelWidth() * numbers$2.LABEL_SCALE;
	            this.adapter.notchOutline(labelWidth);
	        }
	        else {
	            this.adapter.closeOutline();
	        }
	    };
	    /**
	     * Activates the text field focus state.
	     */
	    MDCTextFieldFoundation.prototype.activateFocus = function () {
	        this.isFocused = true;
	        this.styleFocused(this.isFocused);
	        this.adapter.activateLineRipple();
	        if (this.adapter.hasLabel()) {
	            this.notchOutline(this.shouldFloat);
	            this.adapter.floatLabel(this.shouldFloat);
	            this.styleFloating(this.shouldFloat);
	            this.adapter.shakeLabel(this.shouldShake);
	        }
	        if (this.helperText &&
	            (this.helperText.isPersistent() || !this.helperText.isValidation() ||
	                !this.valid)) {
	            this.helperText.showToScreenReader();
	        }
	    };
	    /**
	     * Sets the line ripple's transform origin, so that the line ripple activate
	     * animation will animate out from the user's click location.
	     */
	    MDCTextFieldFoundation.prototype.setTransformOrigin = function (evt) {
	        if (this.isDisabled() || this.adapter.hasOutline()) {
	            return;
	        }
	        var touches = evt.touches;
	        var targetEvent = touches ? touches[0] : evt;
	        var targetClientRect = targetEvent.target.getBoundingClientRect();
	        var normalizedX = targetEvent.clientX - targetClientRect.left;
	        this.adapter.setLineRippleTransformOrigin(normalizedX);
	    };
	    /**
	     * Handles input change of text input and text area.
	     */
	    MDCTextFieldFoundation.prototype.handleInput = function () {
	        this.autoCompleteFocus();
	        this.setcharacterCounter(this.getValue().length);
	    };
	    /**
	     * Activates the Text Field's focus state in cases when the input value
	     * changes without user input (e.g. programmatically).
	     */
	    MDCTextFieldFoundation.prototype.autoCompleteFocus = function () {
	        if (!this.receivedUserInput) {
	            this.activateFocus();
	        }
	    };
	    /**
	     * Deactivates the Text Field's focus state.
	     */
	    MDCTextFieldFoundation.prototype.deactivateFocus = function () {
	        this.isFocused = false;
	        this.adapter.deactivateLineRipple();
	        var isValid = this.isValid();
	        this.styleValidity(isValid);
	        this.styleFocused(this.isFocused);
	        if (this.adapter.hasLabel()) {
	            this.notchOutline(this.shouldFloat);
	            this.adapter.floatLabel(this.shouldFloat);
	            this.styleFloating(this.shouldFloat);
	            this.adapter.shakeLabel(this.shouldShake);
	        }
	        if (!this.shouldFloat) {
	            this.receivedUserInput = false;
	        }
	    };
	    MDCTextFieldFoundation.prototype.getValue = function () {
	        return this.getNativeInput().value;
	    };
	    /**
	     * @param value The value to set on the input Element.
	     */
	    MDCTextFieldFoundation.prototype.setValue = function (value) {
	        // Prevent Safari from moving the caret to the end of the input when the
	        // value has not changed.
	        if (this.getValue() !== value) {
	            this.getNativeInput().value = value;
	        }
	        this.setcharacterCounter(value.length);
	        if (this.validateOnValueChange) {
	            var isValid = this.isValid();
	            this.styleValidity(isValid);
	        }
	        if (this.adapter.hasLabel()) {
	            this.notchOutline(this.shouldFloat);
	            this.adapter.floatLabel(this.shouldFloat);
	            this.styleFloating(this.shouldFloat);
	            if (this.validateOnValueChange) {
	                this.adapter.shakeLabel(this.shouldShake);
	            }
	        }
	    };
	    /**
	     * @return The custom validity state, if set; otherwise, the result of a
	     *     native validity check.
	     */
	    MDCTextFieldFoundation.prototype.isValid = function () {
	        return this.useNativeValidation ? this.isNativeInputValid() : this.valid;
	    };
	    /**
	     * @param isValid Sets the custom validity state of the Text Field.
	     */
	    MDCTextFieldFoundation.prototype.setValid = function (isValid) {
	        this.valid = isValid;
	        this.styleValidity(isValid);
	        var shouldShake = !isValid && !this.isFocused && !!this.getValue();
	        if (this.adapter.hasLabel()) {
	            this.adapter.shakeLabel(shouldShake);
	        }
	    };
	    /**
	     * @param shouldValidate Whether or not validity should be updated on
	     *     value change.
	     */
	    MDCTextFieldFoundation.prototype.setValidateOnValueChange = function (shouldValidate) {
	        this.validateOnValueChange = shouldValidate;
	    };
	    /**
	     * @return Whether or not validity should be updated on value change. `true`
	     *     by default.
	     */
	    MDCTextFieldFoundation.prototype.getValidateOnValueChange = function () {
	        return this.validateOnValueChange;
	    };
	    /**
	     * Enables or disables the use of native validation. Use this for custom
	     * validation.
	     * @param useNativeValidation Set this to false to ignore native input
	     *     validation.
	     */
	    MDCTextFieldFoundation.prototype.setUseNativeValidation = function (useNativeValidation) {
	        this.useNativeValidation = useNativeValidation;
	    };
	    MDCTextFieldFoundation.prototype.isDisabled = function () {
	        return this.getNativeInput().disabled;
	    };
	    /**
	     * @param disabled Sets the text-field disabled or enabled.
	     */
	    MDCTextFieldFoundation.prototype.setDisabled = function (disabled) {
	        this.getNativeInput().disabled = disabled;
	        this.styleDisabled(disabled);
	    };
	    /**
	     * @param content Sets the content of the helper text.
	     */
	    MDCTextFieldFoundation.prototype.setHelperTextContent = function (content) {
	        if (this.helperText) {
	            this.helperText.setContent(content);
	        }
	    };
	    /**
	     * Sets the aria label of the leading icon.
	     */
	    MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function (label) {
	        if (this.leadingIcon) {
	            this.leadingIcon.setAriaLabel(label);
	        }
	    };
	    /**
	     * Sets the text content of the leading icon.
	     */
	    MDCTextFieldFoundation.prototype.setLeadingIconContent = function (content) {
	        if (this.leadingIcon) {
	            this.leadingIcon.setContent(content);
	        }
	    };
	    /**
	     * Sets the aria label of the trailing icon.
	     */
	    MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function (label) {
	        if (this.trailingIcon) {
	            this.trailingIcon.setAriaLabel(label);
	        }
	    };
	    /**
	     * Sets the text content of the trailing icon.
	     */
	    MDCTextFieldFoundation.prototype.setTrailingIconContent = function (content) {
	        if (this.trailingIcon) {
	            this.trailingIcon.setContent(content);
	        }
	    };
	    /**
	     * Sets character counter values that shows characters used and the total
	     * character limit.
	     */
	    MDCTextFieldFoundation.prototype.setcharacterCounter = function (currentLength) {
	        if (!this.characterCounter) {
	            return;
	        }
	        var maxLength = this.getNativeInput().maxLength;
	        if (maxLength === -1) {
	            throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');
	        }
	        this.characterCounter.setCounterValue(currentLength, maxLength);
	    };
	    /**
	     * @return True if the Text Field input fails in converting the user-supplied
	     *     value.
	     */
	    MDCTextFieldFoundation.prototype.isBadInput = function () {
	        // The badInput property is not supported in IE 11 💩.
	        return this.getNativeInput().validity.badInput || false;
	    };
	    /**
	     * @return The result of native validity checking (ValidityState.valid).
	     */
	    MDCTextFieldFoundation.prototype.isNativeInputValid = function () {
	        return this.getNativeInput().validity.valid;
	    };
	    /**
	     * Styles the component based on the validity state.
	     */
	    MDCTextFieldFoundation.prototype.styleValidity = function (isValid) {
	        var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;
	        if (isValid) {
	            this.adapter.removeClass(INVALID);
	        }
	        else {
	            this.adapter.addClass(INVALID);
	        }
	        if (this.helperText) {
	            this.helperText.setValidity(isValid);
	            // We dynamically set or unset aria-describedby for validation helper text
	            // only, based on whether the field is valid
	            var helperTextValidation = this.helperText.isValidation();
	            if (!helperTextValidation) {
	                return;
	            }
	            var helperTextVisible = this.helperText.isVisible();
	            var helperTextId = this.helperText.getId();
	            if (helperTextVisible && helperTextId) {
	                this.adapter.setInputAttr(strings$4.ARIA_DESCRIBEDBY, helperTextId);
	            }
	            else {
	                this.adapter.removeInputAttr(strings$4.ARIA_DESCRIBEDBY);
	            }
	        }
	    };
	    /**
	     * Styles the component based on the focused state.
	     */
	    MDCTextFieldFoundation.prototype.styleFocused = function (isFocused) {
	        var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;
	        if (isFocused) {
	            this.adapter.addClass(FOCUSED);
	        }
	        else {
	            this.adapter.removeClass(FOCUSED);
	        }
	    };
	    /**
	     * Styles the component based on the disabled state.
	     */
	    MDCTextFieldFoundation.prototype.styleDisabled = function (isDisabled) {
	        var _a = MDCTextFieldFoundation.cssClasses, DISABLED = _a.DISABLED, INVALID = _a.INVALID;
	        if (isDisabled) {
	            this.adapter.addClass(DISABLED);
	            this.adapter.removeClass(INVALID);
	        }
	        else {
	            this.adapter.removeClass(DISABLED);
	        }
	        if (this.leadingIcon) {
	            this.leadingIcon.setDisabled(isDisabled);
	        }
	        if (this.trailingIcon) {
	            this.trailingIcon.setDisabled(isDisabled);
	        }
	    };
	    /**
	     * Styles the component based on the label floating state.
	     */
	    MDCTextFieldFoundation.prototype.styleFloating = function (isFloating) {
	        var LABEL_FLOATING = MDCTextFieldFoundation.cssClasses.LABEL_FLOATING;
	        if (isFloating) {
	            this.adapter.addClass(LABEL_FLOATING);
	        }
	        else {
	            this.adapter.removeClass(LABEL_FLOATING);
	        }
	    };
	    /**
	     * @return The native text input element from the host environment, or an
	     *     object with the same shape for unit tests.
	     */
	    MDCTextFieldFoundation.prototype.getNativeInput = function () {
	        // this.adapter may be undefined in foundation unit tests. This happens when
	        // testdouble is creating a mock object and invokes the
	        // shouldShake/shouldFloat getters (which in turn call getValue(), which
	        // calls this method) before init() has been called from the MDCTextField
	        // constructor. To work around that issue, we return a dummy object.
	        var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;
	        return nativeInput || {
	            disabled: false,
	            maxLength: -1,
	            required: false,
	            type: 'input',
	            validity: {
	                badInput: false,
	                valid: true,
	            },
	            value: '',
	        };
	    };
	    return MDCTextFieldFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses$2 = {
	    HELPER_TEXT_PERSISTENT: 'mdc-text-field-helper-text--persistent',
	    HELPER_TEXT_VALIDATION_MSG: 'mdc-text-field-helper-text--validation-msg',
	    ROOT: 'mdc-text-field-helper-text',
	};
	var strings$3 = {
	    ARIA_HIDDEN: 'aria-hidden',
	    ROLE: 'role',
	    ROOT_SELECTOR: "." + cssClasses$2.ROOT,
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTextFieldHelperTextFoundation = /** @class */ (function (_super) {
	    __extends(MDCTextFieldHelperTextFoundation, _super);
	    function MDCTextFieldHelperTextFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCTextFieldHelperTextFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCTextFieldHelperTextFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldHelperTextFoundation, "strings", {
	        get: function () {
	            return strings$3;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldHelperTextFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCTextFieldHelperTextAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                getAttr: function () { return null; },
	                setAttr: function () { return undefined; },
	                removeAttr: function () { return undefined; },
	                setContent: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTextFieldHelperTextFoundation.prototype.getId = function () {
	        return this.adapter.getAttr('id');
	    };
	    MDCTextFieldHelperTextFoundation.prototype.isVisible = function () {
	        return this.adapter.getAttr(strings$3.ARIA_HIDDEN) !== 'true';
	    };
	    /**
	     * Sets the content of the helper text field.
	     */
	    MDCTextFieldHelperTextFoundation.prototype.setContent = function (content) {
	        this.adapter.setContent(content);
	    };
	    MDCTextFieldHelperTextFoundation.prototype.isPersistent = function () {
	        return this.adapter.hasClass(cssClasses$2.HELPER_TEXT_PERSISTENT);
	    };
	    /**
	     * @param isPersistent Sets the persistency of the helper text.
	     */
	    MDCTextFieldHelperTextFoundation.prototype.setPersistent = function (isPersistent) {
	        if (isPersistent) {
	            this.adapter.addClass(cssClasses$2.HELPER_TEXT_PERSISTENT);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$2.HELPER_TEXT_PERSISTENT);
	        }
	    };
	    /**
	     * @return whether the helper text acts as an error validation message.
	     */
	    MDCTextFieldHelperTextFoundation.prototype.isValidation = function () {
	        return this.adapter.hasClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG);
	    };
	    /**
	     * @param isValidation True to make the helper text act as an error validation message.
	     */
	    MDCTextFieldHelperTextFoundation.prototype.setValidation = function (isValidation) {
	        if (isValidation) {
	            this.adapter.addClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG);
	        }
	        else {
	            this.adapter.removeClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG);
	        }
	    };
	    /**
	     * Makes the helper text visible to the screen reader.
	     */
	    MDCTextFieldHelperTextFoundation.prototype.showToScreenReader = function () {
	        this.adapter.removeAttr(strings$3.ARIA_HIDDEN);
	    };
	    /**
	     * Sets the validity of the helper text based on the input validity.
	     */
	    MDCTextFieldHelperTextFoundation.prototype.setValidity = function (inputIsValid) {
	        var helperTextIsPersistent = this.adapter.hasClass(cssClasses$2.HELPER_TEXT_PERSISTENT);
	        var helperTextIsValidationMsg = this.adapter.hasClass(cssClasses$2.HELPER_TEXT_VALIDATION_MSG);
	        var validationMsgNeedsDisplay = helperTextIsValidationMsg && !inputIsValid;
	        if (validationMsgNeedsDisplay) {
	            this.showToScreenReader();
	            // If role is already alert, refresh it to trigger another announcement
	            // from screenreader.
	            if (this.adapter.getAttr(strings$3.ROLE) === 'alert') {
	                this.refreshAlertRole();
	            }
	            else {
	                this.adapter.setAttr(strings$3.ROLE, 'alert');
	            }
	        }
	        else {
	            this.adapter.removeAttr(strings$3.ROLE);
	        }
	        if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {
	            this.hide();
	        }
	    };
	    /**
	     * Hides the help text from screen readers.
	     */
	    MDCTextFieldHelperTextFoundation.prototype.hide = function () {
	        this.adapter.setAttr(strings$3.ARIA_HIDDEN, 'true');
	    };
	    MDCTextFieldHelperTextFoundation.prototype.refreshAlertRole = function () {
	        var _this = this;
	        this.adapter.removeAttr(strings$3.ROLE);
	        requestAnimationFrame(function () {
	            _this.adapter.setAttr(strings$3.ROLE, 'alert');
	        });
	    };
	    return MDCTextFieldHelperTextFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTextFieldHelperText = /** @class */ (function (_super) {
	    __extends(MDCTextFieldHelperText, _super);
	    function MDCTextFieldHelperText() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTextFieldHelperText.attachTo = function (root) {
	        return new MDCTextFieldHelperText(root);
	    };
	    Object.defineProperty(MDCTextFieldHelperText.prototype, "foundationForTextField", {
	        // Provided for access by MDCTextField component
	        get: function () {
	            return this.foundation;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTextFieldHelperText.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            getAttr: function (attr) { return _this.root.getAttribute(attr); },
	            setAttr: function (attr, value) { return _this.root.setAttribute(attr, value); },
	            removeAttr: function (attr) { return _this.root.removeAttribute(attr); },
	            setContent: function (content) {
	                _this.root.textContent = content;
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCTextFieldHelperTextFoundation(adapter);
	    };
	    return MDCTextFieldHelperText;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var strings$2 = {
	    ICON_EVENT: 'MDCTextField:icon',
	    ICON_ROLE: 'button',
	};
	var cssClasses$1 = {
	    ROOT: 'mdc-text-field__icon',
	};

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var INTERACTION_EVENTS = ['click', 'keydown'];
	var MDCTextFieldIconFoundation = /** @class */ (function (_super) {
	    __extends(MDCTextFieldIconFoundation, _super);
	    function MDCTextFieldIconFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCTextFieldIconFoundation.defaultAdapter), adapter)) || this;
	        _this.savedTabIndex = null;
	        _this.interactionHandler = function (evt) {
	            _this.handleInteraction(evt);
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCTextFieldIconFoundation, "strings", {
	        get: function () {
	            return strings$2;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldIconFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses$1;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextFieldIconFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCTextFieldIconAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                getAttr: function () { return null; },
	                setAttr: function () { return undefined; },
	                removeAttr: function () { return undefined; },
	                setContent: function () { return undefined; },
	                registerInteractionHandler: function () { return undefined; },
	                deregisterInteractionHandler: function () { return undefined; },
	                notifyIconAction: function () { return undefined; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTextFieldIconFoundation.prototype.init = function () {
	        var e_1, _a;
	        this.savedTabIndex = this.adapter.getAttr('tabindex');
	        try {
	            for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
	                var evtType = INTERACTION_EVENTS_1_1.value;
	                this.adapter.registerInteractionHandler(evtType, this.interactionHandler);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_a = INTERACTION_EVENTS_1.return)) _a.call(INTERACTION_EVENTS_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    MDCTextFieldIconFoundation.prototype.destroy = function () {
	        var e_2, _a;
	        try {
	            for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
	                var evtType = INTERACTION_EVENTS_2_1.value;
	                this.adapter.deregisterInteractionHandler(evtType, this.interactionHandler);
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_a = INTERACTION_EVENTS_2.return)) _a.call(INTERACTION_EVENTS_2);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    };
	    MDCTextFieldIconFoundation.prototype.setDisabled = function (disabled) {
	        if (!this.savedTabIndex) {
	            return;
	        }
	        if (disabled) {
	            this.adapter.setAttr('tabindex', '-1');
	            this.adapter.removeAttr('role');
	        }
	        else {
	            this.adapter.setAttr('tabindex', this.savedTabIndex);
	            this.adapter.setAttr('role', strings$2.ICON_ROLE);
	        }
	    };
	    MDCTextFieldIconFoundation.prototype.setAriaLabel = function (label) {
	        this.adapter.setAttr('aria-label', label);
	    };
	    MDCTextFieldIconFoundation.prototype.setContent = function (content) {
	        this.adapter.setContent(content);
	    };
	    MDCTextFieldIconFoundation.prototype.handleInteraction = function (evt) {
	        var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;
	        if (evt.type === 'click' || isEnterKey) {
	            evt.preventDefault(); // stop click from causing host label to focus
	            // input
	            this.adapter.notifyIconAction();
	        }
	    };
	    return MDCTextFieldIconFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTextFieldIcon = /** @class */ (function (_super) {
	    __extends(MDCTextFieldIcon, _super);
	    function MDCTextFieldIcon() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTextFieldIcon.attachTo = function (root) {
	        return new MDCTextFieldIcon(root);
	    };
	    Object.defineProperty(MDCTextFieldIcon.prototype, "foundationForTextField", {
	        // Provided for access by MDCTextField component
	        get: function () {
	            return this.foundation;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTextFieldIcon.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            getAttr: function (attr) { return _this.root.getAttribute(attr); },
	            setAttr: function (attr, value) { return _this.root.setAttribute(attr, value); },
	            removeAttr: function (attr) { return _this.root.removeAttribute(attr); },
	            setContent: function (content) {
	                _this.root.textContent = content;
	            },
	            registerInteractionHandler: function (evtType, handler) { return _this.listen(evtType, handler); },
	            deregisterInteractionHandler: function (evtType, handler) { return _this.unlisten(evtType, handler); },
	            notifyIconAction: function () { return _this.emit(MDCTextFieldIconFoundation.strings.ICON_EVENT, {} /* evtData */, true /* shouldBubble */); },
	        };
	        // tslint:enable:object-literal-sort-keys
	        return new MDCTextFieldIconFoundation(adapter);
	    };
	    return MDCTextFieldIcon;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTextField = /** @class */ (function (_super) {
	    __extends(MDCTextField, _super);
	    function MDCTextField() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTextField.attachTo = function (root) {
	        return new MDCTextField(root);
	    };
	    MDCTextField.prototype.initialize = function (rippleFactory, lineRippleFactory, helperTextFactory, characterCounterFactory, iconFactory, labelFactory, outlineFactory) {
	        if (rippleFactory === void 0) { rippleFactory = function (el, foundation) { return new MDCRipple(el, foundation); }; }
	        if (lineRippleFactory === void 0) { lineRippleFactory = function (el) { return new MDCLineRipple(el); }; }
	        if (helperTextFactory === void 0) { helperTextFactory = function (el) {
	            return new MDCTextFieldHelperText(el);
	        }; }
	        if (characterCounterFactory === void 0) { characterCounterFactory = function (el) {
	            return new MDCTextFieldCharacterCounter(el);
	        }; }
	        if (iconFactory === void 0) { iconFactory = function (el) { return new MDCTextFieldIcon(el); }; }
	        if (labelFactory === void 0) { labelFactory = function (el) { return new MDCFloatingLabel(el); }; }
	        if (outlineFactory === void 0) { outlineFactory = function (el) { return new MDCNotchedOutline(el); }; }
	        this.input =
	            this.root.querySelector(strings$4.INPUT_SELECTOR);
	        var labelElement = this.root.querySelector(strings$4.LABEL_SELECTOR);
	        this.label = labelElement ? labelFactory(labelElement) : null;
	        var lineRippleElement = this.root.querySelector(strings$4.LINE_RIPPLE_SELECTOR);
	        this.lineRipple =
	            lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
	        var outlineElement = this.root.querySelector(strings$4.OUTLINE_SELECTOR);
	        this.outline = outlineElement ? outlineFactory(outlineElement) : null;
	        // Helper text
	        var helperTextStrings = MDCTextFieldHelperTextFoundation.strings;
	        var nextElementSibling = this.root.nextElementSibling;
	        var hasHelperLine = (nextElementSibling && nextElementSibling.classList.contains(cssClasses$3.HELPER_LINE));
	        var helperTextEl = hasHelperLine && nextElementSibling && nextElementSibling.querySelector(helperTextStrings.ROOT_SELECTOR);
	        this.helperText = helperTextEl ? helperTextFactory(helperTextEl) : null;
	        // Character counter
	        var characterCounterStrings = MDCTextFieldCharacterCounterFoundation.strings;
	        var characterCounterEl = this.root.querySelector(characterCounterStrings.ROOT_SELECTOR);
	        // If character counter is not found in root element search in sibling element.
	        if (!characterCounterEl && hasHelperLine && nextElementSibling) {
	            characterCounterEl = nextElementSibling.querySelector(characterCounterStrings.ROOT_SELECTOR);
	        }
	        this.characterCounter =
	            characterCounterEl ? characterCounterFactory(characterCounterEl) : null;
	        // Leading icon
	        var leadingIconEl = this.root.querySelector(strings$4.LEADING_ICON_SELECTOR);
	        this.leadingIcon = leadingIconEl ? iconFactory(leadingIconEl) : null;
	        // Trailing icon
	        var trailingIconEl = this.root.querySelector(strings$4.TRAILING_ICON_SELECTOR);
	        this.trailingIcon = trailingIconEl ? iconFactory(trailingIconEl) : null;
	        // Prefix and Suffix
	        this.prefix = this.root.querySelector(strings$4.PREFIX_SELECTOR);
	        this.suffix = this.root.querySelector(strings$4.SUFFIX_SELECTOR);
	        this.ripple = this.createRipple(rippleFactory);
	    };
	    MDCTextField.prototype.destroy = function () {
	        if (this.ripple) {
	            this.ripple.destroy();
	        }
	        if (this.lineRipple) {
	            this.lineRipple.destroy();
	        }
	        if (this.helperText) {
	            this.helperText.destroy();
	        }
	        if (this.characterCounter) {
	            this.characterCounter.destroy();
	        }
	        if (this.leadingIcon) {
	            this.leadingIcon.destroy();
	        }
	        if (this.trailingIcon) {
	            this.trailingIcon.destroy();
	        }
	        if (this.label) {
	            this.label.destroy();
	        }
	        if (this.outline) {
	            this.outline.destroy();
	        }
	        _super.prototype.destroy.call(this);
	    };
	    /**
	     * Initializes the Text Field's internal state based on the environment's
	     * state.
	     */
	    MDCTextField.prototype.initialSyncWithDOM = function () {
	        this.disabled = this.input.disabled;
	    };
	    Object.defineProperty(MDCTextField.prototype, "value", {
	        get: function () {
	            return this.foundation.getValue();
	        },
	        /**
	         * @param value The value to set on the input.
	         */
	        set: function (value) {
	            this.foundation.setValue(value);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "disabled", {
	        get: function () {
	            return this.foundation.isDisabled();
	        },
	        /**
	         * @param disabled Sets the Text Field disabled or enabled.
	         */
	        set: function (disabled) {
	            this.foundation.setDisabled(disabled);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "valid", {
	        get: function () {
	            return this.foundation.isValid();
	        },
	        /**
	         * @param valid Sets the Text Field valid or invalid.
	         */
	        set: function (valid) {
	            this.foundation.setValid(valid);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "required", {
	        get: function () {
	            return this.input.required;
	        },
	        /**
	         * @param required Sets the Text Field to required.
	         */
	        set: function (required) {
	            this.input.required = required;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "pattern", {
	        get: function () {
	            return this.input.pattern;
	        },
	        /**
	         * @param pattern Sets the input element's validation pattern.
	         */
	        set: function (pattern) {
	            this.input.pattern = pattern;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "minLength", {
	        get: function () {
	            return this.input.minLength;
	        },
	        /**
	         * @param minLength Sets the input element's minLength.
	         */
	        set: function (minLength) {
	            this.input.minLength = minLength;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "maxLength", {
	        get: function () {
	            return this.input.maxLength;
	        },
	        /**
	         * @param maxLength Sets the input element's maxLength.
	         */
	        set: function (maxLength) {
	            // Chrome throws exception if maxLength is set to a value less than zero
	            if (maxLength < 0) {
	                this.input.removeAttribute('maxLength');
	            }
	            else {
	                this.input.maxLength = maxLength;
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "min", {
	        get: function () {
	            return this.input.min;
	        },
	        /**
	         * @param min Sets the input element's min.
	         */
	        set: function (min) {
	            this.input.min = min;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "max", {
	        get: function () {
	            return this.input.max;
	        },
	        /**
	         * @param max Sets the input element's max.
	         */
	        set: function (max) {
	            this.input.max = max;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "step", {
	        get: function () {
	            return this.input.step;
	        },
	        /**
	         * @param step Sets the input element's step.
	         */
	        set: function (step) {
	            this.input.step = step;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "helperTextContent", {
	        /**
	         * Sets the helper text element content.
	         */
	        set: function (content) {
	            this.foundation.setHelperTextContent(content);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "leadingIconAriaLabel", {
	        /**
	         * Sets the aria label of the leading icon.
	         */
	        set: function (label) {
	            this.foundation.setLeadingIconAriaLabel(label);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "leadingIconContent", {
	        /**
	         * Sets the text content of the leading icon.
	         */
	        set: function (content) {
	            this.foundation.setLeadingIconContent(content);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "trailingIconAriaLabel", {
	        /**
	         * Sets the aria label of the trailing icon.
	         */
	        set: function (label) {
	            this.foundation.setTrailingIconAriaLabel(label);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "trailingIconContent", {
	        /**
	         * Sets the text content of the trailing icon.
	         */
	        set: function (content) {
	            this.foundation.setTrailingIconContent(content);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "useNativeValidation", {
	        /**
	         * Enables or disables the use of native validation. Use this for custom validation.
	         * @param useNativeValidation Set this to false to ignore native input validation.
	         */
	        set: function (useNativeValidation) {
	            this.foundation.setUseNativeValidation(useNativeValidation);
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "prefixText", {
	        /**
	         * Gets the text content of the prefix, or null if it does not exist.
	         */
	        get: function () {
	            return this.prefix ? this.prefix.textContent : null;
	        },
	        /**
	         * Sets the text content of the prefix, if it exists.
	         */
	        set: function (prefixText) {
	            if (this.prefix) {
	                this.prefix.textContent = prefixText;
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTextField.prototype, "suffixText", {
	        /**
	         * Gets the text content of the suffix, or null if it does not exist.
	         */
	        get: function () {
	            return this.suffix ? this.suffix.textContent : null;
	        },
	        /**
	         * Sets the text content of the suffix, if it exists.
	         */
	        set: function (suffixText) {
	            if (this.suffix) {
	                this.suffix.textContent = suffixText;
	            }
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /**
	     * Focuses the input element.
	     */
	    MDCTextField.prototype.focus = function () {
	        this.input.focus();
	    };
	    /**
	     * Recomputes the outline SVG path for the outline element.
	     */
	    MDCTextField.prototype.layout = function () {
	        var openNotch = this.foundation.shouldFloat;
	        this.foundation.notchOutline(openNotch);
	    };
	    MDCTextField.prototype.getDefaultFoundation = function () {
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = __assign(__assign(__assign(__assign(__assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());
	        // tslint:enable:object-literal-sort-keys
	        return new MDCTextFieldFoundation(adapter, this.getFoundationMap());
	    };
	    MDCTextField.prototype.getRootAdapterMethods = function () {
	        var _this = this;
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        return {
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            registerTextFieldInteractionHandler: function (evtType, handler) {
	                _this.listen(evtType, handler);
	            },
	            deregisterTextFieldInteractionHandler: function (evtType, handler) {
	                _this.unlisten(evtType, handler);
	            },
	            registerValidationAttributeChangeHandler: function (handler) {
	                var getAttributesList = function (mutationsList) {
	                    return mutationsList
	                        .map(function (mutation) { return mutation.attributeName; })
	                        .filter(function (attributeName) { return attributeName; });
	                };
	                var observer = new MutationObserver(function (mutationsList) { return handler(getAttributesList(mutationsList)); });
	                var config = { attributes: true };
	                observer.observe(_this.input, config);
	                return observer;
	            },
	            deregisterValidationAttributeChangeHandler: function (observer) {
	                observer.disconnect();
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	    };
	    MDCTextField.prototype.getInputAdapterMethods = function () {
	        var _this = this;
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        return {
	            getNativeInput: function () { return _this.input; },
	            setInputAttr: function (attr, value) {
	                _this.input.setAttribute(attr, value);
	            },
	            removeInputAttr: function (attr) {
	                _this.input.removeAttribute(attr);
	            },
	            isFocused: function () { return document.activeElement === _this.input; },
	            registerInputInteractionHandler: function (evtType, handler) {
	                _this.input.addEventListener(evtType, handler, applyPassive());
	            },
	            deregisterInputInteractionHandler: function (evtType, handler) {
	                _this.input.removeEventListener(evtType, handler, applyPassive());
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	    };
	    MDCTextField.prototype.getLabelAdapterMethods = function () {
	        var _this = this;
	        return {
	            floatLabel: function (shouldFloat) {
	                _this.label && _this.label.float(shouldFloat);
	            },
	            getLabelWidth: function () { return _this.label ? _this.label.getWidth() : 0; },
	            hasLabel: function () { return Boolean(_this.label); },
	            shakeLabel: function (shouldShake) {
	                _this.label && _this.label.shake(shouldShake);
	            },
	            setLabelRequired: function (isRequired) {
	                _this.label && _this.label.setRequired(isRequired);
	            },
	        };
	    };
	    MDCTextField.prototype.getLineRippleAdapterMethods = function () {
	        var _this = this;
	        return {
	            activateLineRipple: function () {
	                if (_this.lineRipple) {
	                    _this.lineRipple.activate();
	                }
	            },
	            deactivateLineRipple: function () {
	                if (_this.lineRipple) {
	                    _this.lineRipple.deactivate();
	                }
	            },
	            setLineRippleTransformOrigin: function (normalizedX) {
	                if (_this.lineRipple) {
	                    _this.lineRipple.setRippleCenter(normalizedX);
	                }
	            },
	        };
	    };
	    MDCTextField.prototype.getOutlineAdapterMethods = function () {
	        var _this = this;
	        return {
	            closeOutline: function () {
	                _this.outline && _this.outline.closeNotch();
	            },
	            hasOutline: function () { return Boolean(_this.outline); },
	            notchOutline: function (labelWidth) {
	                _this.outline && _this.outline.notch(labelWidth);
	            },
	        };
	    };
	    /**
	     * @return A map of all subcomponents to subfoundations.
	     */
	    MDCTextField.prototype.getFoundationMap = function () {
	        return {
	            characterCounter: this.characterCounter ?
	                this.characterCounter.foundationForTextField :
	                undefined,
	            helperText: this.helperText ? this.helperText.foundationForTextField :
	                undefined,
	            leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForTextField :
	                undefined,
	            trailingIcon: this.trailingIcon ?
	                this.trailingIcon.foundationForTextField :
	                undefined,
	        };
	    };
	    MDCTextField.prototype.createRipple = function (rippleFactory) {
	        var _this = this;
	        var isTextArea = this.root.classList.contains(cssClasses$3.TEXTAREA);
	        var isOutlined = this.root.classList.contains(cssClasses$3.OUTLINED);
	        if (isTextArea || isOutlined) {
	            return null;
	        }
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { isSurfaceActive: function () { return matches$2(_this.input, ':active'); }, registerInteractionHandler: function (evtType, handler) {
	                _this.input.addEventListener(evtType, handler, applyPassive());
	            }, deregisterInteractionHandler: function (evtType, handler) {
	                _this.input.removeEventListener(evtType, handler, applyPassive());
	            } });
	        // tslint:enable:object-literal-sort-keys
	        return rippleFactory(this.root, new MDCRippleFoundation(adapter));
	    };
	    return MDCTextField;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2017 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$2 = {
		__proto__: null,
		MDCTextField: MDCTextField,
		cssClasses: cssClasses$3,
		strings: strings$4,
		numbers: numbers$2,
		VALIDATION_ATTR_WHITELIST: VALIDATION_ATTR_WHITELIST,
		ALWAYS_FLOAT_TYPES: ALWAYS_FLOAT_TYPES,
		MDCTextFieldFoundation: MDCTextFieldFoundation,
		characterCountCssClasses: cssClasses$4,
		characterCountStrings: strings$5,
		MDCTextFieldCharacterCounter: MDCTextFieldCharacterCounter,
		MDCTextFieldCharacterCounterFoundation: MDCTextFieldCharacterCounterFoundation,
		helperTextCssClasses: cssClasses$2,
		helperTextStrings: strings$3,
		MDCTextFieldHelperText: MDCTextFieldHelperText,
		MDCTextFieldHelperTextFoundation: MDCTextFieldHelperTextFoundation,
		iconCssClasses: cssClasses$1,
		iconStrings: strings$2,
		MDCTextFieldIcon: MDCTextFieldIcon,
		MDCTextFieldIconFoundation: MDCTextFieldIconFoundation
	};

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var CssClasses;
	(function (CssClasses) {
	    CssClasses["RICH"] = "mdc-tooltip--rich";
	    CssClasses["SHOWN"] = "mdc-tooltip--shown";
	    CssClasses["SHOWING"] = "mdc-tooltip--showing";
	    CssClasses["SHOWING_TRANSITION"] = "mdc-tooltip--showing-transition";
	    CssClasses["HIDE"] = "mdc-tooltip--hide";
	    CssClasses["HIDE_TRANSITION"] = "mdc-tooltip--hide-transition";
	    CssClasses["MULTILINE_TOOLTIP"] = "mdc-tooltip--multiline";
	    CssClasses["SURFACE"] = "mdc-tooltip__surface";
	    CssClasses["SURFACE_ANIMATION"] = "mdc-tooltip__surface-animation";
	    CssClasses["TOOLTIP_CARET_TOP"] = "mdc-tooltip__caret-surface-top";
	    CssClasses["TOOLTIP_CARET_BOTTOM"] = "mdc-tooltip__caret-surface-bottom";
	})(CssClasses || (CssClasses = {}));
	var numbers$1 = {
	    BOUNDED_ANCHOR_GAP: 4,
	    UNBOUNDED_ANCHOR_GAP: 8,
	    MIN_VIEWPORT_TOOLTIP_THRESHOLD: 8,
	    HIDE_DELAY_MS: 600,
	    SHOW_DELAY_MS: 500,
	    // LINT.IfChange(tooltip-dimensions)
	    MIN_HEIGHT: 24,
	    MAX_WIDTH: 200,
	    // LINT.ThenChange(_tooltip.scss:tooltip-dimensions)
	    CARET_INDENTATION: 24,
	    // LINT.IfChange(tooltip-anim-scale)
	    ANIMATION_SCALE: 0.8,
	    // LINT.ThenChange(_tooltip.scss:tooltip-anim-scale)
	};
	var attributes = {
	    ARIA_EXPANDED: 'aria-expanded',
	    ARIA_HASPOPUP: 'aria-haspopup',
	    PERSISTENT: 'data-mdc-tooltip-persistent',
	    SCROLLABLE_ANCESTOR: 'tooltip-scrollable-ancestor',
	    HAS_CARET: 'data-mdc-tooltip-has-caret',
	};
	var events = {
	    HIDDEN: 'MDCTooltip:hidden',
	};
	/** Enum for possible tooltip positioning relative to its anchor element. */
	var XPosition;
	(function (XPosition) {
	    XPosition[XPosition["DETECTED"] = 0] = "DETECTED";
	    XPosition[XPosition["START"] = 1] = "START";
	    // Note: CENTER is not valid for rich tooltips.
	    XPosition[XPosition["CENTER"] = 2] = "CENTER";
	    XPosition[XPosition["END"] = 3] = "END";
	})(XPosition || (XPosition = {}));
	var YPosition;
	(function (YPosition) {
	    YPosition[YPosition["DETECTED"] = 0] = "DETECTED";
	    YPosition[YPosition["ABOVE"] = 1] = "ABOVE";
	    YPosition[YPosition["BELOW"] = 2] = "BELOW";
	})(YPosition || (YPosition = {}));
	/**
	 * Enum for possible anchor boundary types. This determines the gap between the
	 * bottom of the anchor and the tooltip element.
	 * Bounded anchors have an identifiable boundary (e.g. buttons).
	 * Unbounded anchors don't have a visually declared boundary (e.g. plain text).
	 */
	var AnchorBoundaryType;
	(function (AnchorBoundaryType) {
	    AnchorBoundaryType[AnchorBoundaryType["BOUNDED"] = 0] = "BOUNDED";
	    AnchorBoundaryType[AnchorBoundaryType["UNBOUNDED"] = 1] = "UNBOUNDED";
	})(AnchorBoundaryType || (AnchorBoundaryType = {}));
	var strings$1 = {
	    LEFT: 'left',
	    RIGHT: 'right',
	    CENTER: 'center',
	    TOP: 'top',
	    BOTTOM: 'bottom'
	};
	/**
	 * Enum for possible positions of a tooltip with caret (this specifies the
	 * positioning of the tooltip relative to the anchor -- the position of the
	 * caret will follow that of the tooltip). This can NOT be combined with the
	 * above X/YPosition options. Naming for the enums follows: (vertical
	 * placement)_(horizontal placement).
	 */
	var PositionWithCaret;
	(function (PositionWithCaret) {
	    PositionWithCaret[PositionWithCaret["DETECTED"] = 0] = "DETECTED";
	    PositionWithCaret[PositionWithCaret["ABOVE_START"] = 1] = "ABOVE_START";
	    PositionWithCaret[PositionWithCaret["ABOVE_CENTER"] = 2] = "ABOVE_CENTER";
	    PositionWithCaret[PositionWithCaret["ABOVE_END"] = 3] = "ABOVE_END";
	    PositionWithCaret[PositionWithCaret["TOP_SIDE_START"] = 4] = "TOP_SIDE_START";
	    PositionWithCaret[PositionWithCaret["CENTER_SIDE_START"] = 5] = "CENTER_SIDE_START";
	    PositionWithCaret[PositionWithCaret["BOTTOM_SIDE_START"] = 6] = "BOTTOM_SIDE_START";
	    PositionWithCaret[PositionWithCaret["TOP_SIDE_END"] = 7] = "TOP_SIDE_END";
	    PositionWithCaret[PositionWithCaret["CENTER_SIDE_END"] = 8] = "CENTER_SIDE_END";
	    PositionWithCaret[PositionWithCaret["BOTTOM_SIDE_END"] = 9] = "BOTTOM_SIDE_END";
	    PositionWithCaret[PositionWithCaret["BELOW_START"] = 10] = "BELOW_START";
	    PositionWithCaret[PositionWithCaret["BELOW_CENTER"] = 11] = "BELOW_CENTER";
	    PositionWithCaret[PositionWithCaret["BELOW_END"] = 12] = "BELOW_END";
	})(PositionWithCaret || (PositionWithCaret = {}));
	var YPositionWithCaret;
	(function (YPositionWithCaret) {
	    YPositionWithCaret[YPositionWithCaret["ABOVE"] = 1] = "ABOVE";
	    YPositionWithCaret[YPositionWithCaret["BELOW"] = 2] = "BELOW";
	    YPositionWithCaret[YPositionWithCaret["SIDE_TOP"] = 3] = "SIDE_TOP";
	    YPositionWithCaret[YPositionWithCaret["SIDE_CENTER"] = 4] = "SIDE_CENTER";
	    YPositionWithCaret[YPositionWithCaret["SIDE_BOTTOM"] = 5] = "SIDE_BOTTOM";
	})(YPositionWithCaret || (YPositionWithCaret = {}));
	var XPositionWithCaret;
	(function (XPositionWithCaret) {
	    XPositionWithCaret[XPositionWithCaret["START"] = 1] = "START";
	    XPositionWithCaret[XPositionWithCaret["CENTER"] = 2] = "CENTER";
	    XPositionWithCaret[XPositionWithCaret["END"] = 3] = "END";
	    XPositionWithCaret[XPositionWithCaret["SIDE_START"] = 4] = "SIDE_START";
	    XPositionWithCaret[XPositionWithCaret["SIDE_END"] = 5] = "SIDE_END";
	})(XPositionWithCaret || (XPositionWithCaret = {}));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var RICH = CssClasses.RICH, SHOWN = CssClasses.SHOWN, SHOWING = CssClasses.SHOWING, SHOWING_TRANSITION = CssClasses.SHOWING_TRANSITION, HIDE = CssClasses.HIDE, HIDE_TRANSITION = CssClasses.HIDE_TRANSITION, MULTILINE_TOOLTIP = CssClasses.MULTILINE_TOOLTIP;
	var AnimationKeys;
	(function (AnimationKeys) {
	    AnimationKeys["POLL_ANCHOR"] = "poll_anchor";
	})(AnimationKeys || (AnimationKeys = {}));
	// Accessing `window` without a `typeof` check will throw on Node environments.
	var HAS_WINDOW = typeof window !== 'undefined';
	var MDCTooltipFoundation = /** @class */ (function (_super) {
	    __extends(MDCTooltipFoundation, _super);
	    function MDCTooltipFoundation(adapter) {
	        var _this = _super.call(this, __assign(__assign({}, MDCTooltipFoundation.defaultAdapter), adapter)) || this;
	        _this.tooltipShown = false;
	        _this.anchorGap = numbers$1.BOUNDED_ANCHOR_GAP;
	        _this.xTooltipPos = XPosition.DETECTED;
	        _this.yTooltipPos = YPosition.DETECTED;
	        _this.tooltipPositionWithCaret = PositionWithCaret.DETECTED;
	        // Minimum threshold distance needed between the tooltip and the viewport.
	        _this.minViewportTooltipThreshold = numbers$1.MIN_VIEWPORT_TOOLTIP_THRESHOLD;
	        _this.hideDelayMs = numbers$1.HIDE_DELAY_MS;
	        _this.showDelayMs = numbers$1.SHOW_DELAY_MS;
	        _this.anchorRect = null;
	        _this.parentRect = null;
	        _this.frameId = null;
	        _this.hideTimeout = null;
	        _this.showTimeout = null;
	        _this.addAncestorScrollEventListeners = new Array();
	        _this.removeAncestorScrollEventListeners = new Array();
	        _this.animFrame = new AnimationFrame();
	        _this.anchorBlurHandler = function (evt) {
	            _this.handleAnchorBlur(evt);
	        };
	        _this.documentClickHandler = function (evt) {
	            _this.handleDocumentClick(evt);
	        };
	        _this.documentKeydownHandler = function (evt) {
	            _this.handleKeydown(evt);
	        };
	        _this.tooltipMouseEnterHandler = function () {
	            _this.handleTooltipMouseEnter();
	        };
	        _this.tooltipMouseLeaveHandler = function () {
	            _this.handleTooltipMouseLeave();
	        };
	        _this.richTooltipFocusOutHandler = function (evt) {
	            _this.handleRichTooltipFocusOut(evt);
	        };
	        _this.windowScrollHandler = function () {
	            _this.handleWindowScrollEvent();
	        };
	        _this.windowResizeHandler = function () {
	            _this.handleWindowChangeEvent();
	        };
	        return _this;
	    }
	    Object.defineProperty(MDCTooltipFoundation, "defaultAdapter", {
	        get: function () {
	            return {
	                getAttribute: function () { return null; },
	                setAttribute: function () { return undefined; },
	                removeAttribute: function () { return undefined; },
	                addClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                removeClass: function () { return undefined; },
	                getComputedStyleProperty: function () { return ''; },
	                setStyleProperty: function () { return undefined; },
	                setSurfaceAnimationStyleProperty: function () { return undefined; },
	                getViewportWidth: function () { return 0; },
	                getViewportHeight: function () { return 0; },
	                getTooltipSize: function () { return ({ width: 0, height: 0 }); },
	                getAnchorBoundingRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                getParentBoundingRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                getAnchorAttribute: function () { return null; },
	                setAnchorAttribute: function () { return null; },
	                isRTL: function () { return false; },
	                anchorContainsElement: function () { return false; },
	                tooltipContainsElement: function () { return false; },
	                focusAnchorElement: function () { return undefined; },
	                registerEventHandler: function () { return undefined; },
	                deregisterEventHandler: function () { return undefined; },
	                registerAnchorEventHandler: function () { return undefined; },
	                deregisterAnchorEventHandler: function () { return undefined; },
	                registerDocumentEventHandler: function () { return undefined; },
	                deregisterDocumentEventHandler: function () { return undefined; },
	                registerWindowEventHandler: function () { return undefined; },
	                deregisterWindowEventHandler: function () { return undefined; },
	                notifyHidden: function () { return undefined; },
	                getTooltipCaretBoundingRect: function () {
	                    return ({ top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 });
	                },
	                setTooltipCaretStyle: function () { return undefined; },
	                clearTooltipCaretStyles: function () { return undefined; },
	                getActiveElement: function () { return null; },
	            };
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCTooltipFoundation.prototype.init = function () {
	        this.richTooltip = this.adapter.hasClass(RICH);
	        this.persistentTooltip =
	            this.adapter.getAttribute(attributes.PERSISTENT) === 'true';
	        this.interactiveTooltip =
	            !!this.adapter.getAnchorAttribute(attributes.ARIA_EXPANDED) &&
	                this.adapter.getAnchorAttribute(attributes.ARIA_HASPOPUP) === 'dialog';
	        this.hasCaret = this.richTooltip &&
	            this.adapter.getAttribute(attributes.HAS_CARET) === 'true';
	    };
	    MDCTooltipFoundation.prototype.isShown = function () {
	        return this.tooltipShown;
	    };
	    MDCTooltipFoundation.prototype.isRich = function () {
	        return this.richTooltip;
	    };
	    MDCTooltipFoundation.prototype.isPersistent = function () {
	        return this.persistentTooltip;
	    };
	    MDCTooltipFoundation.prototype.handleAnchorMouseEnter = function () {
	        var _this = this;
	        if (this.tooltipShown) {
	            // Covers the instance where a user hovers over the anchor to reveal the
	            // tooltip, and then quickly navigates away and then back to the anchor.
	            // The tooltip should stay visible without animating out and then back in
	            // again.
	            this.show();
	        }
	        else {
	            // clearHideTimeout here since handleAnchorMouseLeave sets a hideTimeout
	            // and that can execute before the showTimeout executes, resulting in hide
	            // being called and the showTimeout set below to be cleared.
	            this.clearHideTimeout();
	            this.showTimeout = setTimeout(function () {
	                _this.show();
	            }, this.showDelayMs);
	        }
	    };
	    MDCTooltipFoundation.prototype.handleAnchorTouchstart = function () {
	        var _this = this;
	        this.showTimeout = setTimeout(function () {
	            _this.show();
	        }, this.showDelayMs);
	        // Prevent a context menu from appearing if user is long-pressing on a
	        // tooltip anchor.
	        this.adapter.registerWindowEventHandler('contextmenu', this.preventContextMenuOnLongTouch);
	    };
	    MDCTooltipFoundation.prototype.preventContextMenuOnLongTouch = function (evt) {
	        evt.preventDefault();
	    };
	    MDCTooltipFoundation.prototype.handleAnchorTouchend = function () {
	        this.clearShowTimeout();
	        // Only remove the 'contextmenu' listener if the tooltip is not shown. When
	        // the tooltip *is* shown, listener is removed in the close method.
	        if (!this.isShown()) {
	            this.adapter.deregisterWindowEventHandler('contextmenu', this.preventContextMenuOnLongTouch);
	        }
	    };
	    MDCTooltipFoundation.prototype.handleAnchorFocus = function (evt) {
	        var _this = this;
	        // TODO(b/157075286): Need to add some way to distinguish keyboard
	        // navigation focus events from other focus events, and only show the
	        // tooltip on the former of these events.
	        var relatedTarget = evt.relatedTarget;
	        var tooltipContainsRelatedTarget = relatedTarget instanceof HTMLElement &&
	            this.adapter.tooltipContainsElement(relatedTarget);
	        // Do not show tooltip if the previous focus was on a tooltip element. This
	        // occurs when a rich tooltip is closed and focus is restored to the anchor
	        // or when user tab-navigates back into the anchor from the rich tooltip.
	        if (tooltipContainsRelatedTarget) {
	            return;
	        }
	        this.showTimeout = setTimeout(function () {
	            _this.show();
	        }, this.showDelayMs);
	    };
	    MDCTooltipFoundation.prototype.handleAnchorMouseLeave = function () {
	        var _this = this;
	        this.clearShowTimeout();
	        this.hideTimeout = setTimeout(function () {
	            _this.hide();
	        }, this.hideDelayMs);
	    };
	    MDCTooltipFoundation.prototype.handleAnchorClick = function () {
	        if (this.tooltipShown) {
	            this.hide();
	        }
	        else {
	            this.show();
	        }
	    };
	    MDCTooltipFoundation.prototype.handleDocumentClick = function (evt) {
	        var anchorOrTooltipContainsTargetElement = evt.target instanceof HTMLElement &&
	            (this.adapter.anchorContainsElement(evt.target) ||
	                this.adapter.tooltipContainsElement(evt.target));
	        // For persistent rich tooltips, we will not hide if:
	        // - The click target is within the anchor element. Otherwise, both
	        //   the anchor element's click handler and this handler will handle the
	        //   click (due to event propagation), resulting in a shown tooltip
	        //   being immediately hidden if the tooltip was initially hidden.
	        // - The click target is within the tooltip element, since clicks
	        //   on the tooltip do not close the tooltip.
	        if (this.richTooltip && this.persistentTooltip &&
	            anchorOrTooltipContainsTargetElement) {
	            return;
	        }
	        // Hide the tooltip immediately on click.
	        this.hide();
	    };
	    MDCTooltipFoundation.prototype.handleKeydown = function (evt) {
	        // Hide the tooltip immediately on ESC key.
	        var key = normalizeKey(evt);
	        if (key === KEY.ESCAPE) {
	            var activeElement = this.adapter.getActiveElement();
	            var tooltipContainsActiveElement = activeElement instanceof HTMLElement &&
	                this.adapter.tooltipContainsElement(activeElement);
	            if (tooltipContainsActiveElement) {
	                this.adapter.focusAnchorElement();
	            }
	            this.hide();
	        }
	    };
	    MDCTooltipFoundation.prototype.handleAnchorBlur = function (evt) {
	        if (this.richTooltip) {
	            var tooltipContainsRelatedTargetElement = evt.relatedTarget instanceof HTMLElement &&
	                this.adapter.tooltipContainsElement(evt.relatedTarget);
	            // If focus changed to the tooltip element, don't hide the tooltip.
	            if (tooltipContainsRelatedTargetElement) {
	                return;
	            }
	            if (evt.relatedTarget === null && this.interactiveTooltip) {
	                // If evt.relatedTarget is null, it is because focus is moving to an
	                // element that is not focusable. This should only occur in instances
	                // of a screen reader in browse mode/linear navigation mode. If the
	                // tooltip is interactive (and so the entire content is not read by
	                // the screen reader upon the tooltip being opened), we want to allow
	                // users to read the content of the tooltip (and not just the focusable
	                // elements).
	                return;
	            }
	        }
	        // Hide tooltip immediately on focus change.
	        this.hide();
	    };
	    MDCTooltipFoundation.prototype.handleTooltipMouseEnter = function () {
	        this.show();
	    };
	    MDCTooltipFoundation.prototype.handleTooltipMouseLeave = function () {
	        var _this = this;
	        this.clearShowTimeout();
	        this.hideTimeout = setTimeout(function () {
	            _this.hide();
	        }, this.hideDelayMs);
	    };
	    MDCTooltipFoundation.prototype.handleRichTooltipFocusOut = function (evt) {
	        var anchorOrTooltipContainsRelatedTargetElement = evt.relatedTarget instanceof HTMLElement &&
	            (this.adapter.anchorContainsElement(evt.relatedTarget) ||
	                this.adapter.tooltipContainsElement(evt.relatedTarget));
	        // If the focus is still within the anchor or the tooltip, do not hide the
	        // tooltip.
	        if (anchorOrTooltipContainsRelatedTargetElement) {
	            return;
	        }
	        if (evt.relatedTarget === null && this.interactiveTooltip) {
	            // If evt.relatedTarget is null, it is because focus is moving to an
	            // element that is not focusable. This should only occur in instances
	            // of a screen reader in browse mode/linear navigation mode. If the
	            // tooltip is interactive (and so the entire content is not read by
	            // the screen reader upon the tooltip being opened), we want to allow
	            // users to read the content of the tooltip (and not just the focusable
	            // elements).
	            return;
	        }
	        this.hide();
	    };
	    MDCTooltipFoundation.prototype.handleWindowScrollEvent = function () {
	        if (this.persistentTooltip) {
	            // Persistent tooltips remain visible on user scroll, call appropriate
	            // handler to ensure the tooltip remains pinned to the anchor on page
	            // scroll.
	            this.handleWindowChangeEvent();
	            return;
	        }
	        this.hide();
	    };
	    /**
	     * On window resize or scroll, check the anchor position and size and
	     * repostion tooltip if necessary.
	     */
	    MDCTooltipFoundation.prototype.handleWindowChangeEvent = function () {
	        var _this = this;
	        // Since scroll and resize events can fire at a high rate, we throttle
	        // the potential re-positioning of tooltip component using
	        // requestAnimationFrame.
	        this.animFrame.request(AnimationKeys.POLL_ANCHOR, function () {
	            _this.repositionTooltipOnAnchorMove();
	        });
	    };
	    MDCTooltipFoundation.prototype.show = function () {
	        var e_1, _a;
	        var _this = this;
	        this.clearHideTimeout();
	        this.clearShowTimeout();
	        if (this.tooltipShown) {
	            return;
	        }
	        this.tooltipShown = true;
	        this.adapter.removeAttribute('aria-hidden');
	        if (this.richTooltip) {
	            if (this.interactiveTooltip) {
	                this.adapter.setAnchorAttribute('aria-expanded', 'true');
	            }
	            this.adapter.registerEventHandler('focusout', this.richTooltipFocusOutHandler);
	        }
	        if (!this.persistentTooltip) {
	            this.adapter.registerEventHandler('mouseenter', this.tooltipMouseEnterHandler);
	            this.adapter.registerEventHandler('mouseleave', this.tooltipMouseLeaveHandler);
	        }
	        this.adapter.removeClass(HIDE);
	        this.adapter.addClass(SHOWING);
	        if (this.isTooltipMultiline() && !this.richTooltip) {
	            this.adapter.addClass(MULTILINE_TOOLTIP);
	        }
	        this.anchorRect = this.adapter.getAnchorBoundingRect();
	        this.parentRect = this.adapter.getParentBoundingRect();
	        this.richTooltip ? this.positionRichTooltip() : this.positionPlainTooltip();
	        this.adapter.registerAnchorEventHandler('blur', this.anchorBlurHandler);
	        this.adapter.registerDocumentEventHandler('click', this.documentClickHandler);
	        this.adapter.registerDocumentEventHandler('keydown', this.documentKeydownHandler);
	        this.adapter.registerWindowEventHandler('scroll', this.windowScrollHandler);
	        this.adapter.registerWindowEventHandler('resize', this.windowResizeHandler);
	        try {
	            // Register any additional scroll handlers
	            for (var _b = __values(this.addAncestorScrollEventListeners), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var fn = _c.value;
	                fn();
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        this.frameId = requestAnimationFrame(function () {
	            _this.clearAllAnimationClasses();
	            _this.adapter.addClass(SHOWN);
	            _this.adapter.addClass(SHOWING_TRANSITION);
	        });
	    };
	    MDCTooltipFoundation.prototype.hide = function () {
	        var e_2, _a;
	        this.clearHideTimeout();
	        this.clearShowTimeout();
	        if (!this.tooltipShown) {
	            return;
	        }
	        if (this.frameId) {
	            cancelAnimationFrame(this.frameId);
	        }
	        this.tooltipShown = false;
	        this.adapter.setAttribute('aria-hidden', 'true');
	        this.adapter.deregisterEventHandler('focusout', this.richTooltipFocusOutHandler);
	        if (this.richTooltip) {
	            if (this.interactiveTooltip) {
	                this.adapter.setAnchorAttribute('aria-expanded', 'false');
	            }
	        }
	        if (!this.persistentTooltip) {
	            this.adapter.deregisterEventHandler('mouseenter', this.tooltipMouseEnterHandler);
	            this.adapter.deregisterEventHandler('mouseleave', this.tooltipMouseLeaveHandler);
	        }
	        this.clearAllAnimationClasses();
	        this.adapter.addClass(HIDE);
	        this.adapter.addClass(HIDE_TRANSITION);
	        this.adapter.removeClass(SHOWN);
	        this.adapter.deregisterAnchorEventHandler('blur', this.anchorBlurHandler);
	        this.adapter.deregisterDocumentEventHandler('click', this.documentClickHandler);
	        this.adapter.deregisterDocumentEventHandler('keydown', this.documentKeydownHandler);
	        this.adapter.deregisterWindowEventHandler('scroll', this.windowScrollHandler);
	        this.adapter.deregisterWindowEventHandler('resize', this.windowResizeHandler);
	        this.adapter.deregisterWindowEventHandler('contextmenu', this.preventContextMenuOnLongTouch);
	        try {
	            // Deregister any additional scroll handlers
	            for (var _b = __values(this.removeAncestorScrollEventListeners), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var fn = _c.value;
	                fn();
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    };
	    MDCTooltipFoundation.prototype.handleTransitionEnd = function () {
	        var isHidingTooltip = this.adapter.hasClass(HIDE);
	        this.adapter.removeClass(SHOWING);
	        this.adapter.removeClass(SHOWING_TRANSITION);
	        this.adapter.removeClass(HIDE);
	        this.adapter.removeClass(HIDE_TRANSITION);
	        // If handleTransitionEnd is called after hiding the tooltip, the tooltip
	        // will have the HIDE class (before calling the adapter removeClass method).
	        // If tooltip is now hidden, send a notification that the animation has
	        // completed and the tooltip is no longer visible.
	        if (isHidingTooltip) {
	            this.adapter.notifyHidden();
	        }
	    };
	    MDCTooltipFoundation.prototype.clearAllAnimationClasses = function () {
	        this.adapter.removeClass(SHOWING_TRANSITION);
	        this.adapter.removeClass(HIDE_TRANSITION);
	    };
	    MDCTooltipFoundation.prototype.setTooltipPosition = function (position) {
	        var xPos = position.xPos, yPos = position.yPos, withCaretPos = position.withCaretPos;
	        if (this.hasCaret && withCaretPos) {
	            this.tooltipPositionWithCaret = withCaretPos;
	            return;
	        }
	        if (xPos) {
	            this.xTooltipPos = xPos;
	        }
	        if (yPos) {
	            this.yTooltipPos = yPos;
	        }
	    };
	    MDCTooltipFoundation.prototype.setAnchorBoundaryType = function (type) {
	        if (type === AnchorBoundaryType.UNBOUNDED) {
	            this.anchorGap = numbers$1.UNBOUNDED_ANCHOR_GAP;
	        }
	        else {
	            this.anchorGap = numbers$1.BOUNDED_ANCHOR_GAP;
	        }
	    };
	    MDCTooltipFoundation.prototype.setShowDelay = function (delayMs) {
	        this.showDelayMs = delayMs;
	    };
	    MDCTooltipFoundation.prototype.setHideDelay = function (delayMs) {
	        this.hideDelayMs = delayMs;
	    };
	    MDCTooltipFoundation.prototype.isTooltipMultiline = function () {
	        var tooltipSize = this.adapter.getTooltipSize();
	        return tooltipSize.height > numbers$1.MIN_HEIGHT &&
	            tooltipSize.width >= numbers$1.MAX_WIDTH;
	    };
	    MDCTooltipFoundation.prototype.positionPlainTooltip = function () {
	        // A plain tooltip has `fixed` positioning and is placed as an immediate
	        // child of the document body. Its positioning is calculated with respect to
	        // the viewport.
	        var _a = this.calculateTooltipStyles(this.anchorRect), top = _a.top, yTransformOrigin = _a.yTransformOrigin, left = _a.left, xTransformOrigin = _a.xTransformOrigin;
	        var transformProperty = HAS_WINDOW ? getCorrectPropertyName(window, 'transform') : 'transform';
	        this.adapter.setSurfaceAnimationStyleProperty(transformProperty + "-origin", xTransformOrigin + " " + yTransformOrigin);
	        this.adapter.setStyleProperty('top', top + "px");
	        this.adapter.setStyleProperty('left', left + "px");
	    };
	    MDCTooltipFoundation.prototype.positionRichTooltip = function () {
	        // TODO(b/177686782): Remove width setting when max-content is used to style
	        // the rich tooltip.
	        var _a, _b, _c, _d;
	        // getComputedStyleProperty is used instead of getTooltipSize since
	        // getTooltipSize returns the offSetWidth, which includes the border and
	        // padding. What we need is the width of the tooltip without border and
	        // padding.
	        var width = this.adapter.getComputedStyleProperty('width');
	        // When rich tooltips are positioned within their parent containers, the
	        // tooltip width might be shrunk if it collides with the edge of the parent
	        // container. We set the width of the tooltip to prevent this.
	        this.adapter.setStyleProperty('width', width);
	        var _e = this.hasCaret ?
	            this.calculateTooltipWithCaretStyles(this.anchorRect) :
	            this.calculateTooltipStyles(this.anchorRect), top = _e.top, yTransformOrigin = _e.yTransformOrigin, left = _e.left, xTransformOrigin = _e.xTransformOrigin;
	        var transformProperty = HAS_WINDOW ? getCorrectPropertyName(window, 'transform') : 'transform';
	        this.adapter.setSurfaceAnimationStyleProperty(transformProperty + "-origin", xTransformOrigin + " " + yTransformOrigin);
	        // A rich tooltip has `absolute` positioning and is placed as a sibling to
	        // the anchor element. Its positioning is calculated with respect to the
	        // parent element, and so the values need to be adjusted against the parent
	        // element.
	        var leftAdjustment = left - ((_b = (_a = this.parentRect) === null || _a === void 0 ? void 0 : _a.left) !== null && _b !== void 0 ? _b : 0);
	        var topAdjustment = top - ((_d = (_c = this.parentRect) === null || _c === void 0 ? void 0 : _c.top) !== null && _d !== void 0 ? _d : 0);
	        this.adapter.setStyleProperty('top', topAdjustment + "px");
	        this.adapter.setStyleProperty('left', leftAdjustment + "px");
	    };
	    /**
	     * Calculates the position of the tooltip. A tooltip will be placed beneath
	     * the anchor element and aligned either with the 'start'/'end' edge of the
	     * anchor element or the 'center'.
	     *
	     * Tooltip alignment is selected such that the tooltip maintains a threshold
	     * distance away from the viewport (defaulting to 'center' alignment). If the
	     * placement of the anchor prevents this threshold distance from being
	     * maintained, the tooltip is positioned so that it does not collide with the
	     * viewport.
	     *
	     * Users can specify an alignment, however, if this alignment results in the
	     * tooltip colliding with the viewport, this specification is overwritten.
	     */
	    MDCTooltipFoundation.prototype.calculateTooltipStyles = function (anchorRect) {
	        if (!anchorRect) {
	            return { top: 0, left: 0 };
	        }
	        var tooltipSize = this.adapter.getTooltipSize();
	        var top = this.calculateYTooltipDistance(anchorRect, tooltipSize.height);
	        var left = this.calculateXTooltipDistance(anchorRect, tooltipSize.width);
	        return {
	            top: top.distance,
	            yTransformOrigin: top.yTransformOrigin,
	            left: left.distance,
	            xTransformOrigin: left.xTransformOrigin
	        };
	    };
	    /**
	     * Calculates the `left` distance for the tooltip.
	     * Returns the distance value and a string indicating the x-axis transform-
	     * origin that should be used when animating the tooltip.
	     */
	    MDCTooltipFoundation.prototype.calculateXTooltipDistance = function (anchorRect, tooltipWidth) {
	        var isLTR = !this.adapter.isRTL();
	        var startPos, endPos, centerPos;
	        var startTransformOrigin, endTransformOrigin;
	        if (this.richTooltip) {
	            startPos = isLTR ? anchorRect.left - tooltipWidth : anchorRect.right;
	            endPos = isLTR ? anchorRect.right : anchorRect.left - tooltipWidth;
	            startTransformOrigin = isLTR ? strings$1.RIGHT : strings$1.LEFT;
	            endTransformOrigin = isLTR ? strings$1.LEFT : strings$1.RIGHT;
	        }
	        else {
	            startPos = isLTR ? anchorRect.left : anchorRect.right - tooltipWidth;
	            endPos = isLTR ? anchorRect.right - tooltipWidth : anchorRect.left;
	            centerPos = anchorRect.left + (anchorRect.width - tooltipWidth) / 2;
	            startTransformOrigin = isLTR ? strings$1.LEFT : strings$1.RIGHT;
	            endTransformOrigin = isLTR ? strings$1.RIGHT : strings$1.LEFT;
	        }
	        var positionOptions = this.richTooltip ?
	            this.determineValidPositionOptions(startPos, endPos) :
	            // For plain tooltips, centerPos is defined
	            this.determineValidPositionOptions(centerPos, startPos, endPos);
	        if (this.xTooltipPos === XPosition.START && positionOptions.has(startPos)) {
	            return { distance: startPos, xTransformOrigin: startTransformOrigin };
	        }
	        if (this.xTooltipPos === XPosition.END && positionOptions.has(endPos)) {
	            return { distance: endPos, xTransformOrigin: endTransformOrigin };
	        }
	        if (this.xTooltipPos === XPosition.CENTER &&
	            positionOptions.has(centerPos)) {
	            // This code path is only executed if calculating the distance for plain
	            // tooltips. In this instance, centerPos will always be defined, so we can
	            // safely assert that the returned value is non-null/undefined.
	            return { distance: centerPos, xTransformOrigin: strings$1.CENTER };
	        }
	        // If no user position is supplied, rich tooltips default to end pos, then
	        // start position. Plain tooltips default to center, start, then end.
	        var possiblePositions = this.richTooltip ?
	            [
	                { distance: endPos, xTransformOrigin: endTransformOrigin },
	                { distance: startPos, xTransformOrigin: startTransformOrigin }
	            ] :
	            [
	                { distance: centerPos, xTransformOrigin: strings$1.CENTER },
	                { distance: startPos, xTransformOrigin: startTransformOrigin },
	                { distance: endPos, xTransformOrigin: endTransformOrigin }
	            ];
	        var validPosition = possiblePositions.find(function (_a) {
	            var distance = _a.distance;
	            return positionOptions.has(distance);
	        });
	        if (validPosition) {
	            return validPosition;
	        }
	        // Indicates that all potential positions would result in the tooltip
	        // colliding with the viewport. This would only occur when the anchor
	        // element itself collides with the viewport, or the viewport is very
	        // narrow. In this case, we allow the tooltip to be mis-aligned from the
	        // anchor element.
	        if (anchorRect.left < 0) {
	            return {
	                distance: this.minViewportTooltipThreshold,
	                xTransformOrigin: strings$1.LEFT
	            };
	        }
	        else {
	            var viewportWidth = this.adapter.getViewportWidth();
	            var distance = viewportWidth - (tooltipWidth + this.minViewportTooltipThreshold);
	            return { distance: distance, xTransformOrigin: strings$1.RIGHT };
	        }
	    };
	    /**
	     * Given the values for the horizontal alignments of the tooltip, calculates
	     * which of these options would result in the tooltip maintaining the required
	     * threshold distance vs which would result in the tooltip staying within the
	     * viewport.
	     *
	     * A Set of values is returned holding the distances that would honor the
	     * above requirements. Following the logic for determining the tooltip
	     * position, if all alignments violate the threshold, then the returned Set
	     * contains values that keep the tooltip within the viewport.
	     */
	    MDCTooltipFoundation.prototype.determineValidPositionOptions = function () {
	        var e_3, _a;
	        var positions = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            positions[_i] = arguments[_i];
	        }
	        var posWithinThreshold = new Set();
	        var posWithinViewport = new Set();
	        try {
	            for (var positions_1 = __values(positions), positions_1_1 = positions_1.next(); !positions_1_1.done; positions_1_1 = positions_1.next()) {
	                var position = positions_1_1.value;
	                if (this.positionHonorsViewportThreshold(position)) {
	                    posWithinThreshold.add(position);
	                }
	                else if (this.positionDoesntCollideWithViewport(position)) {
	                    posWithinViewport.add(position);
	                }
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (positions_1_1 && !positions_1_1.done && (_a = positions_1.return)) _a.call(positions_1);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	        return posWithinThreshold.size ? posWithinThreshold : posWithinViewport;
	    };
	    MDCTooltipFoundation.prototype.positionHonorsViewportThreshold = function (leftPos) {
	        var viewportWidth = this.adapter.getViewportWidth();
	        var tooltipWidth = this.adapter.getTooltipSize().width;
	        return leftPos + tooltipWidth <=
	            viewportWidth - this.minViewportTooltipThreshold &&
	            leftPos >= this.minViewportTooltipThreshold;
	    };
	    MDCTooltipFoundation.prototype.positionDoesntCollideWithViewport = function (leftPos) {
	        var viewportWidth = this.adapter.getViewportWidth();
	        var tooltipWidth = this.adapter.getTooltipSize().width;
	        return leftPos + tooltipWidth <= viewportWidth && leftPos >= 0;
	    };
	    /**
	     * Calculates the `top` distance for the tooltip.
	     * Returns the distance value and a string indicating the y-axis transform-
	     * origin that should be used when animating the tooltip.
	     */
	    MDCTooltipFoundation.prototype.calculateYTooltipDistance = function (anchorRect, tooltipHeight) {
	        var belowYPos = anchorRect.bottom + this.anchorGap;
	        var aboveYPos = anchorRect.top - (this.anchorGap + tooltipHeight);
	        var yPositionOptions = this.determineValidYPositionOptions(aboveYPos, belowYPos);
	        if (this.yTooltipPos === YPosition.ABOVE &&
	            yPositionOptions.has(aboveYPos)) {
	            return { distance: aboveYPos, yTransformOrigin: strings$1.BOTTOM };
	        }
	        else if (this.yTooltipPos === YPosition.BELOW &&
	            yPositionOptions.has(belowYPos)) {
	            return { distance: belowYPos, yTransformOrigin: strings$1.TOP };
	        }
	        if (yPositionOptions.has(belowYPos)) {
	            return { distance: belowYPos, yTransformOrigin: strings$1.TOP };
	        }
	        if (yPositionOptions.has(aboveYPos)) {
	            return { distance: aboveYPos, yTransformOrigin: strings$1.BOTTOM };
	        }
	        // Indicates that all potential positions would result in the tooltip
	        // colliding with the viewport. This would only occur when the viewport is
	        // very short.
	        return { distance: belowYPos, yTransformOrigin: strings$1.TOP };
	    };
	    /**
	     * Given the values for above/below alignment of the tooltip, calculates
	     * which of these options would result in the tooltip maintaining the required
	     * threshold distance vs which would result in the tooltip staying within the
	     * viewport.
	     *
	     * A Set of values is returned holding the distances that would honor the
	     * above requirements. Following the logic for determining the tooltip
	     * position, if all possible alignments violate the threshold, then the
	     * returned Set contains values that keep the tooltip within the viewport.
	     */
	    MDCTooltipFoundation.prototype.determineValidYPositionOptions = function (aboveAnchorPos, belowAnchorPos) {
	        var posWithinThreshold = new Set();
	        var posWithinViewport = new Set();
	        if (this.yPositionHonorsViewportThreshold(aboveAnchorPos)) {
	            posWithinThreshold.add(aboveAnchorPos);
	        }
	        else if (this.yPositionDoesntCollideWithViewport(aboveAnchorPos)) {
	            posWithinViewport.add(aboveAnchorPos);
	        }
	        if (this.yPositionHonorsViewportThreshold(belowAnchorPos)) {
	            posWithinThreshold.add(belowAnchorPos);
	        }
	        else if (this.yPositionDoesntCollideWithViewport(belowAnchorPos)) {
	            posWithinViewport.add(belowAnchorPos);
	        }
	        return posWithinThreshold.size ? posWithinThreshold : posWithinViewport;
	    };
	    MDCTooltipFoundation.prototype.yPositionHonorsViewportThreshold = function (yPos) {
	        var viewportHeight = this.adapter.getViewportHeight();
	        var tooltipHeight = this.adapter.getTooltipSize().height;
	        return yPos + tooltipHeight + this.minViewportTooltipThreshold <=
	            viewportHeight &&
	            yPos >= this.minViewportTooltipThreshold;
	    };
	    MDCTooltipFoundation.prototype.yPositionDoesntCollideWithViewport = function (yPos) {
	        var viewportHeight = this.adapter.getViewportHeight();
	        var tooltipHeight = this.adapter.getTooltipSize().height;
	        return yPos + tooltipHeight <= viewportHeight && yPos >= 0;
	    };
	    MDCTooltipFoundation.prototype.calculateTooltipWithCaretStyles = function (anchorRect) {
	        // Prior to grabbing the caret bounding rect, we clear all styles set on the
	        // caret. This will ensure the width/height is consistent (since we rotate
	        // the caret 90deg in some positions which would result in the height and
	        // width bounding rect measurements flipping).
	        this.adapter.clearTooltipCaretStyles();
	        var caretSize = this.adapter.getTooltipCaretBoundingRect();
	        if (!anchorRect || !caretSize) {
	            return { position: PositionWithCaret.DETECTED, top: 0, left: 0 };
	        }
	        // The caret for the rich tooltip is created by rotating/skewing/scaling
	        // square div into a diamond shape and then hiding half of it so it looks
	        // like a triangle. We use the boundingClientRect to calculate the
	        // width/height of the element after the transforms (to the caret) have been
	        // applied. Since the full tooltip is scaled by 0.8 for the entrance
	        // animation, we divide by this value to retrieve the actual caret
	        // dimensions.
	        var caretWidth = caretSize.width / numbers$1.ANIMATION_SCALE;
	        // Since we hide half of caret, we divide the returned ClientRect height
	        // by 2.
	        var caretHeight = (caretSize.height / numbers$1.ANIMATION_SCALE) / 2;
	        var tooltipSize = this.adapter.getTooltipSize();
	        var yOptions = this.calculateYWithCaretDistanceOptions(anchorRect, tooltipSize.height, { caretWidth: caretWidth, caretHeight: caretHeight });
	        var xOptions = this.calculateXWithCaretDistanceOptions(anchorRect, tooltipSize.width, { caretWidth: caretWidth, caretHeight: caretHeight });
	        var positionOptions = this.validateTooltipWithCaretDistances(yOptions, xOptions);
	        if (positionOptions.size < 1) {
	            positionOptions = this.generateBackupPositionOption(anchorRect, tooltipSize, { caretWidth: caretWidth, caretHeight: caretHeight });
	        }
	        var _a = this.determineTooltipWithCaretDistance(positionOptions), position = _a.position, xDistance = _a.xDistance, yDistance = _a.yDistance;
	        // After determining the position of the tooltip relative to the anchor,
	        // place the caret in the corresponding position and retrieve the necessary
	        // x/y transform origins needed to properly animate the tooltip entrance.
	        var _b = this.setCaretPositionStyles(position, { caretWidth: caretWidth, caretHeight: caretHeight }), yTransformOrigin = _b.yTransformOrigin, xTransformOrigin = _b.xTransformOrigin;
	        return {
	            yTransformOrigin: yTransformOrigin,
	            xTransformOrigin: xTransformOrigin,
	            top: yDistance,
	            left: xDistance
	        };
	    };
	    MDCTooltipFoundation.prototype.calculateXWithCaretDistanceOptions = function (anchorRect, tooltipWidth, caretSize) {
	        var caretWidth = caretSize.caretWidth, caretHeight = caretSize.caretHeight;
	        var isLTR = !this.adapter.isRTL();
	        var anchorMidpoint = anchorRect.left + anchorRect.width / 2;
	        var sideLeftAligned = anchorRect.left - (tooltipWidth + this.anchorGap + caretHeight);
	        var sideRightAligned = anchorRect.right + this.anchorGap + caretHeight;
	        var sideStartPos = isLTR ? sideLeftAligned : sideRightAligned;
	        var sideEndPos = isLTR ? sideRightAligned : sideLeftAligned;
	        var verticalLeftAligned = anchorMidpoint - (numbers$1.CARET_INDENTATION + caretWidth / 2);
	        var verticalRightAligned = anchorMidpoint -
	            (tooltipWidth - numbers$1.CARET_INDENTATION - caretWidth / 2);
	        var verticalStartPos = isLTR ? verticalLeftAligned : verticalRightAligned;
	        var verticalEndPos = isLTR ? verticalRightAligned : verticalLeftAligned;
	        var verticalCenterPos = anchorMidpoint - tooltipWidth / 2;
	        var possiblePositionsMap = new Map([
	            [XPositionWithCaret.START, verticalStartPos],
	            [XPositionWithCaret.CENTER, verticalCenterPos],
	            [XPositionWithCaret.END, verticalEndPos],
	            [XPositionWithCaret.SIDE_END, sideEndPos],
	            [XPositionWithCaret.SIDE_START, sideStartPos],
	        ]);
	        return possiblePositionsMap;
	    };
	    MDCTooltipFoundation.prototype.calculateYWithCaretDistanceOptions = function (anchorRect, tooltipHeight, caretSize) {
	        var caretWidth = caretSize.caretWidth, caretHeight = caretSize.caretHeight;
	        var anchorMidpoint = anchorRect.top + anchorRect.height / 2;
	        var belowYPos = anchorRect.bottom + this.anchorGap + caretHeight;
	        var aboveYPos = anchorRect.top - (this.anchorGap + tooltipHeight + caretHeight);
	        var sideTopYPos = anchorMidpoint - (numbers$1.CARET_INDENTATION + caretWidth / 2);
	        var sideCenterYPos = anchorMidpoint - (tooltipHeight / 2);
	        var sideBottomYPos = anchorMidpoint -
	            (tooltipHeight - numbers$1.CARET_INDENTATION - caretWidth / 2);
	        var possiblePositionsMap = new Map([
	            [YPositionWithCaret.ABOVE, aboveYPos],
	            [YPositionWithCaret.BELOW, belowYPos],
	            [YPositionWithCaret.SIDE_TOP, sideTopYPos],
	            [YPositionWithCaret.SIDE_CENTER, sideCenterYPos],
	            [YPositionWithCaret.SIDE_BOTTOM, sideBottomYPos],
	        ]);
	        return possiblePositionsMap;
	    };
	    MDCTooltipFoundation.prototype.repositionTooltipOnAnchorMove = function () {
	        var newAnchorRect = this.adapter.getAnchorBoundingRect();
	        if (!newAnchorRect || !this.anchorRect)
	            return;
	        if (newAnchorRect.top !== this.anchorRect.top ||
	            newAnchorRect.left !== this.anchorRect.left ||
	            newAnchorRect.height !== this.anchorRect.height ||
	            newAnchorRect.width !== this.anchorRect.width) {
	            this.anchorRect = newAnchorRect;
	            this.parentRect = this.adapter.getParentBoundingRect();
	            this.richTooltip ? this.positionRichTooltip() :
	                this.positionPlainTooltip();
	        }
	    };
	    /**
	     * Given a list of x/y position options for a rich tooltip with caret, checks
	     * if valid x/y combinations of these position options are either within the
	     * viewport threshold, or simply within the viewport. Returns a map with the
	     * valid x/y position combinations that all either honor the viewport
	     * threshold or are simply inside within the viewport.
	     */
	    MDCTooltipFoundation.prototype.validateTooltipWithCaretDistances = function (yOptions, xOptions) {
	        var e_4, _a, e_5, _b, e_6, _c;
	        var posWithinThreshold = new Map();
	        var posWithinViewport = new Map();
	        // If a tooltip has a caret, not all combinations of YPositionWithCarets and
	        // XPositionWithCarets are possible. Because of this we only check the
	        // validity of a given XPositionWithCaret if a potential corresponding
	        // YPositionWithCaret is valid.
	        var validMappings = new Map([
	            [
	                YPositionWithCaret.ABOVE,
	                [
	                    XPositionWithCaret.START, XPositionWithCaret.CENTER,
	                    XPositionWithCaret.END
	                ]
	            ],
	            [
	                YPositionWithCaret.BELOW,
	                [
	                    XPositionWithCaret.START, XPositionWithCaret.CENTER,
	                    XPositionWithCaret.END
	                ]
	            ],
	            [
	                YPositionWithCaret.SIDE_TOP,
	                [XPositionWithCaret.SIDE_START, XPositionWithCaret.SIDE_END]
	            ],
	            [
	                YPositionWithCaret.SIDE_CENTER,
	                [XPositionWithCaret.SIDE_START, XPositionWithCaret.SIDE_END]
	            ],
	            [
	                YPositionWithCaret.SIDE_BOTTOM,
	                [XPositionWithCaret.SIDE_START, XPositionWithCaret.SIDE_END]
	            ],
	        ]);
	        try {
	            for (var _d = __values(validMappings.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {
	                var y = _e.value;
	                var yDistance = yOptions.get(y);
	                if (this.yPositionHonorsViewportThreshold(yDistance)) {
	                    try {
	                        for (var _f = (e_5 = void 0, __values(validMappings.get(y))), _g = _f.next(); !_g.done; _g = _f.next()) {
	                            var x = _g.value;
	                            var xDistance = xOptions.get(x);
	                            if (this.positionHonorsViewportThreshold(xDistance)) {
	                                var caretPositionName = this.caretPositionOptionsMapping(x, y);
	                                posWithinThreshold.set(caretPositionName, { xDistance: xDistance, yDistance: yDistance });
	                            }
	                        }
	                    }
	                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
	                    finally {
	                        try {
	                            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
	                        }
	                        finally { if (e_5) throw e_5.error; }
	                    }
	                }
	                else if (this.yPositionDoesntCollideWithViewport(yDistance)) {
	                    try {
	                        for (var _h = (e_6 = void 0, __values(validMappings.get(y))), _j = _h.next(); !_j.done; _j = _h.next()) {
	                            var x = _j.value;
	                            var xDistance = xOptions.get(x);
	                            if (this.positionDoesntCollideWithViewport(xDistance)) {
	                                var caretPositionName = this.caretPositionOptionsMapping(x, y);
	                                posWithinViewport.set(caretPositionName, { xDistance: xDistance, yDistance: yDistance });
	                            }
	                        }
	                    }
	                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
	                    finally {
	                        try {
	                            if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
	                        }
	                        finally { if (e_6) throw e_6.error; }
	                    }
	                }
	            }
	        }
	        catch (e_4_1) { e_4 = { error: e_4_1 }; }
	        finally {
	            try {
	                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
	            }
	            finally { if (e_4) throw e_4.error; }
	        }
	        return posWithinThreshold.size ? posWithinThreshold : posWithinViewport;
	    };
	    /**
	     * Method for generating a horizontal and vertical position for the tooltip if
	     * all other calculated values are considered invalid. This would only happen
	     * in situations of very small viewports/large tooltips.
	     */
	    MDCTooltipFoundation.prototype.generateBackupPositionOption = function (anchorRect, tooltipSize, caretSize) {
	        var isLTR = !this.adapter.isRTL();
	        var xDistance;
	        var xPos;
	        if (anchorRect.left < 0) {
	            xDistance = this.minViewportTooltipThreshold + caretSize.caretHeight;
	            xPos = isLTR ? XPositionWithCaret.END : XPositionWithCaret.START;
	        }
	        else {
	            var viewportWidth = this.adapter.getViewportWidth();
	            xDistance = viewportWidth -
	                (tooltipSize.width + this.minViewportTooltipThreshold +
	                    caretSize.caretHeight);
	            xPos = isLTR ? XPositionWithCaret.START : XPositionWithCaret.END;
	        }
	        var yDistance;
	        var yPos;
	        if (anchorRect.top < 0) {
	            yDistance = this.minViewportTooltipThreshold + caretSize.caretHeight;
	            yPos = YPositionWithCaret.BELOW;
	        }
	        else {
	            var viewportHeight = this.adapter.getViewportHeight();
	            yDistance = viewportHeight -
	                (tooltipSize.height + this.minViewportTooltipThreshold +
	                    caretSize.caretHeight);
	            yPos = YPositionWithCaret.ABOVE;
	        }
	        var caretPositionName = this.caretPositionOptionsMapping(xPos, yPos);
	        return new Map([[caretPositionName, { xDistance: xDistance, yDistance: yDistance }]]);
	    };
	    /**
	     * Given a list of valid position options for a rich tooltip with caret,
	     * returns the option that should be used.
	     */
	    MDCTooltipFoundation.prototype.determineTooltipWithCaretDistance = function (options) {
	        if (options.has(this.tooltipPositionWithCaret)) {
	            var tooltipPos = options.get(this.tooltipPositionWithCaret);
	            return {
	                position: this.tooltipPositionWithCaret,
	                xDistance: tooltipPos.xDistance,
	                yDistance: tooltipPos.yDistance,
	            };
	        }
	        var orderPref = [
	            PositionWithCaret.ABOVE_START, PositionWithCaret.ABOVE_CENTER,
	            PositionWithCaret.ABOVE_END, PositionWithCaret.TOP_SIDE_START,
	            PositionWithCaret.CENTER_SIDE_START, PositionWithCaret.BOTTOM_SIDE_START,
	            PositionWithCaret.TOP_SIDE_END, PositionWithCaret.CENTER_SIDE_END,
	            PositionWithCaret.BOTTOM_SIDE_END, PositionWithCaret.BELOW_START,
	            PositionWithCaret.BELOW_CENTER, PositionWithCaret.BELOW_END
	        ];
	        // Before calling this method we check whether or not the "options" param
	        // is empty and invoke a different method. We, therefore, can be certain
	        // that "validPosition" will always be defined.
	        var validPosition = orderPref.find(function (pos) { return options.has(pos); });
	        var pos = options.get(validPosition);
	        return {
	            position: validPosition,
	            xDistance: pos.xDistance,
	            yDistance: pos.yDistance,
	        };
	    };
	    /**
	     * Returns the corresponding PositionWithCaret enum for the proivded
	     * XPositionWithCaret and YPositionWithCaret enums. This mapping exists so our
	     * public API accepts only PositionWithCaret enums (as all combinations of
	     * XPositionWithCaret and YPositionWithCaret are not valid), but internally we
	     * can calculate the X and Y positions of a rich tooltip with caret
	     * separately.
	     */
	    MDCTooltipFoundation.prototype.caretPositionOptionsMapping = function (xPos, yPos) {
	        switch (yPos) {
	            case YPositionWithCaret.ABOVE:
	                if (xPos === XPositionWithCaret.START) {
	                    return PositionWithCaret.ABOVE_START;
	                }
	                else if (xPos === XPositionWithCaret.CENTER) {
	                    return PositionWithCaret.ABOVE_CENTER;
	                }
	                else if (xPos === XPositionWithCaret.END) {
	                    return PositionWithCaret.ABOVE_END;
	                }
	                break;
	            case YPositionWithCaret.BELOW:
	                if (xPos === XPositionWithCaret.START) {
	                    return PositionWithCaret.BELOW_START;
	                }
	                else if (xPos === XPositionWithCaret.CENTER) {
	                    return PositionWithCaret.BELOW_CENTER;
	                }
	                else if (xPos === XPositionWithCaret.END) {
	                    return PositionWithCaret.BELOW_END;
	                }
	                break;
	            case YPositionWithCaret.SIDE_TOP:
	                if (xPos === XPositionWithCaret.SIDE_START) {
	                    return PositionWithCaret.TOP_SIDE_START;
	                }
	                else if (xPos === XPositionWithCaret.SIDE_END) {
	                    return PositionWithCaret.TOP_SIDE_END;
	                }
	                break;
	            case YPositionWithCaret.SIDE_CENTER:
	                if (xPos === XPositionWithCaret.SIDE_START) {
	                    return PositionWithCaret.CENTER_SIDE_START;
	                }
	                else if (xPos === XPositionWithCaret.SIDE_END) {
	                    return PositionWithCaret.CENTER_SIDE_END;
	                }
	                break;
	            case YPositionWithCaret.SIDE_BOTTOM:
	                if (xPos === XPositionWithCaret.SIDE_START) {
	                    return PositionWithCaret.BOTTOM_SIDE_START;
	                }
	                else if (xPos === XPositionWithCaret.SIDE_END) {
	                    return PositionWithCaret.BOTTOM_SIDE_END;
	                }
	                break;
	            default:
	                break;
	        }
	        throw new Error("MDCTooltipFoundation: Invalid caret position of " + xPos + ", " + yPos);
	    };
	    /**
	     * Given a PositionWithCaret, applies the correct styles to the caret element
	     * so that it is positioned properly on the rich tooltip.
	     * Returns the x and y positions of the caret, to be used as the
	     * transform-origin on the tooltip itself for entrance animations.
	     */
	    MDCTooltipFoundation.prototype.setCaretPositionStyles = function (position, caretSize) {
	        var e_7, _a;
	        var values = this.calculateCaretPositionOnTooltip(position, caretSize);
	        if (!values) {
	            return { yTransformOrigin: 0, xTransformOrigin: 0 };
	        }
	        // Prior to setting the caret position styles, clear any previous styles
	        // set. This is necessary as all position options do not use the same
	        // properties (e.g. using 'left' or 'right') and so old style properties
	        // might not get overridden, causing misplaced carets.
	        this.adapter.clearTooltipCaretStyles();
	        this.adapter.setTooltipCaretStyle(values.yAlignment, values.yAxisPx);
	        this.adapter.setTooltipCaretStyle(values.xAlignment, values.xAxisPx);
	        // Value of scaleX is cos(skew), Math.cos() expects radians though, so we
	        // must first convert the skew value (which is in degrees) to radians.
	        var skewRadians = values.skew * (Math.PI / 180);
	        var scaleX = Math.cos(skewRadians);
	        this.adapter.setTooltipCaretStyle('transform', "rotate(" + values.rotation + "deg) skewY(" + values.skew + "deg) scaleX(" + scaleX + ")");
	        this.adapter.setTooltipCaretStyle('transform-origin', values.xAlignment + " " + values.yAlignment);
	        try {
	            for (var _b = __values(values.caretCorners), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var corner = _c.value;
	                this.adapter.setTooltipCaretStyle(corner, '0');
	            }
	        }
	        catch (e_7_1) { e_7 = { error: e_7_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_7) throw e_7.error; }
	        }
	        return {
	            yTransformOrigin: values.yTransformOrigin,
	            xTransformOrigin: values.xTransformOrigin
	        };
	    };
	    /**
	     * Given a PositionWithCaret, determines the correct styles to position the
	     * caret properly on the rich tooltip.
	     */
	    MDCTooltipFoundation.prototype.calculateCaretPositionOnTooltip = function (tooltipPos, caretSize) {
	        var isLTR = !this.adapter.isRTL();
	        var tooltipWidth = this.adapter.getComputedStyleProperty('width');
	        var tooltipHeight = this.adapter.getComputedStyleProperty('height');
	        if (!tooltipWidth || !tooltipHeight || !caretSize) {
	            return;
	        }
	        var midpointWidth = "calc((" + tooltipWidth + " - " + caretSize.caretWidth + "px) / 2)";
	        var midpointHeight = "calc((" + tooltipHeight + " - " + caretSize.caretWidth + "px) / 2)";
	        var flushWithEdge = '0';
	        var indentedFromEdge = numbers$1.CARET_INDENTATION + "px";
	        var indentedFromWidth = "calc(" + tooltipWidth + " - " + indentedFromEdge + ")";
	        var indentedFromHeight = "calc(" + tooltipHeight + " - " + indentedFromEdge + ")";
	        var verticalRotation = 35;
	        var horizontalRotation = Math.abs(90 - verticalRotation);
	        var bottomRightTopLeftBorderRadius = ['border-bottom-right-radius', 'border-top-left-radius'];
	        var bottomLeftTopRightBorderRadius = ['border-bottom-left-radius', 'border-top-right-radius'];
	        var skewDeg = 20;
	        switch (tooltipPos) {
	            case PositionWithCaret.BELOW_CENTER:
	                return {
	                    yAlignment: strings$1.TOP,
	                    xAlignment: strings$1.LEFT,
	                    yAxisPx: flushWithEdge,
	                    xAxisPx: midpointWidth,
	                    rotation: -1 * verticalRotation,
	                    skew: -1 * skewDeg,
	                    xTransformOrigin: midpointWidth,
	                    yTransformOrigin: flushWithEdge,
	                    caretCorners: bottomRightTopLeftBorderRadius,
	                };
	            case PositionWithCaret.BELOW_END:
	                return {
	                    yAlignment: strings$1.TOP,
	                    xAlignment: isLTR ? strings$1.RIGHT : strings$1.LEFT,
	                    yAxisPx: flushWithEdge,
	                    xAxisPx: indentedFromEdge,
	                    rotation: isLTR ? verticalRotation : -1 * verticalRotation,
	                    skew: isLTR ? skewDeg : -1 * skewDeg,
	                    xTransformOrigin: isLTR ? indentedFromWidth : indentedFromEdge,
	                    yTransformOrigin: flushWithEdge,
	                    caretCorners: isLTR ? bottomLeftTopRightBorderRadius :
	                        bottomRightTopLeftBorderRadius,
	                };
	            case PositionWithCaret.BELOW_START:
	                return {
	                    yAlignment: strings$1.TOP,
	                    xAlignment: isLTR ? strings$1.LEFT : strings$1.RIGHT,
	                    yAxisPx: flushWithEdge,
	                    xAxisPx: indentedFromEdge,
	                    rotation: isLTR ? -1 * verticalRotation : verticalRotation,
	                    skew: isLTR ? -1 * skewDeg : skewDeg,
	                    xTransformOrigin: isLTR ? indentedFromEdge : indentedFromWidth,
	                    yTransformOrigin: flushWithEdge,
	                    caretCorners: isLTR ? bottomRightTopLeftBorderRadius :
	                        bottomLeftTopRightBorderRadius,
	                };
	            case PositionWithCaret.TOP_SIDE_END:
	                return {
	                    yAlignment: strings$1.TOP,
	                    xAlignment: isLTR ? strings$1.LEFT : strings$1.RIGHT,
	                    yAxisPx: indentedFromEdge,
	                    xAxisPx: flushWithEdge,
	                    rotation: isLTR ? horizontalRotation : -1 * horizontalRotation,
	                    skew: isLTR ? -1 * skewDeg : skewDeg,
	                    xTransformOrigin: isLTR ? flushWithEdge : tooltipWidth,
	                    yTransformOrigin: indentedFromEdge,
	                    caretCorners: isLTR ? bottomRightTopLeftBorderRadius :
	                        bottomLeftTopRightBorderRadius,
	                };
	            case PositionWithCaret.CENTER_SIDE_END:
	                return {
	                    yAlignment: strings$1.TOP,
	                    xAlignment: isLTR ? strings$1.LEFT : strings$1.RIGHT,
	                    yAxisPx: midpointHeight,
	                    xAxisPx: flushWithEdge,
	                    rotation: isLTR ? horizontalRotation : -1 * horizontalRotation,
	                    skew: isLTR ? -1 * skewDeg : skewDeg,
	                    xTransformOrigin: isLTR ? flushWithEdge : tooltipWidth,
	                    yTransformOrigin: midpointHeight,
	                    caretCorners: isLTR ? bottomRightTopLeftBorderRadius :
	                        bottomLeftTopRightBorderRadius,
	                };
	            case PositionWithCaret.BOTTOM_SIDE_END:
	                return {
	                    yAlignment: strings$1.BOTTOM,
	                    xAlignment: isLTR ? strings$1.LEFT : strings$1.RIGHT,
	                    yAxisPx: indentedFromEdge,
	                    xAxisPx: flushWithEdge,
	                    rotation: isLTR ? -1 * horizontalRotation : horizontalRotation,
	                    skew: isLTR ? skewDeg : -1 * skewDeg,
	                    xTransformOrigin: isLTR ? flushWithEdge : tooltipWidth,
	                    yTransformOrigin: indentedFromHeight,
	                    caretCorners: isLTR ? bottomLeftTopRightBorderRadius :
	                        bottomRightTopLeftBorderRadius,
	                };
	            case PositionWithCaret.TOP_SIDE_START:
	                return {
	                    yAlignment: strings$1.TOP,
	                    xAlignment: isLTR ? strings$1.RIGHT : strings$1.LEFT,
	                    yAxisPx: indentedFromEdge,
	                    xAxisPx: flushWithEdge,
	                    rotation: isLTR ? -1 * horizontalRotation : horizontalRotation,
	                    skew: isLTR ? skewDeg : -1 * skewDeg,
	                    xTransformOrigin: isLTR ? tooltipWidth : flushWithEdge,
	                    yTransformOrigin: indentedFromEdge,
	                    caretCorners: isLTR ? bottomLeftTopRightBorderRadius :
	                        bottomRightTopLeftBorderRadius,
	                };
	            case PositionWithCaret.CENTER_SIDE_START:
	                return {
	                    yAlignment: strings$1.TOP,
	                    xAlignment: isLTR ? strings$1.RIGHT : strings$1.LEFT,
	                    yAxisPx: midpointHeight,
	                    xAxisPx: flushWithEdge,
	                    rotation: isLTR ? -1 * horizontalRotation : horizontalRotation,
	                    skew: isLTR ? skewDeg : -1 * skewDeg,
	                    xTransformOrigin: isLTR ? tooltipWidth : flushWithEdge,
	                    yTransformOrigin: midpointHeight,
	                    caretCorners: isLTR ? bottomLeftTopRightBorderRadius :
	                        bottomRightTopLeftBorderRadius,
	                };
	            case PositionWithCaret.BOTTOM_SIDE_START:
	                return {
	                    yAlignment: strings$1.BOTTOM,
	                    xAlignment: isLTR ? strings$1.RIGHT : strings$1.LEFT,
	                    yAxisPx: indentedFromEdge,
	                    xAxisPx: flushWithEdge,
	                    rotation: isLTR ? horizontalRotation : -1 * horizontalRotation,
	                    skew: isLTR ? -1 * skewDeg : skewDeg,
	                    xTransformOrigin: isLTR ? tooltipWidth : flushWithEdge,
	                    yTransformOrigin: indentedFromHeight,
	                    caretCorners: isLTR ? bottomRightTopLeftBorderRadius :
	                        bottomLeftTopRightBorderRadius,
	                };
	            case PositionWithCaret.ABOVE_CENTER:
	                return {
	                    yAlignment: strings$1.BOTTOM,
	                    xAlignment: strings$1.LEFT,
	                    yAxisPx: flushWithEdge,
	                    xAxisPx: midpointWidth,
	                    rotation: verticalRotation,
	                    skew: skewDeg,
	                    xTransformOrigin: midpointWidth,
	                    yTransformOrigin: tooltipHeight,
	                    caretCorners: bottomLeftTopRightBorderRadius,
	                };
	            case PositionWithCaret.ABOVE_END:
	                return {
	                    yAlignment: strings$1.BOTTOM,
	                    xAlignment: isLTR ? strings$1.RIGHT : strings$1.LEFT,
	                    yAxisPx: flushWithEdge,
	                    xAxisPx: indentedFromEdge,
	                    rotation: isLTR ? -1 * verticalRotation : verticalRotation,
	                    skew: isLTR ? -1 * skewDeg : skewDeg,
	                    xTransformOrigin: isLTR ? indentedFromWidth : indentedFromEdge,
	                    yTransformOrigin: tooltipHeight,
	                    caretCorners: isLTR ? bottomRightTopLeftBorderRadius :
	                        bottomLeftTopRightBorderRadius,
	                };
	            default:
	            case PositionWithCaret.ABOVE_START:
	                return {
	                    yAlignment: strings$1.BOTTOM,
	                    xAlignment: isLTR ? strings$1.LEFT : strings$1.RIGHT,
	                    yAxisPx: flushWithEdge,
	                    xAxisPx: indentedFromEdge,
	                    rotation: isLTR ? verticalRotation : -1 * verticalRotation,
	                    skew: isLTR ? skewDeg : -1 * skewDeg,
	                    xTransformOrigin: isLTR ? indentedFromEdge : indentedFromWidth,
	                    yTransformOrigin: tooltipHeight,
	                    caretCorners: isLTR ? bottomLeftTopRightBorderRadius :
	                        bottomRightTopLeftBorderRadius,
	                };
	        }
	    };
	    MDCTooltipFoundation.prototype.clearShowTimeout = function () {
	        if (this.showTimeout) {
	            clearTimeout(this.showTimeout);
	            this.showTimeout = null;
	        }
	    };
	    MDCTooltipFoundation.prototype.clearHideTimeout = function () {
	        if (this.hideTimeout) {
	            clearTimeout(this.hideTimeout);
	            this.hideTimeout = null;
	        }
	    };
	    /**
	     * Method that allows user to specify additional elements that should have a
	     * scroll event listener attached to it. This should be used in instances
	     * where the anchor element is placed inside a scrollable container, and will
	     * ensure that the tooltip will stay attached to the anchor on scroll.
	     */
	    MDCTooltipFoundation.prototype.attachScrollHandler = function (addEventListenerFn) {
	        var _this = this;
	        this.addAncestorScrollEventListeners.push(function () {
	            addEventListenerFn('scroll', _this.windowScrollHandler);
	        });
	    };
	    /**
	     * Must be used in conjunction with #attachScrollHandler. Removes the scroll
	     * event handler from elements on the page.
	     */
	    MDCTooltipFoundation.prototype.removeScrollHandler = function (removeEventHandlerFn) {
	        var _this = this;
	        this.removeAncestorScrollEventListeners.push(function () {
	            removeEventHandlerFn('scroll', _this.windowScrollHandler);
	        });
	    };
	    MDCTooltipFoundation.prototype.destroy = function () {
	        var e_8, _a;
	        if (this.frameId) {
	            cancelAnimationFrame(this.frameId);
	            this.frameId = null;
	        }
	        this.clearHideTimeout();
	        this.clearShowTimeout();
	        this.adapter.removeClass(SHOWN);
	        this.adapter.removeClass(SHOWING_TRANSITION);
	        this.adapter.removeClass(SHOWING);
	        this.adapter.removeClass(HIDE);
	        this.adapter.removeClass(HIDE_TRANSITION);
	        if (this.richTooltip) {
	            this.adapter.deregisterEventHandler('focusout', this.richTooltipFocusOutHandler);
	        }
	        if (!this.persistentTooltip) {
	            this.adapter.deregisterEventHandler('mouseenter', this.tooltipMouseEnterHandler);
	            this.adapter.deregisterEventHandler('mouseleave', this.tooltipMouseLeaveHandler);
	        }
	        this.adapter.deregisterAnchorEventHandler('blur', this.anchorBlurHandler);
	        this.adapter.deregisterDocumentEventHandler('click', this.documentClickHandler);
	        this.adapter.deregisterDocumentEventHandler('keydown', this.documentKeydownHandler);
	        this.adapter.deregisterWindowEventHandler('scroll', this.windowScrollHandler);
	        this.adapter.deregisterWindowEventHandler('resize', this.windowResizeHandler);
	        try {
	            for (var _b = __values(this.removeAncestorScrollEventListeners), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var fn = _c.value;
	                fn();
	            }
	        }
	        catch (e_8_1) { e_8 = { error: e_8_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_8) throw e_8.error; }
	        }
	        this.animFrame.cancelAll();
	    };
	    return MDCTooltipFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTooltip = /** @class */ (function (_super) {
	    __extends(MDCTooltip, _super);
	    function MDCTooltip() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTooltip.attachTo = function (root) {
	        return new MDCTooltip(root);
	    };
	    MDCTooltip.prototype.initialize = function () {
	        var tooltipId = this.root.getAttribute('id');
	        if (!tooltipId) {
	            throw new Error('MDCTooltip: Tooltip component must have an id.');
	        }
	        var anchorElem = document.querySelector("[data-tooltip-id=\"" + tooltipId + "\"]") ||
	            document.querySelector("[aria-describedby=\"" + tooltipId + "\"]");
	        if (!anchorElem) {
	            throw new Error('MDCTooltip: Tooltip component requires an anchor element annotated with [aria-describedby] or [data-tooltip-id].');
	        }
	        this.anchorElem = anchorElem;
	    };
	    MDCTooltip.prototype.initialSyncWithDOM = function () {
	        var _this = this;
	        this.isTooltipRich = this.foundation.isRich();
	        this.isTooltipPersistent = this.foundation.isPersistent();
	        this.handleMouseEnter = function () {
	            _this.foundation.handleAnchorMouseEnter();
	        };
	        this.handleFocus = function (evt) {
	            _this.foundation.handleAnchorFocus(evt);
	        };
	        this.handleMouseLeave = function () {
	            _this.foundation.handleAnchorMouseLeave();
	        };
	        this.handleTransitionEnd = function () {
	            _this.foundation.handleTransitionEnd();
	        };
	        this.handleClick = function () {
	            _this.foundation.handleAnchorClick();
	        };
	        this.handleTouchstart = function () {
	            _this.foundation.handleAnchorTouchstart();
	        };
	        this.handleTouchend = function () {
	            _this.foundation.handleAnchorTouchend();
	        };
	        if (this.isTooltipRich && this.isTooltipPersistent) {
	            this.anchorElem.addEventListener('click', this.handleClick);
	        }
	        else {
	            this.anchorElem.addEventListener('mouseenter', this.handleMouseEnter);
	            // TODO(b/157075286): Listening for a 'focus' event is too broad.
	            this.anchorElem.addEventListener('focus', this.handleFocus);
	            this.anchorElem.addEventListener('mouseleave', this.handleMouseLeave);
	            this.anchorElem.addEventListener('touchstart', this.handleTouchstart);
	            this.anchorElem.addEventListener('touchend', this.handleTouchend);
	        }
	        this.listen('transitionend', this.handleTransitionEnd);
	    };
	    MDCTooltip.prototype.destroy = function () {
	        if (this.anchorElem) {
	            if (this.isTooltipRich && this.isTooltipPersistent) {
	                this.anchorElem.removeEventListener('click', this.handleClick);
	            }
	            else {
	                this.anchorElem.removeEventListener('mouseenter', this.handleMouseEnter);
	                this.anchorElem.removeEventListener('focus', this.handleFocus);
	                this.anchorElem.removeEventListener('mouseleave', this.handleMouseLeave);
	                this.anchorElem.removeEventListener('touchstart', this.handleTouchstart);
	                this.anchorElem.removeEventListener('touchend', this.handleTouchend);
	            }
	        }
	        this.unlisten('transitionend', this.handleTransitionEnd);
	        _super.prototype.destroy.call(this);
	    };
	    MDCTooltip.prototype.setTooltipPosition = function (position) {
	        this.foundation.setTooltipPosition(position);
	    };
	    MDCTooltip.prototype.setAnchorBoundaryType = function (type) {
	        this.foundation.setAnchorBoundaryType(type);
	    };
	    MDCTooltip.prototype.setShowDelay = function (delayMs) {
	        this.foundation.setShowDelay(delayMs);
	    };
	    MDCTooltip.prototype.setHideDelay = function (delayMs) {
	        this.foundation.setHideDelay(delayMs);
	    };
	    MDCTooltip.prototype.hide = function () {
	        this.foundation.hide();
	    };
	    MDCTooltip.prototype.isShown = function () {
	        return this.foundation.isShown();
	    };
	    /**
	     * Method that allows user to specify additional elements that should have a
	     * scroll event listener attached to it. This should be used in instances
	     * where the anchor element is placed inside a scrollable container (that is
	     * not the body element), and will ensure that the tooltip will stay attached
	     * to the anchor on scroll.
	     */
	    MDCTooltip.prototype.attachScrollHandler = function (addEventListenerFn) {
	        this.foundation.attachScrollHandler(addEventListenerFn);
	    };
	    /**
	     * Must be used in conjunction with #attachScrollHandler. Removes the scroll
	     * event handler from elements on the page.
	     */
	    MDCTooltip.prototype.removeScrollHandler = function (removeEventHandlerFn) {
	        this.foundation.removeScrollHandler(removeEventHandlerFn);
	    };
	    MDCTooltip.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        var adapter = {
	            getAttribute: function (attr) { return _this.root.getAttribute(attr); },
	            setAttribute: function (attr, value) {
	                _this.root.setAttribute(attr, value);
	            },
	            removeAttribute: function (attr) {
	                _this.root.removeAttribute(attr);
	            },
	            addClass: function (className) {
	                _this.root.classList.add(className);
	            },
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            removeClass: function (className) {
	                _this.root.classList.remove(className);
	            },
	            getComputedStyleProperty: function (propertyName) {
	                return window.getComputedStyle(_this.root).getPropertyValue(propertyName);
	            },
	            setStyleProperty: function (propertyName, value) {
	                _this.root.style.setProperty(propertyName, value);
	            },
	            setSurfaceAnimationStyleProperty: function (propertyName, value) {
	                var surface = _this.root.querySelector("." + CssClasses.SURFACE_ANIMATION);
	                surface === null || surface === void 0 ? void 0 : surface.style.setProperty(propertyName, value);
	            },
	            getViewportWidth: function () { return window.innerWidth; },
	            getViewportHeight: function () { return window.innerHeight; },
	            getTooltipSize: function () {
	                return {
	                    width: _this.root.offsetWidth,
	                    height: _this.root.offsetHeight
	                };
	            },
	            getAnchorBoundingRect: function () {
	                return _this.anchorElem ? _this.anchorElem.getBoundingClientRect() : null;
	            },
	            getParentBoundingRect: function () {
	                var _a, _b;
	                return (_b = (_a = _this.root.parentElement) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) !== null && _b !== void 0 ? _b : null;
	            },
	            getAnchorAttribute: function (attr) {
	                return _this.anchorElem ? _this.anchorElem.getAttribute(attr) : null;
	            },
	            setAnchorAttribute: function (attr, value) {
	                var _a;
	                (_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.setAttribute(attr, value);
	            },
	            isRTL: function () { return getComputedStyle(_this.root).direction === 'rtl'; },
	            anchorContainsElement: function (element) {
	                var _a;
	                return !!((_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.contains(element));
	            },
	            tooltipContainsElement: function (element) {
	                return _this.root.contains(element);
	            },
	            focusAnchorElement: function () {
	                var _a;
	                (_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.focus();
	            },
	            registerEventHandler: function (evt, handler) {
	                if (_this.root instanceof HTMLElement) {
	                    _this.root.addEventListener(evt, handler);
	                }
	            },
	            deregisterEventHandler: function (evt, handler) {
	                if (_this.root instanceof HTMLElement) {
	                    _this.root.removeEventListener(evt, handler);
	                }
	            },
	            registerAnchorEventHandler: function (evt, handler) {
	                var _a;
	                (_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.addEventListener(evt, handler);
	            },
	            deregisterAnchorEventHandler: function (evt, handler) {
	                var _a;
	                (_a = _this.anchorElem) === null || _a === void 0 ? void 0 : _a.removeEventListener(evt, handler);
	            },
	            registerDocumentEventHandler: function (evt, handler) {
	                document.body.addEventListener(evt, handler);
	            },
	            deregisterDocumentEventHandler: function (evt, handler) {
	                document.body.removeEventListener(evt, handler);
	            },
	            registerWindowEventHandler: function (evt, handler) {
	                window.addEventListener(evt, handler);
	            },
	            deregisterWindowEventHandler: function (evt, handler) {
	                window.removeEventListener(evt, handler);
	            },
	            notifyHidden: function () {
	                _this.emit(events.HIDDEN, {});
	            },
	            getTooltipCaretBoundingRect: function () {
	                var caret = _this.root.querySelector("." + CssClasses.TOOLTIP_CARET_TOP);
	                if (!caret) {
	                    return null;
	                }
	                return caret.getBoundingClientRect();
	            },
	            setTooltipCaretStyle: function (propertyName, value) {
	                var topCaret = _this.root.querySelector("." + CssClasses.TOOLTIP_CARET_TOP);
	                var bottomCaret = _this.root.querySelector("." + CssClasses.TOOLTIP_CARET_BOTTOM);
	                if (!topCaret || !bottomCaret) {
	                    return;
	                }
	                topCaret.style.setProperty(propertyName, value);
	                bottomCaret.style.setProperty(propertyName, value);
	            },
	            clearTooltipCaretStyles: function () {
	                var topCaret = _this.root.querySelector("." + CssClasses.TOOLTIP_CARET_TOP);
	                var bottomCaret = _this.root.querySelector("." + CssClasses.TOOLTIP_CARET_BOTTOM);
	                if (!topCaret || !bottomCaret) {
	                    return;
	                }
	                topCaret.removeAttribute('style');
	                bottomCaret.removeAttribute('style');
	            },
	            getActiveElement: function () {
	                return document.activeElement;
	            },
	        };
	        //tslint:enable:object-literal-sort-keys
	        return new MDCTooltipFoundation(adapter);
	    };
	    return MDCTooltip;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2020 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index$1 = {
		__proto__: null,
		MDCTooltip: MDCTooltip,
		MDCTooltipFoundation: MDCTooltipFoundation,
		get CssClasses () { return CssClasses; },
		numbers: numbers$1,
		attributes: attributes,
		events: events,
		get XPosition () { return XPosition; },
		get AnchorBoundaryType () { return AnchorBoundaryType; },
		get YPosition () { return YPosition; },
		strings: strings$1,
		get PositionWithCaret () { return PositionWithCaret; },
		get YPositionWithCaret () { return YPositionWithCaret; },
		get XPositionWithCaret () { return XPositionWithCaret; }
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var cssClasses = {
	    FIXED_CLASS: 'mdc-top-app-bar--fixed',
	    FIXED_SCROLLED_CLASS: 'mdc-top-app-bar--fixed-scrolled',
	    SHORT_CLASS: 'mdc-top-app-bar--short',
	    SHORT_COLLAPSED_CLASS: 'mdc-top-app-bar--short-collapsed',
	    SHORT_HAS_ACTION_ITEM_CLASS: 'mdc-top-app-bar--short-has-action-item',
	};
	var numbers = {
	    DEBOUNCE_THROTTLE_RESIZE_TIME_MS: 100,
	    MAX_TOP_APP_BAR_HEIGHT: 128,
	};
	var strings = {
	    ACTION_ITEM_SELECTOR: '.mdc-top-app-bar__action-item',
	    NAVIGATION_EVENT: 'MDCTopAppBar:nav',
	    NAVIGATION_ICON_SELECTOR: '.mdc-top-app-bar__navigation-icon',
	    ROOT_SELECTOR: '.mdc-top-app-bar',
	    TITLE_SELECTOR: '.mdc-top-app-bar__title',
	};

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTopAppBarBaseFoundation = /** @class */ (function (_super) {
	    __extends(MDCTopAppBarBaseFoundation, _super);
	    /* istanbul ignore next: optional argument is not a branch statement */
	    function MDCTopAppBarBaseFoundation(adapter) {
	        return _super.call(this, __assign(__assign({}, MDCTopAppBarBaseFoundation.defaultAdapter), adapter)) || this;
	    }
	    Object.defineProperty(MDCTopAppBarBaseFoundation, "strings", {
	        get: function () {
	            return strings;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTopAppBarBaseFoundation, "cssClasses", {
	        get: function () {
	            return cssClasses;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTopAppBarBaseFoundation, "numbers", {
	        get: function () {
	            return numbers;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    Object.defineProperty(MDCTopAppBarBaseFoundation, "defaultAdapter", {
	        /**
	         * See {@link MDCTopAppBarAdapter} for typing information on parameters and return types.
	         */
	        get: function () {
	            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	            return {
	                addClass: function () { return undefined; },
	                removeClass: function () { return undefined; },
	                hasClass: function () { return false; },
	                setStyle: function () { return undefined; },
	                getTopAppBarHeight: function () { return 0; },
	                notifyNavigationIconClicked: function () { return undefined; },
	                getViewportScrollY: function () { return 0; },
	                getTotalActionItems: function () { return 0; },
	            };
	            // tslint:enable:object-literal-sort-keys
	        },
	        enumerable: false,
	        configurable: true
	    });
	    /** Other variants of TopAppBar foundation overrides this method */
	    MDCTopAppBarBaseFoundation.prototype.handleTargetScroll = function () { }; // tslint:disable-line:no-empty
	    /** Other variants of TopAppBar foundation overrides this method */
	    MDCTopAppBarBaseFoundation.prototype.handleWindowResize = function () { }; // tslint:disable-line:no-empty
	    MDCTopAppBarBaseFoundation.prototype.handleNavigationClick = function () {
	        this.adapter.notifyNavigationIconClicked();
	    };
	    return MDCTopAppBarBaseFoundation;
	}(MDCFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var INITIAL_VALUE = 0;
	var MDCTopAppBarFoundation = /** @class */ (function (_super) {
	    __extends(MDCTopAppBarFoundation, _super);
	    /* istanbul ignore next: optional argument is not a branch statement */
	    function MDCTopAppBarFoundation(adapter) {
	        var _this = _super.call(this, adapter) || this;
	        /**
	         * Indicates if the top app bar was docked in the previous scroll handler iteration.
	         */
	        _this.wasDocked = true;
	        /**
	         * Indicates if the top app bar is docked in the fully shown position.
	         */
	        _this.isDockedShowing = true;
	        /**
	         * Variable for current scroll position of the top app bar
	         */
	        _this.currentAppBarOffsetTop = 0;
	        /**
	         * Used to prevent the top app bar from being scrolled out of view during resize events
	         */
	        _this.isCurrentlyBeingResized = false;
	        /**
	         * The timeout that's used to throttle the resize events
	         */
	        _this.resizeThrottleId = INITIAL_VALUE;
	        /**
	         * The timeout that's used to debounce toggling the isCurrentlyBeingResized
	         * variable after a resize
	         */
	        _this.resizeDebounceId = INITIAL_VALUE;
	        _this.lastScrollPosition = _this.adapter.getViewportScrollY();
	        _this.topAppBarHeight = _this.adapter.getTopAppBarHeight();
	        return _this;
	    }
	    MDCTopAppBarFoundation.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.adapter.setStyle('top', '');
	    };
	    /**
	     * Scroll handler for the default scroll behavior of the top app bar.
	     * @override
	     */
	    MDCTopAppBarFoundation.prototype.handleTargetScroll = function () {
	        var currentScrollPosition = Math.max(this.adapter.getViewportScrollY(), 0);
	        var diff = currentScrollPosition - this.lastScrollPosition;
	        this.lastScrollPosition = currentScrollPosition;
	        // If the window is being resized the lastScrollPosition needs to be updated
	        // but the current scroll of the top app bar should stay in the same
	        // position.
	        if (!this.isCurrentlyBeingResized) {
	            this.currentAppBarOffsetTop -= diff;
	            if (this.currentAppBarOffsetTop > 0) {
	                this.currentAppBarOffsetTop = 0;
	            }
	            else if (Math.abs(this.currentAppBarOffsetTop) > this.topAppBarHeight) {
	                this.currentAppBarOffsetTop = -this.topAppBarHeight;
	            }
	            this.moveTopAppBar();
	        }
	    };
	    /**
	     * Top app bar resize handler that throttle/debounce functions that execute updates.
	     * @override
	     */
	    MDCTopAppBarFoundation.prototype.handleWindowResize = function () {
	        var _this = this;
	        // Throttle resize events 10 p/s
	        if (!this.resizeThrottleId) {
	            this.resizeThrottleId = setTimeout(function () {
	                _this.resizeThrottleId = INITIAL_VALUE;
	                _this.throttledResizeHandler();
	            }, numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
	        }
	        this.isCurrentlyBeingResized = true;
	        if (this.resizeDebounceId) {
	            clearTimeout(this.resizeDebounceId);
	        }
	        this.resizeDebounceId = setTimeout(function () {
	            _this.handleTargetScroll();
	            _this.isCurrentlyBeingResized = false;
	            _this.resizeDebounceId = INITIAL_VALUE;
	        }, numbers.DEBOUNCE_THROTTLE_RESIZE_TIME_MS);
	    };
	    /**
	     * Function to determine if the DOM needs to update.
	     */
	    MDCTopAppBarFoundation.prototype.checkForUpdate = function () {
	        var offscreenBoundaryTop = -this.topAppBarHeight;
	        var hasAnyPixelsOffscreen = this.currentAppBarOffsetTop < 0;
	        var hasAnyPixelsOnscreen = this.currentAppBarOffsetTop > offscreenBoundaryTop;
	        var partiallyShowing = hasAnyPixelsOffscreen && hasAnyPixelsOnscreen;
	        // If it's partially showing, it can't be docked.
	        if (partiallyShowing) {
	            this.wasDocked = false;
	        }
	        else {
	            // Not previously docked and not partially showing, it's now docked.
	            if (!this.wasDocked) {
	                this.wasDocked = true;
	                return true;
	            }
	            else if (this.isDockedShowing !== hasAnyPixelsOnscreen) {
	                this.isDockedShowing = hasAnyPixelsOnscreen;
	                return true;
	            }
	        }
	        return partiallyShowing;
	    };
	    /**
	     * Function to move the top app bar if needed.
	     */
	    MDCTopAppBarFoundation.prototype.moveTopAppBar = function () {
	        if (this.checkForUpdate()) {
	            // Once the top app bar is fully hidden we use the max potential top app bar height as our offset
	            // so the top app bar doesn't show if the window resizes and the new height > the old height.
	            var offset = this.currentAppBarOffsetTop;
	            if (Math.abs(offset) >= this.topAppBarHeight) {
	                offset = -numbers.MAX_TOP_APP_BAR_HEIGHT;
	            }
	            this.adapter.setStyle('top', offset + 'px');
	        }
	    };
	    /**
	     * Throttled function that updates the top app bar scrolled values if the
	     * top app bar height changes.
	     */
	    MDCTopAppBarFoundation.prototype.throttledResizeHandler = function () {
	        var currentHeight = this.adapter.getTopAppBarHeight();
	        if (this.topAppBarHeight !== currentHeight) {
	            this.wasDocked = false;
	            // Since the top app bar has a different height depending on the screen width, this
	            // will ensure that the top app bar remains in the correct location if
	            // completely hidden and a resize makes the top app bar a different height.
	            this.currentAppBarOffsetTop -= this.topAppBarHeight - currentHeight;
	            this.topAppBarHeight = currentHeight;
	        }
	        this.handleTargetScroll();
	    };
	    return MDCTopAppBarFoundation;
	}(MDCTopAppBarBaseFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCFixedTopAppBarFoundation = /** @class */ (function (_super) {
	    __extends(MDCFixedTopAppBarFoundation, _super);
	    function MDCFixedTopAppBarFoundation() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        /**
	         * State variable for the previous scroll iteration top app bar state
	         */
	        _this.wasScrolled = false;
	        return _this;
	    }
	    /**
	     * Scroll handler for applying/removing the modifier class on the fixed top app bar.
	     * @override
	     */
	    MDCFixedTopAppBarFoundation.prototype.handleTargetScroll = function () {
	        var currentScroll = this.adapter.getViewportScrollY();
	        if (currentScroll <= 0) {
	            if (this.wasScrolled) {
	                this.adapter.removeClass(cssClasses.FIXED_SCROLLED_CLASS);
	                this.wasScrolled = false;
	            }
	        }
	        else {
	            if (!this.wasScrolled) {
	                this.adapter.addClass(cssClasses.FIXED_SCROLLED_CLASS);
	                this.wasScrolled = true;
	            }
	        }
	    };
	    return MDCFixedTopAppBarFoundation;
	}(MDCTopAppBarFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCShortTopAppBarFoundation = /** @class */ (function (_super) {
	    __extends(MDCShortTopAppBarFoundation, _super);
	    /* istanbul ignore next: optional argument is not a branch statement */
	    function MDCShortTopAppBarFoundation(adapter) {
	        var _this = _super.call(this, adapter) || this;
	        _this.collapsed = false;
	        _this.isAlwaysCollapsed = false;
	        return _this;
	    }
	    Object.defineProperty(MDCShortTopAppBarFoundation.prototype, "isCollapsed", {
	        // Public visibility for backward compatibility.
	        get: function () {
	            return this.collapsed;
	        },
	        enumerable: false,
	        configurable: true
	    });
	    MDCShortTopAppBarFoundation.prototype.init = function () {
	        _super.prototype.init.call(this);
	        if (this.adapter.getTotalActionItems() > 0) {
	            this.adapter.addClass(cssClasses.SHORT_HAS_ACTION_ITEM_CLASS);
	        }
	        // If initialized with SHORT_COLLAPSED_CLASS, the bar should always be collapsed
	        this.setAlwaysCollapsed(this.adapter.hasClass(cssClasses.SHORT_COLLAPSED_CLASS));
	    };
	    /**
	     * Set if the short top app bar should always be collapsed.
	     *
	     * @param value When `true`, bar will always be collapsed. When `false`, bar may collapse or expand based on scroll.
	     */
	    MDCShortTopAppBarFoundation.prototype.setAlwaysCollapsed = function (value) {
	        this.isAlwaysCollapsed = !!value;
	        if (this.isAlwaysCollapsed) {
	            this.collapse();
	        }
	        else {
	            // let maybeCollapseBar determine if the bar should be collapsed
	            this.maybeCollapseBar();
	        }
	    };
	    MDCShortTopAppBarFoundation.prototype.getAlwaysCollapsed = function () {
	        return this.isAlwaysCollapsed;
	    };
	    /**
	     * Scroll handler for applying/removing the collapsed modifier class on the short top app bar.
	     * @override
	     */
	    MDCShortTopAppBarFoundation.prototype.handleTargetScroll = function () {
	        this.maybeCollapseBar();
	    };
	    MDCShortTopAppBarFoundation.prototype.maybeCollapseBar = function () {
	        if (this.isAlwaysCollapsed) {
	            return;
	        }
	        var currentScroll = this.adapter.getViewportScrollY();
	        if (currentScroll <= 0) {
	            if (this.collapsed) {
	                this.uncollapse();
	            }
	        }
	        else {
	            if (!this.collapsed) {
	                this.collapse();
	            }
	        }
	    };
	    MDCShortTopAppBarFoundation.prototype.uncollapse = function () {
	        this.adapter.removeClass(cssClasses.SHORT_COLLAPSED_CLASS);
	        this.collapsed = false;
	    };
	    MDCShortTopAppBarFoundation.prototype.collapse = function () {
	        this.adapter.addClass(cssClasses.SHORT_COLLAPSED_CLASS);
	        this.collapsed = true;
	    };
	    return MDCShortTopAppBarFoundation;
	}(MDCTopAppBarBaseFoundation));

	/**
	 * @license
	 * Copyright 2018 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	var MDCTopAppBar = /** @class */ (function (_super) {
	    __extends(MDCTopAppBar, _super);
	    function MDCTopAppBar() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    MDCTopAppBar.attachTo = function (root) {
	        return new MDCTopAppBar(root);
	    };
	    MDCTopAppBar.prototype.initialize = function (rippleFactory) {
	        if (rippleFactory === void 0) { rippleFactory = function (el) { return MDCRipple.attachTo(el); }; }
	        this.navIcon = this.root.querySelector(strings.NAVIGATION_ICON_SELECTOR);
	        // Get all icons in the toolbar and instantiate the ripples
	        var icons = [].slice.call(this.root.querySelectorAll(strings.ACTION_ITEM_SELECTOR));
	        if (this.navIcon) {
	            icons.push(this.navIcon);
	        }
	        this.iconRipples = icons.map(function (icon) {
	            var ripple = rippleFactory(icon);
	            ripple.unbounded = true;
	            return ripple;
	        });
	        this.scrollTarget = window;
	    };
	    MDCTopAppBar.prototype.initialSyncWithDOM = function () {
	        this.handleNavigationClick =
	            this.foundation.handleNavigationClick.bind(this.foundation);
	        this.handleWindowResize =
	            this.foundation.handleWindowResize.bind(this.foundation);
	        this.handleTargetScroll =
	            this.foundation.handleTargetScroll.bind(this.foundation);
	        this.scrollTarget.addEventListener('scroll', this.handleTargetScroll);
	        if (this.navIcon) {
	            this.navIcon.addEventListener('click', this.handleNavigationClick);
	        }
	        var isFixed = this.root.classList.contains(cssClasses.FIXED_CLASS);
	        var isShort = this.root.classList.contains(cssClasses.SHORT_CLASS);
	        if (!isShort && !isFixed) {
	            window.addEventListener('resize', this.handleWindowResize);
	        }
	    };
	    MDCTopAppBar.prototype.destroy = function () {
	        var e_1, _a;
	        try {
	            for (var _b = __values(this.iconRipples), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var iconRipple = _c.value;
	                iconRipple.destroy();
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        this.scrollTarget.removeEventListener('scroll', this.handleTargetScroll);
	        if (this.navIcon) {
	            this.navIcon.removeEventListener('click', this.handleNavigationClick);
	        }
	        var isFixed = this.root.classList.contains(cssClasses.FIXED_CLASS);
	        var isShort = this.root.classList.contains(cssClasses.SHORT_CLASS);
	        if (!isShort && !isFixed) {
	            window.removeEventListener('resize', this.handleWindowResize);
	        }
	        _super.prototype.destroy.call(this);
	    };
	    MDCTopAppBar.prototype.setScrollTarget = function (target) {
	        // Remove scroll handler from the previous scroll target
	        this.scrollTarget.removeEventListener('scroll', this.handleTargetScroll);
	        this.scrollTarget = target;
	        // Initialize scroll handler on the new scroll target
	        this.handleTargetScroll =
	            this.foundation.handleTargetScroll.bind(this.foundation);
	        this.scrollTarget.addEventListener('scroll', this.handleTargetScroll);
	    };
	    MDCTopAppBar.prototype.getDefaultFoundation = function () {
	        var _this = this;
	        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
	        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.
	        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
	        var adapter = {
	            hasClass: function (className) { return _this.root.classList.contains(className); },
	            addClass: function (className) { return _this.root.classList.add(className); },
	            removeClass: function (className) { return _this.root.classList.remove(className); },
	            setStyle: function (property, value) {
	                return _this.root.style.setProperty(property, value);
	            },
	            getTopAppBarHeight: function () { return _this.root.clientHeight; },
	            notifyNavigationIconClicked: function () {
	                return _this.emit(strings.NAVIGATION_EVENT, {});
	            },
	            getViewportScrollY: function () {
	                var win = _this.scrollTarget;
	                var el = _this.scrollTarget;
	                return win.pageYOffset !== undefined ? win.pageYOffset : el.scrollTop;
	            },
	            getTotalActionItems: function () {
	                return _this.root.querySelectorAll(strings.ACTION_ITEM_SELECTOR).length;
	            },
	        };
	        // tslint:enable:object-literal-sort-keys
	        var foundation;
	        if (this.root.classList.contains(cssClasses.SHORT_CLASS)) {
	            foundation = new MDCShortTopAppBarFoundation(adapter);
	        }
	        else if (this.root.classList.contains(cssClasses.FIXED_CLASS)) {
	            foundation = new MDCFixedTopAppBarFoundation(adapter);
	        }
	        else {
	            foundation = new MDCTopAppBarFoundation(adapter);
	        }
	        return foundation;
	    };
	    return MDCTopAppBar;
	}(MDCComponent));

	/**
	 * @license
	 * Copyright 2019 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */

	var index = {
		__proto__: null,
		MDCTopAppBar: MDCTopAppBar,
		cssClasses: cssClasses,
		numbers: numbers,
		strings: strings,
		MDCTopAppBarBaseFoundation: MDCTopAppBarBaseFoundation,
		MDCFixedTopAppBarFoundation: MDCFixedTopAppBarFoundation,
		MDCShortTopAppBarFoundation: MDCShortTopAppBarFoundation,
		MDCTopAppBarFoundation: MDCTopAppBarFoundation
	};

	/**
	 * @license
	 * Copyright 2016 Google Inc.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 */
	// Register all components
	mdcAutoInit.register('MDCBanner', MDCBanner);
	mdcAutoInit.register('MDCCheckbox', MDCCheckbox);
	mdcAutoInit.register('MDCChip', MDCChip);
	mdcAutoInit.register('MDCChipSet', MDCChipSet);
	mdcAutoInit.register('MDCCircularProgress', MDCCircularProgress);
	mdcAutoInit.register('MDCDataTable', MDCDataTable);
	mdcAutoInit.register('MDCDialog', MDCDialog);
	mdcAutoInit.register('MDCDrawer', MDCDrawer);
	mdcAutoInit.register('MDCFloatingLabel', MDCFloatingLabel);
	mdcAutoInit.register('MDCFormField', MDCFormField);
	mdcAutoInit.register('MDCIconButtonToggle', MDCIconButtonToggle);
	mdcAutoInit.register('MDCLineRipple', MDCLineRipple);
	mdcAutoInit.register('MDCLinearProgress', MDCLinearProgress);
	mdcAutoInit.register('MDCList', MDCList);
	mdcAutoInit.register('MDCMenu', MDCMenu);
	mdcAutoInit.register('MDCMenuSurface', MDCMenuSurface);
	mdcAutoInit.register('MDCNotchedOutline', MDCNotchedOutline);
	mdcAutoInit.register('MDCRadio', MDCRadio);
	mdcAutoInit.register('MDCRipple', MDCRipple);
	mdcAutoInit.register('MDCSegmentedButton', MDCSegmentedButton);
	mdcAutoInit.register('MDCSelect', MDCSelect);
	mdcAutoInit.register('MDCSlider', MDCSlider);
	mdcAutoInit.register('MDCSnackbar', MDCSnackbar);
	mdcAutoInit.register('MDCSwitch', MDCSwitch);
	mdcAutoInit.register('MDCTabBar', MDCTabBar);
	mdcAutoInit.register('MDCTextField', MDCTextField);
	mdcAutoInit.register('MDCTooltip', MDCTooltip);
	mdcAutoInit.register('MDCTopAppBar', MDCTopAppBar);

	var components = {
		__proto__: null,
		autoInit: mdcAutoInit,
		banner: index$w,
		base: index$v,
		checkbox: index$u,
		chips: index$t,
		circularProgress: index$s,
		dataTable: index$r,
		dialog: index$q,
		dom: index$p,
		drawer: index$o,
		floatingLabel: index$n,
		formField: index$m,
		iconButton: index$l,
		lineRipple: index$k,
		linearProgress: index$j,
		list: index$i,
		menu: index$g,
		menuSurface: index$h,
		notchedOutline: index$f,
		radio: index$e,
		ripple: index$d,
		segmentedButton: index$c,
		select: index$b,
		slider: index$a,
		snackbar: index$9,
		switchControl: index$7,
		tab: index$3,
		tabBar: index$6,
		tabIndicator: index$5,
		tabScroller: index$4,
		textField: index$2,
		tooltip: index$1,
		topAppBar: index
	};

	const MDC = {};

	for (const prop in components) {
		const re = new RegExp('^MDC' + prop + '$', 'i');
		for (const lib in components[prop]) {
			if (lib.match(re)) {
				MDC[lib] = components[prop][lib];
			}
		}
	}

	class Reaper extends Sargasso {
		constructor (element, options) {
			super(element, {});
			this.MDCClassName = options.MDCThing.constructor.name;
			this.setMetaData(this.MDCClassName, options.MDCThing);
		}

		destroy () {
			const thing = this.getMetaData(this.MDCClassName);
			this.setMetaData(this.MDCClassName, null);
			if (thing && thing.destroy) {
				thing.destroy();
			}
			super.destroy();
		}
	}

	utils$1.registerSargassoClass('Reaper', Reaper);

	class TropicBird extends Sargasso {
		constructor (element, options = {}) {
			options.watchDOM = true;
			super(element, options);
			this.topAppBar = null;
			this.drawer = null;
			this.snackBar = null;
			this.snackBarTimer = null;
			this.snackBarQueue = [];
			this.linearProgress = null;
			this.linearProgressTimer = null;
			this.linearProgressOpen = false;
			this.manageMDCInstances();
		}

		DOMChanged (root) {
			this.manageMDCInstances(root);
		}

		makeEphemeral () {
			if (!document.getElementById('ephemeral')) {
				const ephemeral = document.createElement('div');
				ephemeral.setAttribute('id', 'ephemeral');
				document.body.append(ephemeral);
			}
		}

		dialog (target, title, content, canCancel) {
			this.makeEphemeral();
			const template = document.querySelector(target).outerHTML;
			document.getElementById('ephemeral').innerHTML = template;
			const dialogContainer = document.getElementById('ephemeral').getElementsByClassName('mdc-dialog')[0];
			const titleContainer = dialogContainer.getElementsByClassName('mdc-dialog__title')[0];
			const contentContainer = dialogContainer.getElementsByClassName('mdc-dialog__content')[0];
			const cancelButton = dialogContainer.getElementsByClassName('mdc-dialog-cancel')[0];

			titleContainer.textContent = title;
			contentContainer.textContent = content;
			if (canCancel) {
				cancelButton.style.display = 'flex';
			} else {
				cancelButton.style.display = 'none';
			}

			return new Promise((resolve, reject) => {
				this.mdcDialog = new MDCDialog(dialogContainer);
				this.mdcDialog.listen('MDCDialog:closed', (e) => {
					utils$1.elementTools.removeClass(document.body, 'modal-open');
					document.getElementById('ephemeral').getElementsByClassName('mdc-dialog')[0].remove();
					resolve(e.detail.action);
				});
				utils$1.elementTools.addClass(document.body, 'modal-open');
				this.mdcDialog.open();
			})
		}

		progressBar (show, delay = 500) {
			if (show === true) {
				if (this.linearProgressTimer) {
					clearTimeout(this.linearProgressTimer);
					this.linearProgressTimer = null;
				}
				this.linearProgressTimer = setTimeout(() => {
					this.linearProgressTimer = null;
					this.linearProgress.open();
					this.linearProgressOpen = true;
				}, delay);
			} else {
				if (this.linearProgressTimer) {
					clearTimeout(this.linearProgressTimer);
					this.linearProgressTimer = null;
				}
				if (this.linearProgressOpen) {
					this.linearProgress.close();
					this.linearProgressOpen = false;
				}
			}
		}

		pushSnackBar (level, message, timer = 6000) {
			this.snackBarQueue.push({
				level: level,
				message: message,
				timer: timer
			});

			if (!this.snackBarTimer) {
				this.popSnackBar();
			}
		}

		popSnackBar () {
			const item = this.snackBarQueue.shift();

			const elem = document.querySelector('.mdc-snackbar__label');
			if (!elem || !this.snackBar) {
				confirm(item.message);
				if (this.snackBarQueue.length) {
					this.popSnackBar();
				}
			} else {
				elem.innerText = item.message;

				this.snackBar.open();

				this.snackBarTimer = setTimeout(() => {
					this.snackBarTimer = null;
					this.snackBar.close();
					if (this.snackBarQueue.length) {
						this.popSnackBar();
					}
				}, item.timer);
			}
		}

		manageMDCInstances (root = document) {
			const managedClasses = [
				'.mdc-top-app-bar',
				'.mdc-drawer',
				'.mdc-snackbar',
				'.mdc-linear-progress',
				'.mdc-text-field',
				'.mdc-select',
				'.mdc-switch',
				'.mdc-chip-set',
				'.mdc-fab',
				'.mdc-button',
				'.mdc-tab-bar',
				'.mdc-tab-scroller'
			];

			const wantRipple = [
				'mdc-fab',
				'mdc-button'
			];

			const elements = root.querySelectorAll(managedClasses.join(','));
			for (let i = 0; i < elements.length; i++) {
				const element = elements[i];
				if (!utils$1.elementTools.hasClass(element, 'mdc-instantiated')) {
					utils$1.elementTools.addClass(element, 'mdc-instantiated');

					if (utils$1.elementTools.hasClass(element, 'mdc-top-app-bar')) {
						this.topAppBar = new MDCTopAppBar(element);
						const r = new Reaper(element, {
							MDCThing: this.topAppBar
						});
						r.start();
					}

					if (utils$1.elementTools.hasClass(element, 'mdc-drawer')) {
						this.drawer = new MDCDrawer(element);
						const r = new Reaper(element, {
							MDCThing: this.drawer
						});
						r.start();

						// close the drawer on any click
						element.onclick = (e) => {
							this.drawer.open = !this.drawer.open;
						};

						// close the drawer when click outside drawer
						const scrim = document.querySelector('.mdc-drawer-scrim');
						if (scrim) {
							scrim.onclick = (e) => {
								e.preventDefault();
								this.drawer.open = !this.drawer.open;
							};
						}
					}

					if (utils$1.elementTools.hasClass(element, 'mdc-snackbar')) {
						this.snackBar = new MDCSnackbar(element);
						const r = new Reaper(element, {
							MDCThing: this.snackBar
						});
						r.start();
					}

					if (utils$1.elementTools.hasClass(element, 'mdc-linear-progress')) {
						this.linearProgress = new MDCLinearProgress(element);
						const r = new Reaper(element, {
							MDCThing: this.linearProgress
						});
						r.start();
					}

					if (utils$1.elementTools.hasClass(element, 'mdc-text-field')) {
						const thing = new MDCTextField(element);
						const r = new Reaper(element, {
							MDCThing: thing
						});
						r.start();
					}

					if (utils$1.elementTools.hasClass(element, 'mdc-select')) {
						const thing = new MDCSelect(element);
						const r = new Reaper(element, {
							MDCThing: thing
						});
						r.start();
					}

					if (utils$1.elementTools.hasClass(element, 'mdc-switch')) {
						const thing = new MDCSwitch(element);
						const r = new Reaper(element, {
							MDCThing: thing
						});
						r.start();
					}

					if (utils$1.elementTools.hasClass(element, 'mdc-chip-set')) {
						const thing = new MDCChipSet(element);
						const r = new Reaper(element, {
							MDCThing: thing
						});
						r.start();
					}

					if (utils$1.elementTools.hasClass(element, 'mdc-tab-bar')) {
						const thing = new MDCTabBar(element);
						const r = new Reaper(element, {
							MDCThing: thing
						});
						r.start();
					}

					if (utils$1.elementTools.hasClass(element, 'mdc-tab-scroller')) {
						const thing = new MDCTabScroller(element);
						const r = new Reaper(element, {
							MDCThing: thing
						});
						r.start();
					}

					for (let j = 0; j < wantRipple.length; j++) {
						if (utils$1.elementTools.hasClass(element, wantRipple[j])) {
							const thing = new MDCRipple(element);
							const r = new Reaper(element, {
								MDCThing: thing
							});
							r.start();
						}
					}
				}
			}

			// toggle the drawer when hamburger clicked
			const hamburger = document.querySelector('.hamburger');
			if (hamburger) {
				hamburger.onclick = (e) => {
					e.preventDefault();
					this.drawer.open = !this.drawer.open;
				};
			}
		}
	}

	utils$1.registerSargassoClass('TropicBird', TropicBird);

	/* 	Made in Barbados 🇧🇧 Copyright © 2020-2021 Michael Rhodes */

	class FlyingFish extends Sargasso {
		constructor (element, options = {}) {
			super(element, {
				watchViewport: true
			});
			this.triggered = false;
		}

		enterViewport () {
			if (!this.triggered) {
				this.triggered = true;

				const offload = `onmessage = async (e) => {
				const response = await fetch(e.data.url)
				const contentType = response.headers.get('content-type');
				const blob = await response.blob()
				self.postMessage({ uid: e.data.uid, blob: blob, contentType: contentType})
			}`;

				this.workerStart('FlyingFish', offload);

				let imgUrl = this.element.getAttribute('data-src');

				// not fully qualified...
				if (!imgUrl.match(/^http/)) {
					imgUrl = new URL(imgUrl, location.href).href;
				}

				// hand the url to the worker for loading
				this.workerPostMessage('FlyingFish', {
					url: imgUrl
				});
			}
		}

		// we got a message back from a worker
		workerOnMessage (id, data) {
			if (id === 'FlyingFish') {
				this.blobURL = URL.createObjectURL(data.blob);
				const frame = () => {
					if (this.element.tagName === 'IMG') {
						this.element.setAttribute('src', this.blobURL);
					} else {
						this.element.style.backgroundImage = 'url(' + this.blobURL + ')';
					}
					this.addClass('flying-fish-loaded');
					this.element.dispatchEvent(new CustomEvent('sargasso-flying-fish-loaded'));
					this.sleep(); // We're done. That was easy.
				};
				this.queueFrame(frame);
			}
			super.workerOnMessage(id, data);
		}

		destroy () {
			if (this.blobURL) {
				URL.revokeObjectURL(this.blobURL);
			}
			super.destroy();
		}
	}

	utils$1.registerSargassoClass('FlyingFish', FlyingFish);

	/**
		@PelagicCreatures/FlyingFish

		Sargasso class that implements lazy loaded images using background-image
		css properties or the src attribute on an IMG tag. Image is loaded using
		a web worker and the DOM is updated in an Animation Frame for optimal
		performance.

		@author Michael Rhodes
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020-2021 Michael Rhodes

	**/

	/**
		@PelagicCreatures/MolaMola

		@author Michael Rhodes
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020-2021 Michael Rhodes
	**/

	const registeredHelperClasses = {};
	const registerHelperClass = (className, object) => {
		registeredHelperClasses[className] = object;
	};

	class MolaMolaHelper {
		constructor (form) {
			this.form = form;
		}

		// override these methods as needed
		pose () {} // pose form

		/*
			preFlight: about to submit this.form.payload to endpoint
			return a promise for any async behavior (like recAPTCHA defined in MolaMolaHelpers.hs)
			throw an error to prevent submit
		*/
		preFlight () {}

		// 200 or 422 response all is well deal with response payload
		success (data) {}

		// can be result of preFlight or from endpoint
		error (err) {}

		// cleanup
		destroy () {}
	}

	/**
		@PelagicCreatures/MolaMola

		@author Michael Rhodes
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020-2021 Michael Rhodes
	**/

	class ReCAPTCHAv3Helper extends MolaMolaHelper {
		constructor (form) {
			super(form);
			this.recaptcha = this.form.element.getAttribute('data-recaptcha');
		}

		pose () {
			utils$1.elementTools.addClass(document.body, 'show-recaptcha', this);
		}

		preFlight () {
			return new Promise((resolve, reject) => {
				try {
					grecaptcha.execute(this.recaptcha, {
						action: 'social'
					}).then((token) => {
						this.form.payload['g-recaptcha-response'] = token;
						resolve();
					});
				} catch (err) {
					reject(err || new Error('reCaptchaV3 network error')); // OK google... network errors come back empty.
				}
			})
		}

		destroy () {
			utils$1.elementTools.removeClass(document.body, 'show-recaptcha');
		}
	}

	registerHelperClass('ReCAPTCHAv3Helper', ReCAPTCHAv3Helper);

	class SubmitterHelper extends MolaMolaHelper {
		constructor (form) {
			super(form);
			this.submitter = this.form.element.querySelector(this.form.element.getAttribute('data-submitter'));
			this.submitterContent = this.submitter.innerHTML;
			this.submitter.style.width = this.submitter.width;
			this.submitter.setAttribute('disabled', true);
		}

		preFlight () {
			this.disableSubmit();
		}

		success (data) {
			this.enableSubmit();
		}

		error (err) {
			this.enableSubmit();
		}

		disableSubmit () {
			this.submitter.setAttribute('disabled', true);
			this.submitter.innerHTML = 'working...';
		}

		enableSubmit () {
			this.submitter.removeAttribute('disabled');
			this.submitter.innerHTML = this.submitterContent;
		}
	}

	registerHelperClass('SubmitterHelper', SubmitterHelper);

	class StatusHelper extends MolaMolaHelper {
		constructor (form) {
			super(form);
			this.status = this.form.element.querySelector(this.form.element.getAttribute('data-status'));
		}

		error (err) {
			const errors = [];
			if (err) {
				errors.push(err.message);
			}
			if (err.statusCode) {
				errors.push('http status ' + err.statusCode);
			}
			this.status.innerHTML = errors.join(',');
		}
	}

	registerHelperClass('StatusHelper', StatusHelper);

	var validator = {exports: {}};

	var toDate$1 = {exports: {}};

	var assertString$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = assertString;

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function assertString(input) {
		  var isString = typeof input === 'string' || input instanceof String;

		  if (!isString) {
		    var invalidType = _typeof(input);

		    if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;
		    throw new TypeError("Expected a string but received a ".concat(invalidType));
		  }
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (assertString$1, assertString$1.exports));

	var assertString = /*@__PURE__*/getDefaultExportFromCjs(assertString$1.exports);

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = toDate;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function toDate(date) {
		  (0, _assertString.default)(date);
		  date = Date.parse(date);
		  return !isNaN(date) ? new Date(date) : null;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (toDate$1, toDate$1.exports));

	var toDate = /*@__PURE__*/getDefaultExportFromCjs(toDate$1.exports);

	var toFloat$1 = {exports: {}};

	var isFloat$1 = {};

	var alpha$1 = {};

	"use strict";

	Object.defineProperty(alpha$1, "__esModule", {
	  value: true
	});
	var commaDecimal_1 = alpha$1.commaDecimal = dotDecimal_1 = alpha$1.dotDecimal = farsiLocales_1 = alpha$1.farsiLocales = arabicLocales_1 = alpha$1.arabicLocales = englishLocales_1 = alpha$1.englishLocales = decimal_1 = alpha$1.decimal = alphanumeric_1 = alpha$1.alphanumeric = alpha_2 = alpha$1.alpha = void 0;
	var alpha = {
	  'en-US': /^[A-Z]+$/i,
	  'az-AZ': /^[A-VXYZÇƏĞİıÖŞÜ]+$/i,
	  'bg-BG': /^[А-Я]+$/i,
	  'cs-CZ': /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
	  'da-DK': /^[A-ZÆØÅ]+$/i,
	  'de-DE': /^[A-ZÄÖÜß]+$/i,
	  'el-GR': /^[Α-ώ]+$/i,
	  'es-ES': /^[A-ZÁÉÍÑÓÚÜ]+$/i,
	  'fa-IR': /^[ابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$/i,
	  'fi-FI': /^[A-ZÅÄÖ]+$/i,
	  'fr-FR': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
	  'it-IT': /^[A-ZÀÉÈÌÎÓÒÙ]+$/i,
	  'nb-NO': /^[A-ZÆØÅ]+$/i,
	  'nl-NL': /^[A-ZÁÉËÏÓÖÜÚ]+$/i,
	  'nn-NO': /^[A-ZÆØÅ]+$/i,
	  'hu-HU': /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
	  'pl-PL': /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
	  'pt-PT': /^[A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,
	  'ru-RU': /^[А-ЯЁ]+$/i,
	  'sl-SI': /^[A-ZČĆĐŠŽ]+$/i,
	  'sk-SK': /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
	  'sr-RS@latin': /^[A-ZČĆŽŠĐ]+$/i,
	  'sr-RS': /^[А-ЯЂЈЉЊЋЏ]+$/i,
	  'sv-SE': /^[A-ZÅÄÖ]+$/i,
	  'th-TH': /^[ก-๐\s]+$/i,
	  'tr-TR': /^[A-ZÇĞİıÖŞÜ]+$/i,
	  'uk-UA': /^[А-ЩЬЮЯЄIЇҐі]+$/i,
	  'vi-VN': /^[A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,
	  'ku-IQ': /^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
	  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,
	  he: /^[א-ת]+$/,
	  fa: /^['آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی']+$/i,
	  'hi-IN': /^[\u0900-\u0961]+[\u0972-\u097F]*$/i
	};
	var alpha_2 = alpha$1.alpha = alpha;
	var alphanumeric = {
	  'en-US': /^[0-9A-Z]+$/i,
	  'az-AZ': /^[0-9A-VXYZÇƏĞİıÖŞÜ]+$/i,
	  'bg-BG': /^[0-9А-Я]+$/i,
	  'cs-CZ': /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
	  'da-DK': /^[0-9A-ZÆØÅ]+$/i,
	  'de-DE': /^[0-9A-ZÄÖÜß]+$/i,
	  'el-GR': /^[0-9Α-ω]+$/i,
	  'es-ES': /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,
	  'fi-FI': /^[0-9A-ZÅÄÖ]+$/i,
	  'fr-FR': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
	  'it-IT': /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,
	  'hu-HU': /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
	  'nb-NO': /^[0-9A-ZÆØÅ]+$/i,
	  'nl-NL': /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,
	  'nn-NO': /^[0-9A-ZÆØÅ]+$/i,
	  'pl-PL': /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
	  'pt-PT': /^[0-9A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,
	  'ru-RU': /^[0-9А-ЯЁ]+$/i,
	  'sl-SI': /^[0-9A-ZČĆĐŠŽ]+$/i,
	  'sk-SK': /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
	  'sr-RS@latin': /^[0-9A-ZČĆŽŠĐ]+$/i,
	  'sr-RS': /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,
	  'sv-SE': /^[0-9A-ZÅÄÖ]+$/i,
	  'th-TH': /^[ก-๙\s]+$/i,
	  'tr-TR': /^[0-9A-ZÇĞİıÖŞÜ]+$/i,
	  'uk-UA': /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,
	  'ku-IQ': /^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
	  'vi-VN': /^[0-9A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,
	  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,
	  he: /^[0-9א-ת]+$/,
	  fa: /^['0-9آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی۱۲۳۴۵۶۷۸۹۰']+$/i,
	  'hi-IN': /^[\u0900-\u0963]+[\u0966-\u097F]*$/i
	};
	var alphanumeric_1 = alpha$1.alphanumeric = alphanumeric;
	var decimal = {
	  'en-US': '.',
	  ar: '٫'
	};
	var decimal_1 = alpha$1.decimal = decimal;
	var englishLocales = ['AU', 'GB', 'HK', 'IN', 'NZ', 'ZA', 'ZM'];
	var englishLocales_1 = alpha$1.englishLocales = englishLocales;

	for (var locale, i = 0; i < englishLocales.length; i++) {
	  locale = "en-".concat(englishLocales[i]);
	  alpha[locale] = alpha['en-US'];
	  alphanumeric[locale] = alphanumeric['en-US'];
	  decimal[locale] = decimal['en-US'];
	} // Source: http://www.localeplanet.com/java/


	var arabicLocales = ['AE', 'BH', 'DZ', 'EG', 'IQ', 'JO', 'KW', 'LB', 'LY', 'MA', 'QM', 'QA', 'SA', 'SD', 'SY', 'TN', 'YE'];
	var arabicLocales_1 = alpha$1.arabicLocales = arabicLocales;

	for (var _locale, _i = 0; _i < arabicLocales.length; _i++) {
	  _locale = "ar-".concat(arabicLocales[_i]);
	  alpha[_locale] = alpha.ar;
	  alphanumeric[_locale] = alphanumeric.ar;
	  decimal[_locale] = decimal.ar;
	}

	var farsiLocales = ['IR', 'AF'];
	var farsiLocales_1 = alpha$1.farsiLocales = farsiLocales;

	for (var _locale2, _i2 = 0; _i2 < farsiLocales.length; _i2++) {
	  _locale2 = "fa-".concat(farsiLocales[_i2]);
	  alphanumeric[_locale2] = alphanumeric.fa;
	  decimal[_locale2] = decimal.ar;
	} // Source: https://en.wikipedia.org/wiki/Decimal_mark


	var dotDecimal = ['ar-EG', 'ar-LB', 'ar-LY'];
	var dotDecimal_1 = alpha$1.dotDecimal = dotDecimal;
	var commaDecimal = ['bg-BG', 'cs-CZ', 'da-DK', 'de-DE', 'el-GR', 'en-ZM', 'es-ES', 'fr-CA', 'fr-FR', 'id-ID', 'it-IT', 'ku-IQ', 'hi-IN', 'hu-HU', 'nb-NO', 'nn-NO', 'nl-NL', 'pl-PL', 'pt-PT', 'ru-RU', 'sl-SI', 'sr-RS@latin', 'sr-RS', 'sv-SE', 'tr-TR', 'uk-UA', 'vi-VN'];
	commaDecimal_1 = alpha$1.commaDecimal = commaDecimal;

	for (var _i3 = 0; _i3 < dotDecimal.length; _i3++) {
	  decimal[dotDecimal[_i3]] = decimal['en-US'];
	}

	for (var _i4 = 0; _i4 < commaDecimal.length; _i4++) {
	  decimal[commaDecimal[_i4]] = ',';
	}

	alpha['fr-CA'] = alpha['fr-FR'];
	alphanumeric['fr-CA'] = alphanumeric['fr-FR'];
	alpha['pt-BR'] = alpha['pt-PT'];
	alphanumeric['pt-BR'] = alphanumeric['pt-PT'];
	decimal['pt-BR'] = decimal['pt-PT']; // see #862

	alpha['pl-Pl'] = alpha['pl-PL'];
	alphanumeric['pl-Pl'] = alphanumeric['pl-PL'];
	decimal['pl-Pl'] = decimal['pl-PL']; // see #1455

	alpha['fa-AF'] = alpha.fa;

	"use strict";

	Object.defineProperty(isFloat$1, "__esModule", {
	  value: true
	});
	var _default$a = isFloat$1.default = isFloat;
	var locales_1$5 = isFloat$1.locales = void 0;

	var _assertString$a = _interopRequireDefault$a(assertString$1.exports);

	var _alpha$2 = alpha$1;

	function _interopRequireDefault$a(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isFloat(str, options) {
	  (0, _assertString$a.default)(str);
	  options = options || {};
	  var float = new RegExp("^(?:[-+])?(?:[0-9]+)?(?:\\".concat(options.locale ? _alpha$2.decimal[options.locale] : '.', "[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$"));

	  if (str === '' || str === '.' || str === '-' || str === '+') {
	    return false;
	  }

	  var value = parseFloat(str.replace(',', '.'));
	  return float.test(str) && (!options.hasOwnProperty('min') || value >= options.min) && (!options.hasOwnProperty('max') || value <= options.max) && (!options.hasOwnProperty('lt') || value < options.lt) && (!options.hasOwnProperty('gt') || value > options.gt);
	}

	var locales$5 = Object.keys(_alpha$2.decimal);
	locales_1$5 = isFloat$1.locales = locales$5;

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = toFloat;

		var _isFloat = _interopRequireDefault(isFloat$1);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function toFloat(str) {
		  if (!(0, _isFloat.default)(str)) return NaN;
		  return parseFloat(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (toFloat$1, toFloat$1.exports));

	var toFloat = /*@__PURE__*/getDefaultExportFromCjs(toFloat$1.exports);

	var toInt$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = toInt;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function toInt(str, radix) {
		  (0, _assertString.default)(str);
		  return parseInt(str, radix || 10);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (toInt$1, toInt$1.exports));

	var toInt = /*@__PURE__*/getDefaultExportFromCjs(toInt$1.exports);

	var toBoolean$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = toBoolean;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function toBoolean(str, strict) {
		  (0, _assertString.default)(str);

		  if (strict) {
		    return str === '1' || /^true$/i.test(str);
		  }

		  return str !== '0' && !/^false$/i.test(str) && str !== '';
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (toBoolean$1, toBoolean$1.exports));

	var toBoolean = /*@__PURE__*/getDefaultExportFromCjs(toBoolean$1.exports);

	var equals$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = equals;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function equals(str, comparison) {
		  (0, _assertString.default)(str);
		  return str === comparison;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (equals$1, equals$1.exports));

	var equals = /*@__PURE__*/getDefaultExportFromCjs(equals$1.exports);

	var contains$1 = {exports: {}};

	var toString$2 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = toString;

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function toString(input) {
		  if (_typeof(input) === 'object' && input !== null) {
		    if (typeof input.toString === 'function') {
		      input = input.toString();
		    } else {
		      input = '[object Object]';
		    }
		  } else if (input === null || typeof input === 'undefined' || isNaN(input) && !input.length) {
		    input = '';
		  }

		  return String(input);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (toString$2, toString$2.exports));

	var toString$1 = /*@__PURE__*/getDefaultExportFromCjs(toString$2.exports);

	var merge$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = merge;

		function merge() {
		  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		  var defaults = arguments.length > 1 ? arguments[1] : undefined;

		  for (var key in defaults) {
		    if (typeof obj[key] === 'undefined') {
		      obj[key] = defaults[key];
		    }
		  }

		  return obj;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (merge$1, merge$1.exports));

	var merge = /*@__PURE__*/getDefaultExportFromCjs(merge$1.exports);

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = contains;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _toString = _interopRequireDefault(toString$2.exports);

		var _merge = _interopRequireDefault(merge$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var defaulContainsOptions = {
		  ignoreCase: false,
		  minOccurrences: 1
		};

		function contains(str, elem, options) {
		  (0, _assertString.default)(str);
		  options = (0, _merge.default)(options, defaulContainsOptions);

		  if (options.ignoreCase) {
		    return str.toLowerCase().split((0, _toString.default)(elem).toLowerCase()).length > options.minOccurrences;
		  }

		  return str.split((0, _toString.default)(elem)).length > options.minOccurrences;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (contains$1, contains$1.exports));

	var contains = /*@__PURE__*/getDefaultExportFromCjs(contains$1.exports);

	var matches$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = matches;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function matches(str, pattern, modifiers) {
		  (0, _assertString.default)(str);

		  if (Object.prototype.toString.call(pattern) !== '[object RegExp]') {
		    pattern = new RegExp(pattern, modifiers);
		  }

		  return pattern.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (matches$1, matches$1.exports));

	var matches = /*@__PURE__*/getDefaultExportFromCjs(matches$1.exports);

	var isEmail$1 = {exports: {}};

	var isByteLength$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isByteLength;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		/* eslint-disable prefer-rest-params */
		function isByteLength(str, options) {
		  (0, _assertString.default)(str);
		  var min;
		  var max;

		  if (_typeof(options) === 'object') {
		    min = options.min || 0;
		    max = options.max;
		  } else {
		    // backwards compatibility: isByteLength(str, min [, max])
		    min = arguments[1];
		    max = arguments[2];
		  }

		  var len = encodeURI(str).split(/%..|./).length - 1;
		  return len >= min && (typeof max === 'undefined' || len <= max);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isByteLength$1, isByteLength$1.exports));

	var isByteLength = /*@__PURE__*/getDefaultExportFromCjs(isByteLength$1.exports);

	var isFQDN$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isFQDN;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _merge = _interopRequireDefault(merge$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var default_fqdn_options = {
		  require_tld: true,
		  allow_underscores: false,
		  allow_trailing_dot: false,
		  allow_numeric_tld: false,
		  allow_wildcard: false
		};

		function isFQDN(str, options) {
		  (0, _assertString.default)(str);
		  options = (0, _merge.default)(options, default_fqdn_options);
		  /* Remove the optional trailing dot before checking validity */

		  if (options.allow_trailing_dot && str[str.length - 1] === '.') {
		    str = str.substring(0, str.length - 1);
		  }
		  /* Remove the optional wildcard before checking validity */


		  if (options.allow_wildcard === true && str.indexOf('*.') === 0) {
		    str = str.substring(2);
		  }

		  var parts = str.split('.');
		  var tld = parts[parts.length - 1];

		  if (options.require_tld) {
		    // disallow fqdns without tld
		    if (parts.length < 2) {
		      return false;
		    }

		    if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
		      return false;
		    } // disallow spaces


		    if (/\s/.test(tld)) {
		      return false;
		    }
		  } // reject numeric TLDs


		  if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
		    return false;
		  }

		  return parts.every(function (part) {
		    if (part.length > 63) {
		      return false;
		    }

		    if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
		      return false;
		    } // disallow full-width chars


		    if (/[\uff01-\uff5e]/.test(part)) {
		      return false;
		    } // disallow parts starting or ending with hyphen


		    if (/^-|-$/.test(part)) {
		      return false;
		    }

		    if (!options.allow_underscores && /_/.test(part)) {
		      return false;
		    }

		    return true;
		  });
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isFQDN$1, isFQDN$1.exports));

	var isFQDN = /*@__PURE__*/getDefaultExportFromCjs(isFQDN$1.exports);

	var isIP$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isIP;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/**
		11.3.  Examples

		   The following addresses

		             fe80::1234 (on the 1st link of the node)
		             ff02::5678 (on the 5th link of the node)
		             ff08::9abc (on the 10th organization of the node)

		   would be represented as follows:

		             fe80::1234%1
		             ff02::5678%5
		             ff08::9abc%10

		   (Here we assume a natural translation from a zone index to the
		   <zone_id> part, where the Nth zone of any scope is translated into
		   "N".)

		   If we use interface names as <zone_id>, those addresses could also be
		   represented as follows:

		            fe80::1234%ne0
		            ff02::5678%pvc1.3
		            ff08::9abc%interface10

		   where the interface "ne0" belongs to the 1st link, "pvc1.3" belongs
		   to the 5th link, and "interface10" belongs to the 10th organization.
		 * * */
		var IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
		var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
		var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
		var IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';
		var IPv6AddressRegExp = new RegExp('^(' + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ')(%[0-9a-zA-Z-.:]{1,})?$');

		function isIP(str) {
		  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
		  (0, _assertString.default)(str);
		  version = String(version);

		  if (!version) {
		    return isIP(str, 4) || isIP(str, 6);
		  }

		  if (version === '4') {
		    if (!IPv4AddressRegExp.test(str)) {
		      return false;
		    }

		    var parts = str.split('.').sort(function (a, b) {
		      return a - b;
		    });
		    return parts[3] <= 255;
		  }

		  if (version === '6') {
		    return !!IPv6AddressRegExp.test(str);
		  }

		  return false;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isIP$1, isIP$1.exports));

	var isIP = /*@__PURE__*/getDefaultExportFromCjs(isIP$1.exports);

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isEmail;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _merge = _interopRequireDefault(merge$1.exports);

		var _isByteLength = _interopRequireDefault(isByteLength$1.exports);

		var _isFQDN = _interopRequireDefault(isFQDN$1.exports);

		var _isIP = _interopRequireDefault(isIP$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var default_email_options = {
		  allow_display_name: false,
		  require_display_name: false,
		  allow_utf8_local_part: true,
		  require_tld: true,
		  blacklisted_chars: '',
		  ignore_max_length: false,
		  host_blacklist: []
		};
		/* eslint-disable max-len */

		/* eslint-disable no-control-regex */

		var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
		var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
		var gmailUserPart = /^[a-z\d]+$/;
		var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
		var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
		var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
		var defaultMaxEmailLength = 254;
		/* eslint-enable max-len */

		/* eslint-enable no-control-regex */

		/**
		 * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2
		 * @param {String} display_name
		 */

		function validateDisplayName(display_name) {
		  var display_name_without_quotes = display_name.replace(/^"(.+)"$/, '$1'); // display name with only spaces is not valid

		  if (!display_name_without_quotes.trim()) {
		    return false;
		  } // check whether display name contains illegal character


		  var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);

		  if (contains_illegal) {
		    // if contains illegal characters,
		    // must to be enclosed in double-quotes, otherwise it's not a valid display name
		    if (display_name_without_quotes === display_name) {
		      return false;
		    } // the quotes in display name must start with character symbol \


		    var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;

		    if (!all_start_with_back_slash) {
		      return false;
		    }
		  }

		  return true;
		}

		function isEmail(str, options) {
		  (0, _assertString.default)(str);
		  options = (0, _merge.default)(options, default_email_options);

		  if (options.require_display_name || options.allow_display_name) {
		    var display_email = str.match(splitNameAddress);

		    if (display_email) {
		      var display_name = display_email[1]; // Remove display name and angle brackets to get email address
		      // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)

		      str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name
		      // because there may be a space between display name and email address
		      // eg. myname <address@gmail.com>
		      // the display name is `myname` instead of `myname `, so need to trim the last space

		      if (display_name.endsWith(' ')) {
		        display_name = display_name.substr(0, display_name.length - 1);
		      }

		      if (!validateDisplayName(display_name)) {
		        return false;
		      }
		    } else if (options.require_display_name) {
		      return false;
		    }
		  }

		  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
		    return false;
		  }

		  var parts = str.split('@');
		  var domain = parts.pop();
		  var lower_domain = domain.toLowerCase();

		  if (options.host_blacklist.includes(lower_domain)) {
		    return false;
		  }

		  var user = parts.join('@');

		  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
		    /*
		      Previously we removed dots for gmail addresses before validating.
		      This was removed because it allows `multiple..dots@gmail.com`
		      to be reported as valid, but it is not.
		      Gmail only normalizes single dots, removing them from here is pointless,
		      should be done in normalizeEmail
		    */
		    user = user.toLowerCase(); // Removing sub-address from username before gmail validation

		    var username = user.split('+')[0]; // Dots are not included in gmail length restriction

		    if (!(0, _isByteLength.default)(username.replace(/\./g, ''), {
		      min: 6,
		      max: 30
		    })) {
		      return false;
		    }

		    var _user_parts = username.split('.');

		    for (var i = 0; i < _user_parts.length; i++) {
		      if (!gmailUserPart.test(_user_parts[i])) {
		        return false;
		      }
		    }
		  }

		  if (options.ignore_max_length === false && (!(0, _isByteLength.default)(user, {
		    max: 64
		  }) || !(0, _isByteLength.default)(domain, {
		    max: 254
		  }))) {
		    return false;
		  }

		  if (!(0, _isFQDN.default)(domain, {
		    require_tld: options.require_tld
		  })) {
		    if (!options.allow_ip_domain) {
		      return false;
		    }

		    if (!(0, _isIP.default)(domain)) {
		      if (!domain.startsWith('[') || !domain.endsWith(']')) {
		        return false;
		      }

		      var noBracketdomain = domain.substr(1, domain.length - 2);

		      if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {
		        return false;
		      }
		    }
		  }

		  if (user[0] === '"') {
		    user = user.slice(1, user.length - 1);
		    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
		  }

		  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
		  var user_parts = user.split('.');

		  for (var _i = 0; _i < user_parts.length; _i++) {
		    if (!pattern.test(user_parts[_i])) {
		      return false;
		    }
		  }

		  if (options.blacklisted_chars) {
		    if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), 'g')) !== -1) return false;
		  }

		  return true;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isEmail$1, isEmail$1.exports));

	var isEmail = /*@__PURE__*/getDefaultExportFromCjs(isEmail$1.exports);

	var isURL$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isURL;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _isFQDN = _interopRequireDefault(isFQDN$1.exports);

		var _isIP = _interopRequireDefault(isIP$1.exports);

		var _merge = _interopRequireDefault(merge$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

		function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

		function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

		/*
		options for isURL method

		require_protocol - if set as true isURL will return false if protocol is not present in the URL
		require_valid_protocol - isURL will check if the URL's protocol is present in the protocols option
		protocols - valid protocols can be modified with this option
		require_host - if set as false isURL will not check if host is present in the URL
		require_port - if set as true isURL will check if port is present in the URL
		allow_protocol_relative_urls - if set as true protocol relative URLs will be allowed
		validate_length - if set as false isURL will skip string length validation (IE maximum is 2083)

		*/
		var default_url_options = {
		  protocols: ['http', 'https', 'ftp'],
		  require_tld: true,
		  require_protocol: false,
		  require_host: true,
		  require_port: false,
		  require_valid_protocol: true,
		  allow_underscores: false,
		  allow_trailing_dot: false,
		  allow_protocol_relative_urls: false,
		  allow_fragments: true,
		  allow_query_components: true,
		  validate_length: true
		};
		var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

		function isRegExp(obj) {
		  return Object.prototype.toString.call(obj) === '[object RegExp]';
		}

		function checkHost(host, matches) {
		  for (var i = 0; i < matches.length; i++) {
		    var match = matches[i];

		    if (host === match || isRegExp(match) && match.test(host)) {
		      return true;
		    }
		  }

		  return false;
		}

		function isURL(url, options) {
		  (0, _assertString.default)(url);

		  if (!url || /[\s<>]/.test(url)) {
		    return false;
		  }

		  if (url.indexOf('mailto:') === 0) {
		    return false;
		  }

		  options = (0, _merge.default)(options, default_url_options);

		  if (options.validate_length && url.length >= 2083) {
		    return false;
		  }

		  if (!options.allow_fragments && url.includes('#')) {
		    return false;
		  }

		  if (!options.allow_query_components && (url.includes('?') || url.includes('&'))) {
		    return false;
		  }

		  var protocol, auth, host, hostname, port, port_str, split, ipv6;
		  split = url.split('#');
		  url = split.shift();
		  split = url.split('?');
		  url = split.shift();
		  split = url.split('://');

		  if (split.length > 1) {
		    protocol = split.shift().toLowerCase();

		    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
		      return false;
		    }
		  } else if (options.require_protocol) {
		    return false;
		  } else if (url.substr(0, 2) === '//') {
		    if (!options.allow_protocol_relative_urls) {
		      return false;
		    }

		    split[0] = url.substr(2);
		  }

		  url = split.join('://');

		  if (url === '') {
		    return false;
		  }

		  split = url.split('/');
		  url = split.shift();

		  if (url === '' && !options.require_host) {
		    return true;
		  }

		  split = url.split('@');

		  if (split.length > 1) {
		    if (options.disallow_auth) {
		      return false;
		    }

		    if (split[0] === '') {
		      return false;
		    }

		    auth = split.shift();

		    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
		      return false;
		    }

		    var _auth$split = auth.split(':'),
		        _auth$split2 = _slicedToArray(_auth$split, 2),
		        user = _auth$split2[0],
		        password = _auth$split2[1];

		    if (user === '' && password === '') {
		      return false;
		    }
		  }

		  hostname = split.join('@');
		  port_str = null;
		  ipv6 = null;
		  var ipv6_match = hostname.match(wrapped_ipv6);

		  if (ipv6_match) {
		    host = '';
		    ipv6 = ipv6_match[1];
		    port_str = ipv6_match[2] || null;
		  } else {
		    split = hostname.split(':');
		    host = split.shift();

		    if (split.length) {
		      port_str = split.join(':');
		    }
		  }

		  if (port_str !== null && port_str.length > 0) {
		    port = parseInt(port_str, 10);

		    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
		      return false;
		    }
		  } else if (options.require_port) {
		    return false;
		  }

		  if (options.host_whitelist) {
		    return checkHost(host, options.host_whitelist);
		  }

		  if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {
		    return false;
		  }

		  host = host || ipv6;

		  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
		    return false;
		  }

		  return true;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isURL$1, isURL$1.exports));

	var isURL = /*@__PURE__*/getDefaultExportFromCjs(isURL$1.exports);

	var isMACAddress$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isMACAddress;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var macAddress = /^(?:[0-9a-fA-F]{2}([-:\s]))([0-9a-fA-F]{2}\1){4}([0-9a-fA-F]{2})$/;
		var macAddressNoSeparators = /^([0-9a-fA-F]){12}$/;
		var macAddressWithDots = /^([0-9a-fA-F]{4}\.){2}([0-9a-fA-F]{4})$/;

		function isMACAddress(str, options) {
		  (0, _assertString.default)(str);
		  /**
		   * @deprecated `no_colons` TODO: remove it in the next major
		  */

		  if (options && (options.no_colons || options.no_separators)) {
		    return macAddressNoSeparators.test(str);
		  }

		  return macAddress.test(str) || macAddressWithDots.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isMACAddress$1, isMACAddress$1.exports));

	var isMACAddress = /*@__PURE__*/getDefaultExportFromCjs(isMACAddress$1.exports);

	var isIPRange$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isIPRange;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _isIP = _interopRequireDefault(isIP$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var subnetMaybe = /^\d{1,3}$/;
		var v4Subnet = 32;
		var v6Subnet = 128;

		function isIPRange(str) {
		  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
		  (0, _assertString.default)(str);
		  var parts = str.split('/'); // parts[0] -> ip, parts[1] -> subnet

		  if (parts.length !== 2) {
		    return false;
		  }

		  if (!subnetMaybe.test(parts[1])) {
		    return false;
		  } // Disallow preceding 0 i.e. 01, 02, ...


		  if (parts[1].length > 1 && parts[1].startsWith('0')) {
		    return false;
		  }

		  var isValidIP = (0, _isIP.default)(parts[0], version);

		  if (!isValidIP) {
		    return false;
		  } // Define valid subnet according to IP's version


		  var expectedSubnet = null;

		  switch (String(version)) {
		    case '4':
		      expectedSubnet = v4Subnet;
		      break;

		    case '6':
		      expectedSubnet = v6Subnet;
		      break;

		    default:
		      expectedSubnet = (0, _isIP.default)(parts[0], '6') ? v6Subnet : v4Subnet;
		  }

		  return parts[1] <= expectedSubnet && parts[1] >= 0;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isIPRange$1, isIPRange$1.exports));

	var isIPRange = /*@__PURE__*/getDefaultExportFromCjs(isIPRange$1.exports);

	var isDate$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isDate;

		var _merge = _interopRequireDefault(merge$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

		function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

		function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

		function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		var default_date_options = {
		  format: 'YYYY/MM/DD',
		  delimiters: ['/', '-'],
		  strictMode: false
		};

		function isValidFormat(format) {
		  return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
		}

		function zip(date, format) {
		  var zippedArr = [],
		      len = Math.min(date.length, format.length);

		  for (var i = 0; i < len; i++) {
		    zippedArr.push([date[i], format[i]]);
		  }

		  return zippedArr;
		}

		function isDate(input, options) {
		  if (typeof options === 'string') {
		    // Allow backward compatbility for old format isDate(input [, format])
		    options = (0, _merge.default)({
		      format: options
		    }, default_date_options);
		  } else {
		    options = (0, _merge.default)(options, default_date_options);
		  }

		  if (typeof input === 'string' && isValidFormat(options.format)) {
		    var formatDelimiter = options.delimiters.find(function (delimiter) {
		      return options.format.indexOf(delimiter) !== -1;
		    });
		    var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function (delimiter) {
		      return input.indexOf(delimiter) !== -1;
		    });
		    var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
		    var dateObj = {};

		    var _iterator = _createForOfIteratorHelper(dateAndFormat),
		        _step;

		    try {
		      for (_iterator.s(); !(_step = _iterator.n()).done;) {
		        var _step$value = _slicedToArray(_step.value, 2),
		            dateWord = _step$value[0],
		            formatWord = _step$value[1];

		        if (dateWord.length !== formatWord.length) {
		          return false;
		        }

		        dateObj[formatWord.charAt(0)] = dateWord;
		      }
		    } catch (err) {
		      _iterator.e(err);
		    } finally {
		      _iterator.f();
		    }

		    return new Date("".concat(dateObj.m, "/").concat(dateObj.d, "/").concat(dateObj.y)).getDate() === +dateObj.d;
		  }

		  if (!options.strictMode) {
		    return Object.prototype.toString.call(input) === '[object Date]' && isFinite(input);
		  }

		  return false;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isDate$1, isDate$1.exports));

	var isDate = /*@__PURE__*/getDefaultExportFromCjs(isDate$1.exports);

	var isBoolean$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isBoolean;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var defaultOptions = {
		  loose: false
		};
		var strictBooleans = ['true', 'false', '1', '0'];
		var looseBooleans = [].concat(strictBooleans, ['yes', 'no']);

		function isBoolean(str) {
		  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
		  (0, _assertString.default)(str);

		  if (options.loose) {
		    return looseBooleans.includes(str.toLowerCase());
		  }

		  return strictBooleans.includes(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isBoolean$1, isBoolean$1.exports));

	var isBoolean = /*@__PURE__*/getDefaultExportFromCjs(isBoolean$1.exports);

	var isLocale$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isLocale;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var localeReg = /^[A-Za-z]{2,4}([_-]([A-Za-z]{4}|[\d]{3}))?([_-]([A-Za-z]{2}|[\d]{3}))?$/;

		function isLocale(str) {
		  (0, _assertString.default)(str);

		  if (str === 'en_US_POSIX' || str === 'ca_ES_VALENCIA') {
		    return true;
		  }

		  return localeReg.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isLocale$1, isLocale$1.exports));

	var isLocale = /*@__PURE__*/getDefaultExportFromCjs(isLocale$1.exports);

	var isAlpha$1 = {};

	"use strict";

	Object.defineProperty(isAlpha$1, "__esModule", {
	  value: true
	});
	var _default$9 = isAlpha$1.default = isAlpha;
	var locales_1$4 = isAlpha$1.locales = void 0;

	var _assertString$9 = _interopRequireDefault$9(assertString$1.exports);

	var _alpha$1 = alpha$1;

	function _interopRequireDefault$9(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isAlpha(_str) {
	  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
	  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  (0, _assertString$9.default)(_str);
	  var str = _str;
	  var ignore = options.ignore;

	  if (ignore) {
	    if (ignore instanceof RegExp) {
	      str = str.replace(ignore, '');
	    } else if (typeof ignore === 'string') {
	      str = str.replace(new RegExp("[".concat(ignore.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g, '\\$&'), "]"), 'g'), ''); // escape regex for ignore
	    } else {
	      throw new Error('ignore should be instance of a String or RegExp');
	    }
	  }

	  if (locale in _alpha$1.alpha) {
	    return _alpha$1.alpha[locale].test(str);
	  }

	  throw new Error("Invalid locale '".concat(locale, "'"));
	}

	var locales$4 = Object.keys(_alpha$1.alpha);
	locales_1$4 = isAlpha$1.locales = locales$4;

	var isAlphanumeric$1 = {};

	"use strict";

	Object.defineProperty(isAlphanumeric$1, "__esModule", {
	  value: true
	});
	var _default$8 = isAlphanumeric$1.default = isAlphanumeric;
	var locales_1$3 = isAlphanumeric$1.locales = void 0;

	var _assertString$8 = _interopRequireDefault$8(assertString$1.exports);

	var _alpha = alpha$1;

	function _interopRequireDefault$8(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isAlphanumeric(_str) {
	  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
	  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  (0, _assertString$8.default)(_str);
	  var str = _str;
	  var ignore = options.ignore;

	  if (ignore) {
	    if (ignore instanceof RegExp) {
	      str = str.replace(ignore, '');
	    } else if (typeof ignore === 'string') {
	      str = str.replace(new RegExp("[".concat(ignore.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g, '\\$&'), "]"), 'g'), ''); // escape regex for ignore
	    } else {
	      throw new Error('ignore should be instance of a String or RegExp');
	    }
	  }

	  if (locale in _alpha.alphanumeric) {
	    return _alpha.alphanumeric[locale].test(str);
	  }

	  throw new Error("Invalid locale '".concat(locale, "'"));
	}

	var locales$3 = Object.keys(_alpha.alphanumeric);
	locales_1$3 = isAlphanumeric$1.locales = locales$3;

	var isNumeric$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isNumeric;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _alpha = alpha$1;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var numericNoSymbols = /^[0-9]+$/;

		function isNumeric(str, options) {
		  (0, _assertString.default)(str);

		  if (options && options.no_symbols) {
		    return numericNoSymbols.test(str);
		  }

		  return new RegExp("^[+-]?([0-9]*[".concat((options || {}).locale ? _alpha.decimal[options.locale] : '.', "])?[0-9]+$")).test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isNumeric$1, isNumeric$1.exports));

	var isNumeric = /*@__PURE__*/getDefaultExportFromCjs(isNumeric$1.exports);

	var isPassportNumber$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isPassportNumber;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/**
		 * Reference:
		 * https://en.wikipedia.org/ -- Wikipedia
		 * https://docs.microsoft.com/en-us/microsoft-365/compliance/eu-passport-number -- EU Passport Number
		 * https://countrycode.org/ -- Country Codes
		 */
		var passportRegexByCountryCode = {
		  AM: /^[A-Z]{2}\d{7}$/,
		  // ARMENIA
		  AR: /^[A-Z]{3}\d{6}$/,
		  // ARGENTINA
		  AT: /^[A-Z]\d{7}$/,
		  // AUSTRIA
		  AU: /^[A-Z]\d{7}$/,
		  // AUSTRALIA
		  BE: /^[A-Z]{2}\d{6}$/,
		  // BELGIUM
		  BG: /^\d{9}$/,
		  // BULGARIA
		  BR: /^[A-Z]{2}\d{6}$/,
		  // BRAZIL
		  BY: /^[A-Z]{2}\d{7}$/,
		  // BELARUS
		  CA: /^[A-Z]{2}\d{6}$/,
		  // CANADA
		  CH: /^[A-Z]\d{7}$/,
		  // SWITZERLAND
		  CN: /^G\d{8}$|^E(?![IO])[A-Z0-9]\d{7}$/,
		  // CHINA [G=Ordinary, E=Electronic] followed by 8-digits, or E followed by any UPPERCASE letter (except I and O) followed by 7 digits
		  CY: /^[A-Z](\d{6}|\d{8})$/,
		  // CYPRUS
		  CZ: /^\d{8}$/,
		  // CZECH REPUBLIC
		  DE: /^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,
		  // GERMANY
		  DK: /^\d{9}$/,
		  // DENMARK
		  DZ: /^\d{9}$/,
		  // ALGERIA
		  EE: /^([A-Z]\d{7}|[A-Z]{2}\d{7})$/,
		  // ESTONIA (K followed by 7-digits), e-passports have 2 UPPERCASE followed by 7 digits
		  ES: /^[A-Z0-9]{2}([A-Z0-9]?)\d{6}$/,
		  // SPAIN
		  FI: /^[A-Z]{2}\d{7}$/,
		  // FINLAND
		  FR: /^\d{2}[A-Z]{2}\d{5}$/,
		  // FRANCE
		  GB: /^\d{9}$/,
		  // UNITED KINGDOM
		  GR: /^[A-Z]{2}\d{7}$/,
		  // GREECE
		  HR: /^\d{9}$/,
		  // CROATIA
		  HU: /^[A-Z]{2}(\d{6}|\d{7})$/,
		  // HUNGARY
		  IE: /^[A-Z0-9]{2}\d{7}$/,
		  // IRELAND
		  IN: /^[A-Z]{1}-?\d{7}$/,
		  // INDIA
		  ID: /^[A-C]\d{7}$/,
		  // INDONESIA
		  IR: /^[A-Z]\d{8}$/,
		  // IRAN
		  IS: /^(A)\d{7}$/,
		  // ICELAND
		  IT: /^[A-Z0-9]{2}\d{7}$/,
		  // ITALY
		  JP: /^[A-Z]{2}\d{7}$/,
		  // JAPAN
		  KR: /^[MS]\d{8}$/,
		  // SOUTH KOREA, REPUBLIC OF KOREA, [S=PS Passports, M=PM Passports]
		  LT: /^[A-Z0-9]{8}$/,
		  // LITHUANIA
		  LU: /^[A-Z0-9]{8}$/,
		  // LUXEMBURG
		  LV: /^[A-Z0-9]{2}\d{7}$/,
		  // LATVIA
		  LY: /^[A-Z0-9]{8}$/,
		  // LIBYA
		  MT: /^\d{7}$/,
		  // MALTA
		  MZ: /^([A-Z]{2}\d{7})|(\d{2}[A-Z]{2}\d{5})$/,
		  // MOZAMBIQUE
		  MY: /^[AHK]\d{8}$/,
		  // MALAYSIA
		  NL: /^[A-Z]{2}[A-Z0-9]{6}\d$/,
		  // NETHERLANDS
		  PL: /^[A-Z]{2}\d{7}$/,
		  // POLAND
		  PT: /^[A-Z]\d{6}$/,
		  // PORTUGAL
		  RO: /^\d{8,9}$/,
		  // ROMANIA
		  RU: /^\d{9}$/,
		  // RUSSIAN FEDERATION
		  SE: /^\d{8}$/,
		  // SWEDEN
		  SL: /^(P)[A-Z]\d{7}$/,
		  // SLOVANIA
		  SK: /^[0-9A-Z]\d{7}$/,
		  // SLOVAKIA
		  TR: /^[A-Z]\d{8}$/,
		  // TURKEY
		  UA: /^[A-Z]{2}\d{6}$/,
		  // UKRAINE
		  US: /^\d{9}$/ // UNITED STATES

		};
		/**
		 * Check if str is a valid passport number
		 * relative to provided ISO Country Code.
		 *
		 * @param {string} str
		 * @param {string} countryCode
		 * @return {boolean}
		 */

		function isPassportNumber(str, countryCode) {
		  (0, _assertString.default)(str);
		  /** Remove All Whitespaces, Convert to UPPERCASE */

		  var normalizedStr = str.replace(/\s/g, '').toUpperCase();
		  return countryCode.toUpperCase() in passportRegexByCountryCode && passportRegexByCountryCode[countryCode].test(normalizedStr);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isPassportNumber$1, isPassportNumber$1.exports));

	var isPassportNumber = /*@__PURE__*/getDefaultExportFromCjs(isPassportNumber$1.exports);

	var isPort$1 = {exports: {}};

	var isInt$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isInt;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;
		var intLeadingZeroes = /^[-+]?[0-9]+$/;

		function isInt(str, options) {
		  (0, _assertString.default)(str);
		  options = options || {}; // Get the regex to use for testing, based on whether
		  // leading zeroes are allowed or not.

		  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? int : intLeadingZeroes; // Check min/max/lt/gt

		  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;
		  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;
		  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;
		  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;
		  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isInt$1, isInt$1.exports));

	var isInt = /*@__PURE__*/getDefaultExportFromCjs(isInt$1.exports);

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isPort;

		var _isInt = _interopRequireDefault(isInt$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isPort(str) {
		  return (0, _isInt.default)(str, {
		    min: 0,
		    max: 65535
		  });
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isPort$1, isPort$1.exports));

	var isPort = /*@__PURE__*/getDefaultExportFromCjs(isPort$1.exports);

	var isLowercase$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isLowercase;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isLowercase(str) {
		  (0, _assertString.default)(str);
		  return str === str.toLowerCase();
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isLowercase$1, isLowercase$1.exports));

	var isLowercase = /*@__PURE__*/getDefaultExportFromCjs(isLowercase$1.exports);

	var isUppercase$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isUppercase;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isUppercase(str) {
		  (0, _assertString.default)(str);
		  return str === str.toUpperCase();
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isUppercase$1, isUppercase$1.exports));

	var isUppercase = /*@__PURE__*/getDefaultExportFromCjs(isUppercase$1.exports);

	var isIMEI$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isIMEI;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var imeiRegexWithoutHypens = /^[0-9]{15}$/;
		var imeiRegexWithHypens = /^\d{2}-\d{6}-\d{6}-\d{1}$/;

		function isIMEI(str, options) {
		  (0, _assertString.default)(str);
		  options = options || {}; // default regex for checking imei is the one without hyphens

		  var imeiRegex = imeiRegexWithoutHypens;

		  if (options.allow_hyphens) {
		    imeiRegex = imeiRegexWithHypens;
		  }

		  if (!imeiRegex.test(str)) {
		    return false;
		  }

		  str = str.replace(/-/g, '');
		  var sum = 0,
		      mul = 2,
		      l = 14;

		  for (var i = 0; i < l; i++) {
		    var digit = str.substring(l - i - 1, l - i);
		    var tp = parseInt(digit, 10) * mul;

		    if (tp >= 10) {
		      sum += tp % 10 + 1;
		    } else {
		      sum += tp;
		    }

		    if (mul === 1) {
		      mul += 1;
		    } else {
		      mul -= 1;
		    }
		  }

		  var chk = (10 - sum % 10) % 10;

		  if (chk !== parseInt(str.substring(14, 15), 10)) {
		    return false;
		  }

		  return true;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isIMEI$1, isIMEI$1.exports));

	var isIMEI = /*@__PURE__*/getDefaultExportFromCjs(isIMEI$1.exports);

	var isAscii$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isAscii;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/* eslint-disable no-control-regex */
		var ascii = /^[\x00-\x7F]+$/;
		/* eslint-enable no-control-regex */

		function isAscii(str) {
		  (0, _assertString.default)(str);
		  return ascii.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isAscii$1, isAscii$1.exports));

	var isAscii = /*@__PURE__*/getDefaultExportFromCjs(isAscii$1.exports);

	var isFullWidth$1 = {};

	"use strict";

	Object.defineProperty(isFullWidth$1, "__esModule", {
	  value: true
	});
	var _default$7 = isFullWidth$1.default = isFullWidth;
	var fullWidth_1 = isFullWidth$1.fullWidth = void 0;

	var _assertString$7 = _interopRequireDefault$7(assertString$1.exports);

	function _interopRequireDefault$7(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var fullWidth = /[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
	fullWidth_1 = isFullWidth$1.fullWidth = fullWidth;

	function isFullWidth(str) {
	  (0, _assertString$7.default)(str);
	  return fullWidth.test(str);
	}

	var isHalfWidth$1 = {};

	"use strict";

	Object.defineProperty(isHalfWidth$1, "__esModule", {
	  value: true
	});
	var _default$6 = isHalfWidth$1.default = isHalfWidth;
	var halfWidth_1 = isHalfWidth$1.halfWidth = void 0;

	var _assertString$6 = _interopRequireDefault$6(assertString$1.exports);

	function _interopRequireDefault$6(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var halfWidth = /[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
	halfWidth_1 = isHalfWidth$1.halfWidth = halfWidth;

	function isHalfWidth(str) {
	  (0, _assertString$6.default)(str);
	  return halfWidth.test(str);
	}

	var isVariableWidth$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isVariableWidth;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _isFullWidth = isFullWidth$1;

		var _isHalfWidth = isHalfWidth$1;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isVariableWidth(str) {
		  (0, _assertString.default)(str);
		  return _isFullWidth.fullWidth.test(str) && _isHalfWidth.halfWidth.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isVariableWidth$1, isVariableWidth$1.exports));

	var isVariableWidth = /*@__PURE__*/getDefaultExportFromCjs(isVariableWidth$1.exports);

	var isMultibyte$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isMultibyte;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/* eslint-disable no-control-regex */
		var multibyte = /[^\x00-\x7F]/;
		/* eslint-enable no-control-regex */

		function isMultibyte(str) {
		  (0, _assertString.default)(str);
		  return multibyte.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isMultibyte$1, isMultibyte$1.exports));

	var isMultibyte = /*@__PURE__*/getDefaultExportFromCjs(isMultibyte$1.exports);

	var isSemVer$1 = {exports: {}};

	var multilineRegex$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = multilineRegexp;

		/**
		 * Build RegExp object from an array
		 * of multiple/multi-line regexp parts
		 *
		 * @param {string[]} parts
		 * @param {string} flags
		 * @return {object} - RegExp object
		 */
		function multilineRegexp(parts, flags) {
		  var regexpAsStringLiteral = parts.join('');
		  return new RegExp(regexpAsStringLiteral, flags);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (multilineRegex$1, multilineRegex$1.exports));

	var multilineRegex = /*@__PURE__*/getDefaultExportFromCjs(multilineRegex$1.exports);

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isSemVer;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _multilineRegex = _interopRequireDefault(multilineRegex$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/**
		 * Regular Expression to match
		 * semantic versioning (SemVer)
		 * built from multi-line, multi-parts regexp
		 * Reference: https://semver.org/
		 */
		var semanticVersioningRegex = (0, _multilineRegex.default)(['^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)', '(?:-((?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*))*))', '?(?:\\+([0-9a-z-]+(?:\\.[0-9a-z-]+)*))?$'], 'i');

		function isSemVer(str) {
		  (0, _assertString.default)(str);
		  return semanticVersioningRegex.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isSemVer$1, isSemVer$1.exports));

	var isSemVer = /*@__PURE__*/getDefaultExportFromCjs(isSemVer$1.exports);

	var isSurrogatePair$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isSurrogatePair;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var surrogatePair = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;

		function isSurrogatePair(str) {
		  (0, _assertString.default)(str);
		  return surrogatePair.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isSurrogatePair$1, isSurrogatePair$1.exports));

	var isSurrogatePair = /*@__PURE__*/getDefaultExportFromCjs(isSurrogatePair$1.exports);

	var isDecimal$1 = {exports: {}};

	var includes$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = void 0;

		var includes = function includes(arr, val) {
		  return arr.some(function (arrVal) {
		    return val === arrVal;
		  });
		};

		var _default = includes;
		exports.default = _default;
		module.exports = exports.default;
		module.exports.default = exports.default;
	} (includes$1, includes$1.exports));

	var includes = /*@__PURE__*/getDefaultExportFromCjs(includes$1.exports);

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isDecimal;

		var _merge = _interopRequireDefault(merge$1.exports);

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _includes = _interopRequireDefault(includes$1.exports);

		var _alpha = alpha$1;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function decimalRegExp(options) {
		  var regExp = new RegExp("^[-+]?([0-9]+)?(\\".concat(_alpha.decimal[options.locale], "[0-9]{").concat(options.decimal_digits, "})").concat(options.force_decimal ? '' : '?', "$"));
		  return regExp;
		}

		var default_decimal_options = {
		  force_decimal: false,
		  decimal_digits: '1,',
		  locale: 'en-US'
		};
		var blacklist = ['', '-', '+'];

		function isDecimal(str, options) {
		  (0, _assertString.default)(str);
		  options = (0, _merge.default)(options, default_decimal_options);

		  if (options.locale in _alpha.decimal) {
		    return !(0, _includes.default)(blacklist, str.replace(/ /g, '')) && decimalRegExp(options).test(str);
		  }

		  throw new Error("Invalid locale '".concat(options.locale, "'"));
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isDecimal$1, isDecimal$1.exports));

	var isDecimal = /*@__PURE__*/getDefaultExportFromCjs(isDecimal$1.exports);

	var isHexadecimal$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isHexadecimal;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var hexadecimal = /^(0x|0h)?[0-9A-F]+$/i;

		function isHexadecimal(str) {
		  (0, _assertString.default)(str);
		  return hexadecimal.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isHexadecimal$1, isHexadecimal$1.exports));

	var isHexadecimal = /*@__PURE__*/getDefaultExportFromCjs(isHexadecimal$1.exports);

	var isOctal$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isOctal;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var octal = /^(0o)?[0-7]+$/i;

		function isOctal(str) {
		  (0, _assertString.default)(str);
		  return octal.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isOctal$1, isOctal$1.exports));

	var isOctal = /*@__PURE__*/getDefaultExportFromCjs(isOctal$1.exports);

	var isDivisibleBy$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isDivisibleBy;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _toFloat = _interopRequireDefault(toFloat$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isDivisibleBy(str, num) {
		  (0, _assertString.default)(str);
		  return (0, _toFloat.default)(str) % parseInt(num, 10) === 0;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isDivisibleBy$1, isDivisibleBy$1.exports));

	var isDivisibleBy = /*@__PURE__*/getDefaultExportFromCjs(isDivisibleBy$1.exports);

	var isHexColor$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isHexColor;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i;

		function isHexColor(str) {
		  (0, _assertString.default)(str);
		  return hexcolor.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isHexColor$1, isHexColor$1.exports));

	var isHexColor = /*@__PURE__*/getDefaultExportFromCjs(isHexColor$1.exports);

	var isRgbColor$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isRgbColor;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var rgbColor = /^rgb\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\)$/;
		var rgbaColor = /^rgba\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)$/;
		var rgbColorPercent = /^rgb\((([0-9]%|[1-9][0-9]%|100%),){2}([0-9]%|[1-9][0-9]%|100%)\)/;
		var rgbaColorPercent = /^rgba\((([0-9]%|[1-9][0-9]%|100%),){3}(0?\.\d|1(\.0)?|0(\.0)?)\)/;

		function isRgbColor(str) {
		  var includePercentValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
		  (0, _assertString.default)(str);

		  if (!includePercentValues) {
		    return rgbColor.test(str) || rgbaColor.test(str);
		  }

		  return rgbColor.test(str) || rgbaColor.test(str) || rgbColorPercent.test(str) || rgbaColorPercent.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isRgbColor$1, isRgbColor$1.exports));

	var isRgbColor = /*@__PURE__*/getDefaultExportFromCjs(isRgbColor$1.exports);

	var isHSL$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isHSL;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var hslComma = /^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(,(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}(,((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?))?\)$/i;
		var hslSpace = /^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(\s(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}\s?(\/\s((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?)\s?)?\)$/i;

		function isHSL(str) {
		  (0, _assertString.default)(str); // Strip duplicate spaces before calling the validation regex (See  #1598 for more info)

		  var strippedStr = str.replace(/\s+/g, ' ').replace(/\s?(hsla?\(|\)|,)\s?/ig, '$1');

		  if (strippedStr.indexOf(',') !== -1) {
		    return hslComma.test(strippedStr);
		  }

		  return hslSpace.test(strippedStr);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isHSL$1, isHSL$1.exports));

	var isHSL = /*@__PURE__*/getDefaultExportFromCjs(isHSL$1.exports);

	var isISRC$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isISRC;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		// see http://isrc.ifpi.org/en/isrc-standard/code-syntax
		var isrc = /^[A-Z]{2}[0-9A-Z]{3}\d{2}\d{5}$/;

		function isISRC(str) {
		  (0, _assertString.default)(str);
		  return isrc.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isISRC$1, isISRC$1.exports));

	var isISRC = /*@__PURE__*/getDefaultExportFromCjs(isISRC$1.exports);

	var isIBAN$1 = {};

	"use strict";

	Object.defineProperty(isIBAN$1, "__esModule", {
	  value: true
	});
	var _default$5 = isIBAN$1.default = isIBAN;
	var locales_1$2 = isIBAN$1.locales = void 0;

	var _assertString$5 = _interopRequireDefault$5(assertString$1.exports);

	function _interopRequireDefault$5(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * List of country codes with
	 * corresponding IBAN regular expression
	 * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number
	 */
	var ibanRegexThroughCountryCode = {
	  AD: /^(AD[0-9]{2})\d{8}[A-Z0-9]{12}$/,
	  AE: /^(AE[0-9]{2})\d{3}\d{16}$/,
	  AL: /^(AL[0-9]{2})\d{8}[A-Z0-9]{16}$/,
	  AT: /^(AT[0-9]{2})\d{16}$/,
	  AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\d{20}$/,
	  BA: /^(BA[0-9]{2})\d{16}$/,
	  BE: /^(BE[0-9]{2})\d{12}$/,
	  BG: /^(BG[0-9]{2})[A-Z]{4}\d{6}[A-Z0-9]{8}$/,
	  BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,
	  BR: /^(BR[0-9]{2})\d{23}[A-Z]{1}[A-Z0-9]{1}$/,
	  BY: /^(BY[0-9]{2})[A-Z0-9]{4}\d{20}$/,
	  CH: /^(CH[0-9]{2})\d{5}[A-Z0-9]{12}$/,
	  CR: /^(CR[0-9]{2})\d{18}$/,
	  CY: /^(CY[0-9]{2})\d{8}[A-Z0-9]{16}$/,
	  CZ: /^(CZ[0-9]{2})\d{20}$/,
	  DE: /^(DE[0-9]{2})\d{18}$/,
	  DK: /^(DK[0-9]{2})\d{14}$/,
	  DO: /^(DO[0-9]{2})[A-Z]{4}\d{20}$/,
	  EE: /^(EE[0-9]{2})\d{16}$/,
	  EG: /^(EG[0-9]{2})\d{25}$/,
	  ES: /^(ES[0-9]{2})\d{20}$/,
	  FI: /^(FI[0-9]{2})\d{14}$/,
	  FO: /^(FO[0-9]{2})\d{14}$/,
	  FR: /^(FR[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,
	  GB: /^(GB[0-9]{2})[A-Z]{4}\d{14}$/,
	  GE: /^(GE[0-9]{2})[A-Z0-9]{2}\d{16}$/,
	  GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,
	  GL: /^(GL[0-9]{2})\d{14}$/,
	  GR: /^(GR[0-9]{2})\d{7}[A-Z0-9]{16}$/,
	  GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,
	  HR: /^(HR[0-9]{2})\d{17}$/,
	  HU: /^(HU[0-9]{2})\d{24}$/,
	  IE: /^(IE[0-9]{2})[A-Z0-9]{4}\d{14}$/,
	  IL: /^(IL[0-9]{2})\d{19}$/,
	  IQ: /^(IQ[0-9]{2})[A-Z]{4}\d{15}$/,
	  IR: /^(IR[0-9]{2})0\d{2}0\d{18}$/,
	  IS: /^(IS[0-9]{2})\d{22}$/,
	  IT: /^(IT[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,
	  JO: /^(JO[0-9]{2})[A-Z]{4}\d{22}$/,
	  KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,
	  KZ: /^(KZ[0-9]{2})\d{3}[A-Z0-9]{13}$/,
	  LB: /^(LB[0-9]{2})\d{4}[A-Z0-9]{20}$/,
	  LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,
	  LI: /^(LI[0-9]{2})\d{5}[A-Z0-9]{12}$/,
	  LT: /^(LT[0-9]{2})\d{16}$/,
	  LU: /^(LU[0-9]{2})\d{3}[A-Z0-9]{13}$/,
	  LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,
	  MC: /^(MC[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,
	  MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,
	  ME: /^(ME[0-9]{2})\d{18}$/,
	  MK: /^(MK[0-9]{2})\d{3}[A-Z0-9]{10}\d{2}$/,
	  MR: /^(MR[0-9]{2})\d{23}$/,
	  MT: /^(MT[0-9]{2})[A-Z]{4}\d{5}[A-Z0-9]{18}$/,
	  MU: /^(MU[0-9]{2})[A-Z]{4}\d{19}[A-Z]{3}$/,
	  MZ: /^(MZ[0-9]{2})\d{21}$/,
	  NL: /^(NL[0-9]{2})[A-Z]{4}\d{10}$/,
	  NO: /^(NO[0-9]{2})\d{11}$/,
	  PK: /^(PK[0-9]{2})[A-Z0-9]{4}\d{16}$/,
	  PL: /^(PL[0-9]{2})\d{24}$/,
	  PS: /^(PS[0-9]{2})[A-Z0-9]{4}\d{21}$/,
	  PT: /^(PT[0-9]{2})\d{21}$/,
	  QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,
	  RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,
	  RS: /^(RS[0-9]{2})\d{18}$/,
	  SA: /^(SA[0-9]{2})\d{2}[A-Z0-9]{18}$/,
	  SC: /^(SC[0-9]{2})[A-Z]{4}\d{20}[A-Z]{3}$/,
	  SE: /^(SE[0-9]{2})\d{20}$/,
	  SI: /^(SI[0-9]{2})\d{15}$/,
	  SK: /^(SK[0-9]{2})\d{20}$/,
	  SM: /^(SM[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,
	  SV: /^(SV[0-9]{2})[A-Z0-9]{4}\d{20}$/,
	  TL: /^(TL[0-9]{2})\d{19}$/,
	  TN: /^(TN[0-9]{2})\d{20}$/,
	  TR: /^(TR[0-9]{2})\d{5}[A-Z0-9]{17}$/,
	  UA: /^(UA[0-9]{2})\d{6}[A-Z0-9]{19}$/,
	  VA: /^(VA[0-9]{2})\d{18}$/,
	  VG: /^(VG[0-9]{2})[A-Z0-9]{4}\d{16}$/,
	  XK: /^(XK[0-9]{2})\d{16}$/
	};
	/**
	 * Check whether string has correct universal IBAN format
	 * The IBAN consists of up to 34 alphanumeric characters, as follows:
	 * Country Code using ISO 3166-1 alpha-2, two letters
	 * check digits, two digits and
	 * Basic Bank Account Number (BBAN), up to 30 alphanumeric characters.
	 * NOTE: Permitted IBAN characters are: digits [0-9] and the 26 latin alphabetic [A-Z]
	 *
	 * @param {string} str - string under validation
	 * @return {boolean}
	 */

	function hasValidIbanFormat(str) {
	  // Strip white spaces and hyphens
	  var strippedStr = str.replace(/[\s\-]+/gi, '').toUpperCase();
	  var isoCountryCode = strippedStr.slice(0, 2).toUpperCase();
	  return isoCountryCode in ibanRegexThroughCountryCode && ibanRegexThroughCountryCode[isoCountryCode].test(strippedStr);
	}
	/**
	   * Check whether string has valid IBAN Checksum
	   * by performing basic mod-97 operation and
	   * the remainder should equal 1
	   * -- Start by rearranging the IBAN by moving the four initial characters to the end of the string
	   * -- Replace each letter in the string with two digits, A -> 10, B = 11, Z = 35
	   * -- Interpret the string as a decimal integer and
	   * -- compute the remainder on division by 97 (mod 97)
	   * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number
	   *
	   * @param {string} str
	   * @return {boolean}
	   */


	function hasValidIbanChecksum(str) {
	  var strippedStr = str.replace(/[^A-Z0-9]+/gi, '').toUpperCase(); // Keep only digits and A-Z latin alphabetic

	  var rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);
	  var alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, function (char) {
	    return char.charCodeAt(0) - 55;
	  });
	  var remainder = alphaCapsReplacedWithDigits.match(/\d{1,7}/g).reduce(function (acc, value) {
	    return Number(acc + value) % 97;
	  }, '');
	  return remainder === 1;
	}

	function isIBAN(str) {
	  (0, _assertString$5.default)(str);
	  return hasValidIbanFormat(str) && hasValidIbanChecksum(str);
	}

	var locales$2 = Object.keys(ibanRegexThroughCountryCode);
	locales_1$2 = isIBAN$1.locales = locales$2;

	var isBIC$1 = {exports: {}};

	var isISO31661Alpha2$1 = {};

	"use strict";

	Object.defineProperty(isISO31661Alpha2$1, "__esModule", {
	  value: true
	});
	var _default$4 = isISO31661Alpha2$1.default = isISO31661Alpha2;
	var CountryCodes_1 = isISO31661Alpha2$1.CountryCodes = void 0;

	var _assertString$4 = _interopRequireDefault$4(assertString$1.exports);

	function _interopRequireDefault$4(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
	var validISO31661Alpha2CountriesCodes = new Set

	function isISO31661Alpha2(str) {
	  (0, _assertString$4.default)(str);
	  return validISO31661Alpha2CountriesCodes.has(str.toUpperCase());
	}

	var CountryCodes = validISO31661Alpha2CountriesCodes;
	CountryCodes_1 = isISO31661Alpha2$1.CountryCodes = CountryCodes;

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isBIC;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _isISO31661Alpha = isISO31661Alpha2$1;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		// https://en.wikipedia.org/wiki/ISO_9362
		var isBICReg = /^[A-Za-z]{6}[A-Za-z0-9]{2}([A-Za-z0-9]{3})?$/;

		function isBIC(str) {
		  (0, _assertString.default)(str); // toUpperCase() should be removed when a new major version goes out that changes
		  // the regex to [A-Z] (per the spec).

		  if (!_isISO31661Alpha.CountryCodes.has(str.slice(4, 6).toUpperCase())) {
		    return false;
		  }

		  return isBICReg.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isBIC$1, isBIC$1.exports));

	var isBIC = /*@__PURE__*/getDefaultExportFromCjs(isBIC$1.exports);

	var isMD5$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isMD5;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var md5 = /^[a-f0-9]{32}$/;

		function isMD5(str) {
		  (0, _assertString.default)(str);
		  return md5.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isMD5$1, isMD5$1.exports));

	var isMD5 = /*@__PURE__*/getDefaultExportFromCjs(isMD5$1.exports);

	var isHash$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isHash;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var lengths = {
		  md5: 32,
		  md4: 32,
		  sha1: 40,
		  sha256: 64,
		  sha384: 96,
		  sha512: 128,
		  ripemd128: 32,
		  ripemd160: 40,
		  tiger128: 32,
		  tiger160: 40,
		  tiger192: 48,
		  crc32: 8,
		  crc32b: 8
		};

		function isHash(str, algorithm) {
		  (0, _assertString.default)(str);
		  var hash = new RegExp("^[a-fA-F0-9]{".concat(lengths[algorithm], "}$"));
		  return hash.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isHash$1, isHash$1.exports));

	var isHash = /*@__PURE__*/getDefaultExportFromCjs(isHash$1.exports);

	var isJWT$1 = {exports: {}};

	var isBase64$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isBase64;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _merge = _interopRequireDefault(merge$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var notBase64 = /[^A-Z0-9+\/=]/i;
		var urlSafeBase64 = /^[A-Z0-9_\-]*$/i;
		var defaultBase64Options = {
		  urlSafe: false
		};

		function isBase64(str, options) {
		  (0, _assertString.default)(str);
		  options = (0, _merge.default)(options, defaultBase64Options);
		  var len = str.length;

		  if (options.urlSafe) {
		    return urlSafeBase64.test(str);
		  }

		  if (len % 4 !== 0 || notBase64.test(str)) {
		    return false;
		  }

		  var firstPaddingChar = str.indexOf('=');
		  return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === '=';
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isBase64$1, isBase64$1.exports));

	var isBase64 = /*@__PURE__*/getDefaultExportFromCjs(isBase64$1.exports);

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isJWT;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _isBase = _interopRequireDefault(isBase64$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isJWT(str) {
		  (0, _assertString.default)(str);
		  var dotSplit = str.split('.');
		  var len = dotSplit.length;

		  if (len > 3 || len < 2) {
		    return false;
		  }

		  return dotSplit.reduce(function (acc, currElem) {
		    return acc && (0, _isBase.default)(currElem, {
		      urlSafe: true
		    });
		  }, true);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isJWT$1, isJWT$1.exports));

	var isJWT = /*@__PURE__*/getDefaultExportFromCjs(isJWT$1.exports);

	var isJSON$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isJSON;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _merge = _interopRequireDefault(merge$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		var default_json_options = {
		  allow_primitives: false
		};

		function isJSON(str, options) {
		  (0, _assertString.default)(str);

		  try {
		    options = (0, _merge.default)(options, default_json_options);
		    var primitives = [];

		    if (options.allow_primitives) {
		      primitives = [null, false, true];
		    }

		    var obj = JSON.parse(str);
		    return primitives.includes(obj) || !!obj && _typeof(obj) === 'object';
		  } catch (e) {
		    /* ignore */
		  }

		  return false;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isJSON$1, isJSON$1.exports));

	var isJSON = /*@__PURE__*/getDefaultExportFromCjs(isJSON$1.exports);

	var isEmpty$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isEmpty;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _merge = _interopRequireDefault(merge$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var default_is_empty_options = {
		  ignore_whitespace: false
		};

		function isEmpty(str, options) {
		  (0, _assertString.default)(str);
		  options = (0, _merge.default)(options, default_is_empty_options);
		  return (options.ignore_whitespace ? str.trim().length : str.length) === 0;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isEmpty$1, isEmpty$1.exports));

	var isEmpty = /*@__PURE__*/getDefaultExportFromCjs(isEmpty$1.exports);

	var isLength$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isLength;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		/* eslint-disable prefer-rest-params */
		function isLength(str, options) {
		  (0, _assertString.default)(str);
		  var min;
		  var max;

		  if (_typeof(options) === 'object') {
		    min = options.min || 0;
		    max = options.max;
		  } else {
		    // backwards compatibility: isLength(str, min [, max])
		    min = arguments[1] || 0;
		    max = arguments[2];
		  }

		  var surrogatePairs = str.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
		  var len = str.length - surrogatePairs.length;
		  return len >= min && (typeof max === 'undefined' || len <= max);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isLength$1, isLength$1.exports));

	var isLength = /*@__PURE__*/getDefaultExportFromCjs(isLength$1.exports);

	var isUUID$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isUUID;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var uuid = {
		  1: /^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
		  2: /^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
		  3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
		  4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
		  5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
		  all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i
		};

		function isUUID(str, version) {
		  (0, _assertString.default)(str);
		  var pattern = uuid[![undefined, null].includes(version) ? version : 'all'];
		  return !!pattern && pattern.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isUUID$1, isUUID$1.exports));

	var isUUID = /*@__PURE__*/getDefaultExportFromCjs(isUUID$1.exports);

	var isMongoId$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isMongoId;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _isHexadecimal = _interopRequireDefault(isHexadecimal$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isMongoId(str) {
		  (0, _assertString.default)(str);
		  return (0, _isHexadecimal.default)(str) && str.length === 24;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isMongoId$1, isMongoId$1.exports));

	var isMongoId = /*@__PURE__*/getDefaultExportFromCjs(isMongoId$1.exports);

	var isAfter$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isAfter;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _toDate = _interopRequireDefault(toDate$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isAfter(str) {
		  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(new Date());
		  (0, _assertString.default)(str);
		  var comparison = (0, _toDate.default)(date);
		  var original = (0, _toDate.default)(str);
		  return !!(original && comparison && original > comparison);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isAfter$1, isAfter$1.exports));

	var isAfter = /*@__PURE__*/getDefaultExportFromCjs(isAfter$1.exports);

	var isBefore$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isBefore;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _toDate = _interopRequireDefault(toDate$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isBefore(str) {
		  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : String(new Date());
		  (0, _assertString.default)(str);
		  var comparison = (0, _toDate.default)(date);
		  var original = (0, _toDate.default)(str);
		  return !!(original && comparison && original < comparison);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isBefore$1, isBefore$1.exports));

	var isBefore = /*@__PURE__*/getDefaultExportFromCjs(isBefore$1.exports);

	var isIn$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isIn;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _toString = _interopRequireDefault(toString$2.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		function isIn(str, options) {
		  (0, _assertString.default)(str);
		  var i;

		  if (Object.prototype.toString.call(options) === '[object Array]') {
		    var array = [];

		    for (i in options) {
		      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
		      // istanbul ignore else
		      if ({}.hasOwnProperty.call(options, i)) {
		        array[i] = (0, _toString.default)(options[i]);
		      }
		    }

		    return array.indexOf(str) >= 0;
		  } else if (_typeof(options) === 'object') {
		    return options.hasOwnProperty(str);
		  } else if (options && typeof options.indexOf === 'function') {
		    return options.indexOf(str) >= 0;
		  }

		  return false;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isIn$1, isIn$1.exports));

	var isIn = /*@__PURE__*/getDefaultExportFromCjs(isIn$1.exports);

	var isCreditCard$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isCreditCard;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/* eslint-disable max-len */
		var creditCard = /^(?:4[0-9]{12}(?:[0-9]{3,6})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12,15}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|6[27][0-9]{14}|^(81[0-9]{14,17}))$/;
		/* eslint-enable max-len */

		function isCreditCard(str) {
		  (0, _assertString.default)(str);
		  var sanitized = str.replace(/[- ]+/g, '');

		  if (!creditCard.test(sanitized)) {
		    return false;
		  }

		  var sum = 0;
		  var digit;
		  var tmpNum;
		  var shouldDouble;

		  for (var i = sanitized.length - 1; i >= 0; i--) {
		    digit = sanitized.substring(i, i + 1);
		    tmpNum = parseInt(digit, 10);

		    if (shouldDouble) {
		      tmpNum *= 2;

		      if (tmpNum >= 10) {
		        sum += tmpNum % 10 + 1;
		      } else {
		        sum += tmpNum;
		      }
		    } else {
		      sum += tmpNum;
		    }

		    shouldDouble = !shouldDouble;
		  }

		  return !!(sum % 10 === 0 ? sanitized : false);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isCreditCard$1, isCreditCard$1.exports));

	var isCreditCard = /*@__PURE__*/getDefaultExportFromCjs(isCreditCard$1.exports);

	var isIdentityCard$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isIdentityCard;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _isInt = _interopRequireDefault(isInt$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var validators = {
		  PL: function PL(str) {
		    (0, _assertString.default)(str);
		    var weightOfDigits = {
		      1: 1,
		      2: 3,
		      3: 7,
		      4: 9,
		      5: 1,
		      6: 3,
		      7: 7,
		      8: 9,
		      9: 1,
		      10: 3,
		      11: 0
		    };

		    if (str != null && str.length === 11 && (0, _isInt.default)(str, {
		      allow_leading_zeroes: true
		    })) {
		      var digits = str.split('').slice(0, -1);
		      var sum = digits.reduce(function (acc, digit, index) {
		        return acc + Number(digit) * weightOfDigits[index + 1];
		      }, 0);
		      var modulo = sum % 10;
		      var lastDigit = Number(str.charAt(str.length - 1));

		      if (modulo === 0 && lastDigit === 0 || lastDigit === 10 - modulo) {
		        return true;
		      }
		    }

		    return false;
		  },
		  ES: function ES(str) {
		    (0, _assertString.default)(str);
		    var DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;
		    var charsValue = {
		      X: 0,
		      Y: 1,
		      Z: 2
		    };
		    var controlDigits = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E']; // sanitize user input

		    var sanitized = str.trim().toUpperCase(); // validate the data structure

		    if (!DNI.test(sanitized)) {
		      return false;
		    } // validate the control digit


		    var number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, function (char) {
		      return charsValue[char];
		    });
		    return sanitized.endsWith(controlDigits[number % 23]);
		  },
		  FI: function FI(str) {
		    // https://dvv.fi/en/personal-identity-code#:~:text=control%20character%20for%20a-,personal,-identity%20code%20calculated
		    (0, _assertString.default)(str);

		    if (str.length !== 11) {
		      return false;
		    }

		    if (!str.match(/^\d{6}[\-A\+]\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)) {
		      return false;
		    }

		    var checkDigits = '0123456789ABCDEFHJKLMNPRSTUVWXY';
		    var idAsNumber = parseInt(str.slice(0, 6), 10) * 1000 + parseInt(str.slice(7, 10), 10);
		    var remainder = idAsNumber % 31;
		    var checkDigit = checkDigits[remainder];
		    return checkDigit === str.slice(10, 11);
		  },
		  IN: function IN(str) {
		    var DNI = /^[1-9]\d{3}\s?\d{4}\s?\d{4}$/; // multiplication table

		    var d = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]]; // permutation table

		    var p = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]]; // sanitize user input

		    var sanitized = str.trim(); // validate the data structure

		    if (!DNI.test(sanitized)) {
		      return false;
		    }

		    var c = 0;
		    var invertedArray = sanitized.replace(/\s/g, '').split('').map(Number).reverse();
		    invertedArray.forEach(function (val, i) {
		      c = d[c][p[i % 8][val]];
		    });
		    return c === 0;
		  },
		  IR: function IR(str) {
		    if (!str.match(/^\d{10}$/)) return false;
		    str = "0000".concat(str).substr(str.length - 6);
		    if (parseInt(str.substr(3, 6), 10) === 0) return false;
		    var lastNumber = parseInt(str.substr(9, 1), 10);
		    var sum = 0;

		    for (var i = 0; i < 9; i++) {
		      sum += parseInt(str.substr(i, 1), 10) * (10 - i);
		    }

		    sum %= 11;
		    return sum < 2 && lastNumber === sum || sum >= 2 && lastNumber === 11 - sum;
		  },
		  IT: function IT(str) {
		    if (str.length !== 9) return false;
		    if (str === 'CA00000AA') return false; // https://it.wikipedia.org/wiki/Carta_d%27identit%C3%A0_elettronica_italiana

		    return str.search(/C[A-Z][0-9]{5}[A-Z]{2}/i) > -1;
		  },
		  NO: function NO(str) {
		    var sanitized = str.trim();
		    if (isNaN(Number(sanitized))) return false;
		    if (sanitized.length !== 11) return false;
		    if (sanitized === '00000000000') return false; // https://no.wikipedia.org/wiki/F%C3%B8dselsnummer

		    var f = sanitized.split('').map(Number);
		    var k1 = (11 - (3 * f[0] + 7 * f[1] + 6 * f[2] + 1 * f[3] + 8 * f[4] + 9 * f[5] + 4 * f[6] + 5 * f[7] + 2 * f[8]) % 11) % 11;
		    var k2 = (11 - (5 * f[0] + 4 * f[1] + 3 * f[2] + 2 * f[3] + 7 * f[4] + 6 * f[5] + 5 * f[6] + 4 * f[7] + 3 * f[8] + 2 * k1) % 11) % 11;
		    if (k1 !== f[9] || k2 !== f[10]) return false;
		    return true;
		  },
		  TH: function TH(str) {
		    if (!str.match(/^[1-8]\d{12}$/)) return false; // validate check digit

		    var sum = 0;

		    for (var i = 0; i < 12; i++) {
		      sum += parseInt(str[i], 10) * (13 - i);
		    }

		    return str[12] === ((11 - sum % 11) % 10).toString();
		  },
		  LK: function LK(str) {
		    var old_nic = /^[1-9]\d{8}[vx]$/i;
		    var new_nic = /^[1-9]\d{11}$/i;
		    if (str.length === 10 && old_nic.test(str)) return true;else if (str.length === 12 && new_nic.test(str)) return true;
		    return false;
		  },
		  'he-IL': function heIL(str) {
		    var DNI = /^\d{9}$/; // sanitize user input

		    var sanitized = str.trim(); // validate the data structure

		    if (!DNI.test(sanitized)) {
		      return false;
		    }

		    var id = sanitized;
		    var sum = 0,
		        incNum;

		    for (var i = 0; i < id.length; i++) {
		      incNum = Number(id[i]) * (i % 2 + 1); // Multiply number by 1 or 2

		      sum += incNum > 9 ? incNum - 9 : incNum; // Sum the digits up and add to total
		    }

		    return sum % 10 === 0;
		  },
		  'ar-LY': function arLY(str) {
		    // Libya National Identity Number NIN is 12 digits, the first digit is either 1 or 2
		    var NIN = /^(1|2)\d{11}$/; // sanitize user input

		    var sanitized = str.trim(); // validate the data structure

		    if (!NIN.test(sanitized)) {
		      return false;
		    }

		    return true;
		  },
		  'ar-TN': function arTN(str) {
		    var DNI = /^\d{8}$/; // sanitize user input

		    var sanitized = str.trim(); // validate the data structure

		    if (!DNI.test(sanitized)) {
		      return false;
		    }

		    return true;
		  },
		  'zh-CN': function zhCN(str) {
		    var provincesAndCities = ['11', // 北京
		    '12', // 天津
		    '13', // 河北
		    '14', // 山西
		    '15', // 内蒙古
		    '21', // 辽宁
		    '22', // 吉林
		    '23', // 黑龙江
		    '31', // 上海
		    '32', // 江苏
		    '33', // 浙江
		    '34', // 安徽
		    '35', // 福建
		    '36', // 江西
		    '37', // 山东
		    '41', // 河南
		    '42', // 湖北
		    '43', // 湖南
		    '44', // 广东
		    '45', // 广西
		    '46', // 海南
		    '50', // 重庆
		    '51', // 四川
		    '52', // 贵州
		    '53', // 云南
		    '54', // 西藏
		    '61', // 陕西
		    '62', // 甘肃
		    '63', // 青海
		    '64', // 宁夏
		    '65', // 新疆
		    '71', // 台湾
		    '81', // 香港
		    '82', // 澳门
		    '91' // 国外
		    ];
		    var powers = ['7', '9', '10', '5', '8', '4', '2', '1', '6', '3', '7', '9', '10', '5', '8', '4', '2'];
		    var parityBit = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];

		    var checkAddressCode = function checkAddressCode(addressCode) {
		      return provincesAndCities.includes(addressCode);
		    };

		    var checkBirthDayCode = function checkBirthDayCode(birDayCode) {
		      var yyyy = parseInt(birDayCode.substring(0, 4), 10);
		      var mm = parseInt(birDayCode.substring(4, 6), 10);
		      var dd = parseInt(birDayCode.substring(6), 10);
		      var xdata = new Date(yyyy, mm - 1, dd);

		      if (xdata > new Date()) {
		        return false; // eslint-disable-next-line max-len
		      } else if (xdata.getFullYear() === yyyy && xdata.getMonth() === mm - 1 && xdata.getDate() === dd) {
		        return true;
		      }

		      return false;
		    };

		    var getParityBit = function getParityBit(idCardNo) {
		      var id17 = idCardNo.substring(0, 17);
		      var power = 0;

		      for (var i = 0; i < 17; i++) {
		        power += parseInt(id17.charAt(i), 10) * parseInt(powers[i], 10);
		      }

		      var mod = power % 11;
		      return parityBit[mod];
		    };

		    var checkParityBit = function checkParityBit(idCardNo) {
		      return getParityBit(idCardNo) === idCardNo.charAt(17).toUpperCase();
		    };

		    var check15IdCardNo = function check15IdCardNo(idCardNo) {
		      var check = /^[1-9]\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}$/.test(idCardNo);
		      if (!check) return false;
		      var addressCode = idCardNo.substring(0, 2);
		      check = checkAddressCode(addressCode);
		      if (!check) return false;
		      var birDayCode = "19".concat(idCardNo.substring(6, 12));
		      check = checkBirthDayCode(birDayCode);
		      if (!check) return false;
		      return true;
		    };

		    var check18IdCardNo = function check18IdCardNo(idCardNo) {
		      var check = /^[1-9]\d{5}[1-9]\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}(\d|x|X)$/.test(idCardNo);
		      if (!check) return false;
		      var addressCode = idCardNo.substring(0, 2);
		      check = checkAddressCode(addressCode);
		      if (!check) return false;
		      var birDayCode = idCardNo.substring(6, 14);
		      check = checkBirthDayCode(birDayCode);
		      if (!check) return false;
		      return checkParityBit(idCardNo);
		    };

		    var checkIdCardNo = function checkIdCardNo(idCardNo) {
		      var check = /^\d{15}|(\d{17}(\d|x|X))$/.test(idCardNo);
		      if (!check) return false;

		      if (idCardNo.length === 15) {
		        return check15IdCardNo(idCardNo);
		      }

		      return check18IdCardNo(idCardNo);
		    };

		    return checkIdCardNo(str);
		  },
		  'zh-TW': function zhTW(str) {
		    var ALPHABET_CODES = {
		      A: 10,
		      B: 11,
		      C: 12,
		      D: 13,
		      E: 14,
		      F: 15,
		      G: 16,
		      H: 17,
		      I: 34,
		      J: 18,
		      K: 19,
		      L: 20,
		      M: 21,
		      N: 22,
		      O: 35,
		      P: 23,
		      Q: 24,
		      R: 25,
		      S: 26,
		      T: 27,
		      U: 28,
		      V: 29,
		      W: 32,
		      X: 30,
		      Y: 31,
		      Z: 33
		    };
		    var sanitized = str.trim().toUpperCase();
		    if (!/^[A-Z][0-9]{9}$/.test(sanitized)) return false;
		    return Array.from(sanitized).reduce(function (sum, number, index) {
		      if (index === 0) {
		        var code = ALPHABET_CODES[number];
		        return code % 10 * 9 + Math.floor(code / 10);
		      }

		      if (index === 9) {
		        return (10 - sum % 10 - Number(number)) % 10 === 0;
		      }

		      return sum + Number(number) * (9 - index);
		    }, 0);
		  }
		};

		function isIdentityCard(str, locale) {
		  (0, _assertString.default)(str);

		  if (locale in validators) {
		    return validators[locale](str);
		  } else if (locale === 'any') {
		    for (var key in validators) {
		      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
		      // istanbul ignore else
		      if (validators.hasOwnProperty(key)) {
		        var validator = validators[key];

		        if (validator(str)) {
		          return true;
		        }
		      }
		    }

		    return false;
		  }

		  throw new Error("Invalid locale '".concat(locale, "'"));
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isIdentityCard$1, isIdentityCard$1.exports));

	var isIdentityCard = /*@__PURE__*/getDefaultExportFromCjs(isIdentityCard$1.exports);

	var isEAN$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isEAN;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/**
		 * The most commonly used EAN standard is
		 * the thirteen-digit EAN-13, while the
		 * less commonly used 8-digit EAN-8 barcode was
		 * introduced for use on small packages.
		 * Also EAN/UCC-14 is used for Grouping of individual
		 * trade items above unit level(Intermediate, Carton or Pallet).
		 * For more info about EAN-14 checkout: https://www.gtin.info/itf-14-barcodes/
		 * EAN consists of:
		 * GS1 prefix, manufacturer code, product code and check digit
		 * Reference: https://en.wikipedia.org/wiki/International_Article_Number
		 * Reference: https://www.gtin.info/
		 */

		/**
		 * Define EAN Lenghts; 8 for EAN-8; 13 for EAN-13; 14 for EAN-14
		 * and Regular Expression for valid EANs (EAN-8, EAN-13, EAN-14),
		 * with exact numberic matching of 8 or 13 or 14 digits [0-9]
		 */
		var LENGTH_EAN_8 = 8;
		var LENGTH_EAN_14 = 14;
		var validEanRegex = /^(\d{8}|\d{13}|\d{14})$/;
		/**
		 * Get position weight given:
		 * EAN length and digit index/position
		 *
		 * @param {number} length
		 * @param {number} index
		 * @return {number}
		 */

		function getPositionWeightThroughLengthAndIndex(length, index) {
		  if (length === LENGTH_EAN_8 || length === LENGTH_EAN_14) {
		    return index % 2 === 0 ? 3 : 1;
		  }

		  return index % 2 === 0 ? 1 : 3;
		}
		/**
		 * Calculate EAN Check Digit
		 * Reference: https://en.wikipedia.org/wiki/International_Article_Number#Calculation_of_checksum_digit
		 *
		 * @param {string} ean
		 * @return {number}
		 */


		function calculateCheckDigit(ean) {
		  var checksum = ean.slice(0, -1).split('').map(function (char, index) {
		    return Number(char) * getPositionWeightThroughLengthAndIndex(ean.length, index);
		  }).reduce(function (acc, partialSum) {
		    return acc + partialSum;
		  }, 0);
		  var remainder = 10 - checksum % 10;
		  return remainder < 10 ? remainder : 0;
		}
		/**
		 * Check if string is valid EAN:
		 * Matches EAN-8/EAN-13/EAN-14 regex
		 * Has valid check digit.
		 *
		 * @param {string} str
		 * @return {boolean}
		 */


		function isEAN(str) {
		  (0, _assertString.default)(str);
		  var actualCheckDigit = Number(str.slice(-1));
		  return validEanRegex.test(str) && actualCheckDigit === calculateCheckDigit(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isEAN$1, isEAN$1.exports));

	var isEAN = /*@__PURE__*/getDefaultExportFromCjs(isEAN$1.exports);

	var isISIN$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isISIN;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/; // this link details how the check digit is calculated:
		// https://www.isin.org/isin-format/. it is a little bit
		// odd in that it works with digits, not numbers. in order
		// to make only one pass through the ISIN characters, the
		// each alpha character is handled as 2 characters within
		// the loop.

		function isISIN(str) {
		  (0, _assertString.default)(str);

		  if (!isin.test(str)) {
		    return false;
		  }

		  var double = true;
		  var sum = 0; // convert values

		  for (var i = str.length - 2; i >= 0; i--) {
		    if (str[i] >= 'A' && str[i] <= 'Z') {
		      var value = str[i].charCodeAt(0) - 55;
		      var lo = value % 10;
		      var hi = Math.trunc(value / 10); // letters have two digits, so handle the low order
		      // and high order digits separately.

		      for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {
		        var digit = _arr[_i];

		        if (double) {
		          if (digit >= 5) {
		            sum += 1 + (digit - 5) * 2;
		          } else {
		            sum += digit * 2;
		          }
		        } else {
		          sum += digit;
		        }

		        double = !double;
		      }
		    } else {
		      var _digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);

		      if (double) {
		        if (_digit >= 5) {
		          sum += 1 + (_digit - 5) * 2;
		        } else {
		          sum += _digit * 2;
		        }
		      } else {
		        sum += _digit;
		      }

		      double = !double;
		    }
		  }

		  var check = Math.trunc((sum + 9) / 10) * 10 - sum;
		  return +str[str.length - 1] === check;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isISIN$1, isISIN$1.exports));

	var isISIN = /*@__PURE__*/getDefaultExportFromCjs(isISIN$1.exports);

	var isISBN$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isISBN;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;
		var isbn13Maybe = /^(?:[0-9]{13})$/;
		var factor = [1, 3];

		function isISBN(str) {
		  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
		  (0, _assertString.default)(str);
		  version = String(version);

		  if (!version) {
		    return isISBN(str, 10) || isISBN(str, 13);
		  }

		  var sanitized = str.replace(/[\s-]+/g, '');
		  var checksum = 0;
		  var i;

		  if (version === '10') {
		    if (!isbn10Maybe.test(sanitized)) {
		      return false;
		    }

		    for (i = 0; i < 9; i++) {
		      checksum += (i + 1) * sanitized.charAt(i);
		    }

		    if (sanitized.charAt(9) === 'X') {
		      checksum += 10 * 10;
		    } else {
		      checksum += 10 * sanitized.charAt(9);
		    }

		    if (checksum % 11 === 0) {
		      return !!sanitized;
		    }
		  } else if (version === '13') {
		    if (!isbn13Maybe.test(sanitized)) {
		      return false;
		    }

		    for (i = 0; i < 12; i++) {
		      checksum += factor[i % 2] * sanitized.charAt(i);
		    }

		    if (sanitized.charAt(12) - (10 - checksum % 10) % 10 === 0) {
		      return !!sanitized;
		    }
		  }

		  return false;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isISBN$1, isISBN$1.exports));

	var isISBN = /*@__PURE__*/getDefaultExportFromCjs(isISBN$1.exports);

	var isISSN$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isISSN;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var issn = '^\\d{4}-?\\d{3}[\\dX]$';

		function isISSN(str) {
		  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		  (0, _assertString.default)(str);
		  var testIssn = issn;
		  testIssn = options.require_hyphen ? testIssn.replace('?', '') : testIssn;
		  testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, 'i');

		  if (!testIssn.test(str)) {
		    return false;
		  }

		  var digits = str.replace('-', '').toUpperCase();
		  var checksum = 0;

		  for (var i = 0; i < digits.length; i++) {
		    var digit = digits[i];
		    checksum += (digit === 'X' ? 10 : +digit) * (8 - i);
		  }

		  return checksum % 11 === 0;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isISSN$1, isISSN$1.exports));

	var isISSN = /*@__PURE__*/getDefaultExportFromCjs(isISSN$1.exports);

	var isTaxID$1 = {exports: {}};

	var algorithms = {};

	"use strict";

	Object.defineProperty(algorithms, "__esModule", {
	  value: true
	});
	var iso7064Check_1 = algorithms.iso7064Check = iso7064Check;
	var luhnCheck_1 = algorithms.luhnCheck = luhnCheck;
	var reverseMultiplyAndSum_1 = algorithms.reverseMultiplyAndSum = reverseMultiplyAndSum;
	var verhoeffCheck_1 = algorithms.verhoeffCheck = verhoeffCheck;

	/**
	 * Algorithmic validation functions
	 * May be used as is or implemented in the workflow of other validators.
	 */

	/*
	 * ISO 7064 validation function
	 * Called with a string of numbers (incl. check digit)
	 * to validate according to ISO 7064 (MOD 11, 10).
	 */
	function iso7064Check(str) {
	  var checkvalue = 10;

	  for (var i = 0; i < str.length - 1; i++) {
	    checkvalue = (parseInt(str[i], 10) + checkvalue) % 10 === 0 ? 10 * 2 % 11 : (parseInt(str[i], 10) + checkvalue) % 10 * 2 % 11;
	  }

	  checkvalue = checkvalue === 1 ? 0 : 11 - checkvalue;
	  return checkvalue === parseInt(str[10], 10);
	}
	/*
	 * Luhn (mod 10) validation function
	 * Called with a string of numbers (incl. check digit)
	 * to validate according to the Luhn algorithm.
	 */


	function luhnCheck(str) {
	  var checksum = 0;
	  var second = false;

	  for (var i = str.length - 1; i >= 0; i--) {
	    if (second) {
	      var product = parseInt(str[i], 10) * 2;

	      if (product > 9) {
	        // sum digits of product and add to checksum
	        checksum += product.toString().split('').map(function (a) {
	          return parseInt(a, 10);
	        }).reduce(function (a, b) {
	          return a + b;
	        }, 0);
	      } else {
	        checksum += product;
	      }
	    } else {
	      checksum += parseInt(str[i], 10);
	    }

	    second = !second;
	  }

	  return checksum % 10 === 0;
	}
	/*
	 * Reverse TIN multiplication and summation helper function
	 * Called with an array of single-digit integers and a base multiplier
	 * to calculate the sum of the digits multiplied in reverse.
	 * Normally used in variations of MOD 11 algorithmic checks.
	 */


	function reverseMultiplyAndSum(digits, base) {
	  var total = 0;

	  for (var i = 0; i < digits.length; i++) {
	    total += digits[i] * (base - i);
	  }

	  return total;
	}
	/*
	 * Verhoeff validation helper function
	 * Called with a string of numbers
	 * to validate according to the Verhoeff algorithm.
	 */


	function verhoeffCheck(str) {
	  var d_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];
	  var p_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]]; // Copy (to prevent replacement) and reverse

	  var str_copy = str.split('').reverse().join('');
	  var checksum = 0;

	  for (var i = 0; i < str_copy.length; i++) {
	    checksum = d_table[checksum][p_table[i % 8][parseInt(str_copy[i], 10)]];
	  }

	  return checksum === 0;
	}

	(function (module, exports) {
		"use strict";

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isTaxID;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var algorithms$1 = _interopRequireWildcard(algorithms);

		var _isDate = _interopRequireDefault(isDate$1.exports);

		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

		function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

		function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		/**
		 * TIN Validation
		 * Validates Tax Identification Numbers (TINs) from the US, EU member states and the United Kingdom.
		 *
		 * EU-UK:
		 * National TIN validity is calculated using public algorithms as made available by DG TAXUD.
		 *
		 * See `https://ec.europa.eu/taxation_customs/tin/specs/FS-TIN%20Algorithms-Public.docx` for more information.
		 *
		 * US:
		 * An Employer Identification Number (EIN), also known as a Federal Tax Identification Number,
		 *  is used to identify a business entity.
		 *
		 * NOTES:
		 *  - Prefix 47 is being reserved for future use
		 *  - Prefixes 26, 27, 45, 46 and 47 were previously assigned by the Philadelphia campus.
		 *
		 * See `http://www.irs.gov/Businesses/Small-Businesses-&-Self-Employed/How-EINs-are-Assigned-and-Valid-EIN-Prefixes`
		 * for more information.
		 */
		// Locale functions

		/*
		 * bg-BG validation function
		 * (Edinen graždanski nomer (EGN/ЕГН), persons only)
		 * Checks if birth date (first six digits) is valid and calculates check (last) digit
		 */
		function bgBgCheck(tin) {
		  // Extract full year, normalize month and check birth date validity
		  var century_year = tin.slice(0, 2);
		  var month = parseInt(tin.slice(2, 4), 10);

		  if (month > 40) {
		    month -= 40;
		    century_year = "20".concat(century_year);
		  } else if (month > 20) {
		    month -= 20;
		    century_year = "18".concat(century_year);
		  } else {
		    century_year = "19".concat(century_year);
		  }

		  if (month < 10) {
		    month = "0".concat(month);
		  }

		  var date = "".concat(century_year, "/").concat(month, "/").concat(tin.slice(4, 6));

		  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
		    return false;
		  } // split digits into an array for further processing


		  var digits = tin.split('').map(function (a) {
		    return parseInt(a, 10);
		  }); // Calculate checksum by multiplying digits with fixed values

		  var multip_lookup = [2, 4, 8, 5, 10, 9, 7, 3, 6];
		  var checksum = 0;

		  for (var i = 0; i < multip_lookup.length; i++) {
		    checksum += digits[i] * multip_lookup[i];
		  }

		  checksum = checksum % 11 === 10 ? 0 : checksum % 11;
		  return checksum === digits[9];
		}
		/*
		 * cs-CZ validation function
		 * (Rodné číslo (RČ), persons only)
		 * Checks if birth date (first six digits) is valid and divisibility by 11
		 * Material not in DG TAXUD document sourced from:
		 * -`https://lorenc.info/3MA381/overeni-spravnosti-rodneho-cisla.htm`
		 * -`https://www.mvcr.cz/clanek/rady-a-sluzby-dokumenty-rodne-cislo.aspx`
		 */


		function csCzCheck(tin) {
		  tin = tin.replace(/\W/, ''); // Extract full year from TIN length

		  var full_year = parseInt(tin.slice(0, 2), 10);

		  if (tin.length === 10) {
		    if (full_year < 54) {
		      full_year = "20".concat(full_year);
		    } else {
		      full_year = "19".concat(full_year);
		    }
		  } else {
		    if (tin.slice(6) === '000') {
		      return false;
		    } // Three-zero serial not assigned before 1954


		    if (full_year < 54) {
		      full_year = "19".concat(full_year);
		    } else {
		      return false; // No 18XX years seen in any of the resources
		    }
		  } // Add missing zero if needed


		  if (full_year.length === 3) {
		    full_year = [full_year.slice(0, 2), '0', full_year.slice(2)].join('');
		  } // Extract month from TIN and normalize


		  var month = parseInt(tin.slice(2, 4), 10);

		  if (month > 50) {
		    month -= 50;
		  }

		  if (month > 20) {
		    // Month-plus-twenty was only introduced in 2004
		    if (parseInt(full_year, 10) < 2004) {
		      return false;
		    }

		    month -= 20;
		  }

		  if (month < 10) {
		    month = "0".concat(month);
		  } // Check date validity


		  var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));

		  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
		    return false;
		  } // Verify divisibility by 11


		  if (tin.length === 10) {
		    if (parseInt(tin, 10) % 11 !== 0) {
		      // Some numbers up to and including 1985 are still valid if
		      // check (last) digit equals 0 and modulo of first 9 digits equals 10
		      var checkdigit = parseInt(tin.slice(0, 9), 10) % 11;

		      if (parseInt(full_year, 10) < 1986 && checkdigit === 10) {
		        if (parseInt(tin.slice(9), 10) !== 0) {
		          return false;
		        }
		      } else {
		        return false;
		      }
		    }
		  }

		  return true;
		}
		/*
		 * de-AT validation function
		 * (Abgabenkontonummer, persons/entities)
		 * Verify TIN validity by calling luhnCheck()
		 */


		function deAtCheck(tin) {
		  return algorithms$1.luhnCheck(tin);
		}
		/*
		 * de-DE validation function
		 * (Steueridentifikationsnummer (Steuer-IdNr.), persons only)
		 * Tests for single duplicate/triplicate value, then calculates ISO 7064 check (last) digit
		 * Partial implementation of spec (same result with both algorithms always)
		 */


		function deDeCheck(tin) {
		  // Split digits into an array for further processing
		  var digits = tin.split('').map(function (a) {
		    return parseInt(a, 10);
		  }); // Fill array with strings of number positions

		  var occurences = [];

		  for (var i = 0; i < digits.length - 1; i++) {
		    occurences.push('');

		    for (var j = 0; j < digits.length - 1; j++) {
		      if (digits[i] === digits[j]) {
		        occurences[i] += j;
		      }
		    }
		  } // Remove digits with one occurence and test for only one duplicate/triplicate


		  occurences = occurences.filter(function (a) {
		    return a.length > 1;
		  });

		  if (occurences.length !== 2 && occurences.length !== 3) {
		    return false;
		  } // In case of triplicate value only two digits are allowed next to each other


		  if (occurences[0].length === 3) {
		    var trip_locations = occurences[0].split('').map(function (a) {
		      return parseInt(a, 10);
		    });
		    var recurrent = 0; // Amount of neighbour occurences

		    for (var _i = 0; _i < trip_locations.length - 1; _i++) {
		      if (trip_locations[_i] + 1 === trip_locations[_i + 1]) {
		        recurrent += 1;
		      }
		    }

		    if (recurrent === 2) {
		      return false;
		    }
		  }

		  return algorithms$1.iso7064Check(tin);
		}
		/*
		 * dk-DK validation function
		 * (CPR-nummer (personnummer), persons only)
		 * Checks if birth date (first six digits) is valid and assigned to century (seventh) digit,
		 * and calculates check (last) digit
		 */


		function dkDkCheck(tin) {
		  tin = tin.replace(/\W/, ''); // Extract year, check if valid for given century digit and add century

		  var year = parseInt(tin.slice(4, 6), 10);
		  var century_digit = tin.slice(6, 7);

		  switch (century_digit) {
		    case '0':
		    case '1':
		    case '2':
		    case '3':
		      year = "19".concat(year);
		      break;

		    case '4':
		    case '9':
		      if (year < 37) {
		        year = "20".concat(year);
		      } else {
		        year = "19".concat(year);
		      }

		      break;

		    default:
		      if (year < 37) {
		        year = "20".concat(year);
		      } else if (year > 58) {
		        year = "18".concat(year);
		      } else {
		        return false;
		      }

		      break;
		  } // Add missing zero if needed


		  if (year.length === 3) {
		    year = [year.slice(0, 2), '0', year.slice(2)].join('');
		  } // Check date validity


		  var date = "".concat(year, "/").concat(tin.slice(2, 4), "/").concat(tin.slice(0, 2));

		  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
		    return false;
		  } // Split digits into an array for further processing


		  var digits = tin.split('').map(function (a) {
		    return parseInt(a, 10);
		  });
		  var checksum = 0;
		  var weight = 4; // Multiply by weight and add to checksum

		  for (var i = 0; i < 9; i++) {
		    checksum += digits[i] * weight;
		    weight -= 1;

		    if (weight === 1) {
		      weight = 7;
		    }
		  }

		  checksum %= 11;

		  if (checksum === 1) {
		    return false;
		  }

		  return checksum === 0 ? digits[9] === 0 : digits[9] === 11 - checksum;
		}
		/*
		 * el-CY validation function
		 * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons only)
		 * Verify TIN validity by calculating ASCII value of check (last) character
		 */


		function elCyCheck(tin) {
		  // split digits into an array for further processing
		  var digits = tin.slice(0, 8).split('').map(function (a) {
		    return parseInt(a, 10);
		  });
		  var checksum = 0; // add digits in even places

		  for (var i = 1; i < digits.length; i += 2) {
		    checksum += digits[i];
		  } // add digits in odd places


		  for (var _i2 = 0; _i2 < digits.length; _i2 += 2) {
		    if (digits[_i2] < 2) {
		      checksum += 1 - digits[_i2];
		    } else {
		      checksum += 2 * (digits[_i2] - 2) + 5;

		      if (digits[_i2] > 4) {
		        checksum += 2;
		      }
		    }
		  }

		  return String.fromCharCode(checksum % 26 + 65) === tin.charAt(8);
		}
		/*
		 * el-GR validation function
		 * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons/entities)
		 * Verify TIN validity by calculating check (last) digit
		 * Algorithm not in DG TAXUD document- sourced from:
		 * - `http://epixeirisi.gr/%CE%9A%CE%A1%CE%99%CE%A3%CE%99%CE%9C%CE%91-%CE%98%CE%95%CE%9C%CE%91%CE%A4%CE%91-%CE%A6%CE%9F%CE%A1%CE%9F%CE%9B%CE%9F%CE%93%CE%99%CE%91%CE%A3-%CE%9A%CE%91%CE%99-%CE%9B%CE%9F%CE%93%CE%99%CE%A3%CE%A4%CE%99%CE%9A%CE%97%CE%A3/23791/%CE%91%CF%81%CE%B9%CE%B8%CE%BC%CF%8C%CF%82-%CE%A6%CE%BF%CF%81%CE%BF%CE%BB%CE%BF%CE%B3%CE%B9%CE%BA%CE%BF%CF%8D-%CE%9C%CE%B7%CF%84%CF%81%CF%8E%CE%BF%CF%85`
		 */


		function elGrCheck(tin) {
		  // split digits into an array for further processing
		  var digits = tin.split('').map(function (a) {
		    return parseInt(a, 10);
		  });
		  var checksum = 0;

		  for (var i = 0; i < 8; i++) {
		    checksum += digits[i] * Math.pow(2, 8 - i);
		  }

		  return checksum % 11 % 10 === digits[8];
		}
		/*
		 * en-GB validation function (should go here if needed)
		 * (National Insurance Number (NINO) or Unique Taxpayer Reference (UTR),
		 * persons/entities respectively)
		 */

		/*
		 * en-IE validation function
		 * (Personal Public Service Number (PPS No), persons only)
		 * Verify TIN validity by calculating check (second to last) character
		 */


		function enIeCheck(tin) {
		  var checksum = algorithms$1.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {
		    return parseInt(a, 10);
		  }), 8);

		  if (tin.length === 9 && tin[8] !== 'W') {
		    checksum += (tin[8].charCodeAt(0) - 64) * 9;
		  }

		  checksum %= 23;

		  if (checksum === 0) {
		    return tin[7].toUpperCase() === 'W';
		  }

		  return tin[7].toUpperCase() === String.fromCharCode(64 + checksum);
		} // Valid US IRS campus prefixes


		var enUsCampusPrefix = {
		  andover: ['10', '12'],
		  atlanta: ['60', '67'],
		  austin: ['50', '53'],
		  brookhaven: ['01', '02', '03', '04', '05', '06', '11', '13', '14', '16', '21', '22', '23', '25', '34', '51', '52', '54', '55', '56', '57', '58', '59', '65'],
		  cincinnati: ['30', '32', '35', '36', '37', '38', '61'],
		  fresno: ['15', '24'],
		  internet: ['20', '26', '27', '45', '46', '47'],
		  kansas: ['40', '44'],
		  memphis: ['94', '95'],
		  ogden: ['80', '90'],
		  philadelphia: ['33', '39', '41', '42', '43', '46', '48', '62', '63', '64', '66', '68', '71', '72', '73', '74', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '91', '92', '93', '98', '99'],
		  sba: ['31']
		}; // Return an array of all US IRS campus prefixes

		function enUsGetPrefixes() {
		  var prefixes = [];

		  for (var location in enUsCampusPrefix) {
		    // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
		    // istanbul ignore else
		    if (enUsCampusPrefix.hasOwnProperty(location)) {
		      prefixes.push.apply(prefixes, _toConsumableArray(enUsCampusPrefix[location]));
		    }
		  }

		  return prefixes;
		}
		/*
		 * en-US validation function
		 * Verify that the TIN starts with a valid IRS campus prefix
		 */


		function enUsCheck(tin) {
		  return enUsGetPrefixes().indexOf(tin.substr(0, 2)) !== -1;
		}
		/*
		 * es-ES validation function
		 * (Documento Nacional de Identidad (DNI)
		 * or Número de Identificación de Extranjero (NIE), persons only)
		 * Verify TIN validity by calculating check (last) character
		 */


		function esEsCheck(tin) {
		  // Split characters into an array for further processing
		  var chars = tin.toUpperCase().split(''); // Replace initial letter if needed

		  if (isNaN(parseInt(chars[0], 10)) && chars.length > 1) {
		    var lead_replace = 0;

		    switch (chars[0]) {
		      case 'Y':
		        lead_replace = 1;
		        break;

		      case 'Z':
		        lead_replace = 2;
		        break;

		      default:
		    }

		    chars.splice(0, 1, lead_replace); // Fill with zeros if smaller than proper
		  } else {
		    while (chars.length < 9) {
		      chars.unshift(0);
		    }
		  } // Calculate checksum and check according to lookup


		  var lookup = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E'];
		  chars = chars.join('');
		  var checksum = parseInt(chars.slice(0, 8), 10) % 23;
		  return chars[8] === lookup[checksum];
		}
		/*
		 * et-EE validation function
		 * (Isikukood (IK), persons only)
		 * Checks if birth date (century digit and six following) is valid and calculates check (last) digit
		 * Material not in DG TAXUD document sourced from:
		 * - `https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/Estonia-TIN.pdf`
		 */


		function etEeCheck(tin) {
		  // Extract year and add century
		  var full_year = tin.slice(1, 3);
		  var century_digit = tin.slice(0, 1);

		  switch (century_digit) {
		    case '1':
		    case '2':
		      full_year = "18".concat(full_year);
		      break;

		    case '3':
		    case '4':
		      full_year = "19".concat(full_year);
		      break;

		    default:
		      full_year = "20".concat(full_year);
		      break;
		  } // Check date validity


		  var date = "".concat(full_year, "/").concat(tin.slice(3, 5), "/").concat(tin.slice(5, 7));

		  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
		    return false;
		  } // Split digits into an array for further processing


		  var digits = tin.split('').map(function (a) {
		    return parseInt(a, 10);
		  });
		  var checksum = 0;
		  var weight = 1; // Multiply by weight and add to checksum

		  for (var i = 0; i < 10; i++) {
		    checksum += digits[i] * weight;
		    weight += 1;

		    if (weight === 10) {
		      weight = 1;
		    }
		  } // Do again if modulo 11 of checksum is 10


		  if (checksum % 11 === 10) {
		    checksum = 0;
		    weight = 3;

		    for (var _i3 = 0; _i3 < 10; _i3++) {
		      checksum += digits[_i3] * weight;
		      weight += 1;

		      if (weight === 10) {
		        weight = 1;
		      }
		    }

		    if (checksum % 11 === 10) {
		      return digits[10] === 0;
		    }
		  }

		  return checksum % 11 === digits[10];
		}
		/*
		 * fi-FI validation function
		 * (Henkilötunnus (HETU), persons only)
		 * Checks if birth date (first six digits plus century symbol) is valid
		 * and calculates check (last) digit
		 */


		function fiFiCheck(tin) {
		  // Extract year and add century
		  var full_year = tin.slice(4, 6);
		  var century_symbol = tin.slice(6, 7);

		  switch (century_symbol) {
		    case '+':
		      full_year = "18".concat(full_year);
		      break;

		    case '-':
		      full_year = "19".concat(full_year);
		      break;

		    default:
		      full_year = "20".concat(full_year);
		      break;
		  } // Check date validity


		  var date = "".concat(full_year, "/").concat(tin.slice(2, 4), "/").concat(tin.slice(0, 2));

		  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
		    return false;
		  } // Calculate check character


		  var checksum = parseInt(tin.slice(0, 6) + tin.slice(7, 10), 10) % 31;

		  if (checksum < 10) {
		    return checksum === parseInt(tin.slice(10), 10);
		  }

		  checksum -= 10;
		  var letters_lookup = ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y'];
		  return letters_lookup[checksum] === tin.slice(10);
		}
		/*
		 * fr/nl-BE validation function
		 * (Numéro national (N.N.), persons only)
		 * Checks if birth date (first six digits) is valid and calculates check (last two) digits
		 */


		function frBeCheck(tin) {
		  // Zero month/day value is acceptable
		  if (tin.slice(2, 4) !== '00' || tin.slice(4, 6) !== '00') {
		    // Extract date from first six digits of TIN
		    var date = "".concat(tin.slice(0, 2), "/").concat(tin.slice(2, 4), "/").concat(tin.slice(4, 6));

		    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {
		      return false;
		    }
		  }

		  var checksum = 97 - parseInt(tin.slice(0, 9), 10) % 97;
		  var checkdigits = parseInt(tin.slice(9, 11), 10);

		  if (checksum !== checkdigits) {
		    checksum = 97 - parseInt("2".concat(tin.slice(0, 9)), 10) % 97;

		    if (checksum !== checkdigits) {
		      return false;
		    }
		  }

		  return true;
		}
		/*
		 * fr-FR validation function
		 * (Numéro fiscal de référence (numéro SPI), persons only)
		 * Verify TIN validity by calculating check (last three) digits
		 */


		function frFrCheck(tin) {
		  tin = tin.replace(/\s/g, '');
		  var checksum = parseInt(tin.slice(0, 10), 10) % 511;
		  var checkdigits = parseInt(tin.slice(10, 13), 10);
		  return checksum === checkdigits;
		}
		/*
		 * fr/lb-LU validation function
		 * (numéro d’identification personnelle, persons only)
		 * Verify birth date validity and run Luhn and Verhoeff checks
		 */


		function frLuCheck(tin) {
		  // Extract date and check validity
		  var date = "".concat(tin.slice(0, 4), "/").concat(tin.slice(4, 6), "/").concat(tin.slice(6, 8));

		  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
		    return false;
		  } // Run Luhn check


		  if (!algorithms$1.luhnCheck(tin.slice(0, 12))) {
		    return false;
		  } // Remove Luhn check digit and run Verhoeff check


		  return algorithms$1.verhoeffCheck("".concat(tin.slice(0, 11)).concat(tin[12]));
		}
		/*
		 * hr-HR validation function
		 * (Osobni identifikacijski broj (OIB), persons/entities)
		 * Verify TIN validity by calling iso7064Check(digits)
		 */


		function hrHrCheck(tin) {
		  return algorithms$1.iso7064Check(tin);
		}
		/*
		 * hu-HU validation function
		 * (Adóazonosító jel, persons only)
		 * Verify TIN validity by calculating check (last) digit
		 */


		function huHuCheck(tin) {
		  // split digits into an array for further processing
		  var digits = tin.split('').map(function (a) {
		    return parseInt(a, 10);
		  });
		  var checksum = 8;

		  for (var i = 1; i < 9; i++) {
		    checksum += digits[i] * (i + 1);
		  }

		  return checksum % 11 === digits[9];
		}
		/*
		 * lt-LT validation function (should go here if needed)
		 * (Asmens kodas, persons/entities respectively)
		 * Current validation check is alias of etEeCheck- same format applies
		 */

		/*
		 * it-IT first/last name validity check
		 * Accepts it-IT TIN-encoded names as a three-element character array and checks their validity
		 * Due to lack of clarity between resources ("Are only Italian consonants used?
		 * What happens if a person has X in their name?" etc.) only two test conditions
		 * have been implemented:
		 * Vowels may only be followed by other vowels or an X character
		 * and X characters after vowels may only be followed by other X characters.
		 */


		function itItNameCheck(name) {
		  // true at the first occurence of a vowel
		  var vowelflag = false; // true at the first occurence of an X AFTER vowel
		  // (to properly handle last names with X as consonant)

		  var xflag = false;

		  for (var i = 0; i < 3; i++) {
		    if (!vowelflag && /[AEIOU]/.test(name[i])) {
		      vowelflag = true;
		    } else if (!xflag && vowelflag && name[i] === 'X') {
		      xflag = true;
		    } else if (i > 0) {
		      if (vowelflag && !xflag) {
		        if (!/[AEIOU]/.test(name[i])) {
		          return false;
		        }
		      }

		      if (xflag) {
		        if (!/X/.test(name[i])) {
		          return false;
		        }
		      }
		    }
		  }

		  return true;
		}
		/*
		 * it-IT validation function
		 * (Codice fiscale (TIN-IT), persons only)
		 * Verify name, birth date and codice catastale validity
		 * and calculate check character.
		 * Material not in DG-TAXUD document sourced from:
		 * `https://en.wikipedia.org/wiki/Italian_fiscal_code`
		 */


		function itItCheck(tin) {
		  // Capitalize and split characters into an array for further processing
		  var chars = tin.toUpperCase().split(''); // Check first and last name validity calling itItNameCheck()

		  if (!itItNameCheck(chars.slice(0, 3))) {
		    return false;
		  }

		  if (!itItNameCheck(chars.slice(3, 6))) {
		    return false;
		  } // Convert letters in number spaces back to numbers if any


		  var number_locations = [6, 7, 9, 10, 12, 13, 14];
		  var number_replace = {
		    L: '0',
		    M: '1',
		    N: '2',
		    P: '3',
		    Q: '4',
		    R: '5',
		    S: '6',
		    T: '7',
		    U: '8',
		    V: '9'
		  };

		  for (var _i4 = 0, _number_locations = number_locations; _i4 < _number_locations.length; _i4++) {
		    var i = _number_locations[_i4];

		    if (chars[i] in number_replace) {
		      chars.splice(i, 1, number_replace[chars[i]]);
		    }
		  } // Extract month and day, and check date validity


		  var month_replace = {
		    A: '01',
		    B: '02',
		    C: '03',
		    D: '04',
		    E: '05',
		    H: '06',
		    L: '07',
		    M: '08',
		    P: '09',
		    R: '10',
		    S: '11',
		    T: '12'
		  };
		  var month = month_replace[chars[8]];
		  var day = parseInt(chars[9] + chars[10], 10);

		  if (day > 40) {
		    day -= 40;
		  }

		  if (day < 10) {
		    day = "0".concat(day);
		  }

		  var date = "".concat(chars[6]).concat(chars[7], "/").concat(month, "/").concat(day);

		  if (!(0, _isDate.default)(date, 'YY/MM/DD')) {
		    return false;
		  } // Calculate check character by adding up even and odd characters as numbers


		  var checksum = 0;

		  for (var _i5 = 1; _i5 < chars.length - 1; _i5 += 2) {
		    var char_to_int = parseInt(chars[_i5], 10);

		    if (isNaN(char_to_int)) {
		      char_to_int = chars[_i5].charCodeAt(0) - 65;
		    }

		    checksum += char_to_int;
		  }

		  var odd_convert = {
		    // Maps of characters at odd places
		    A: 1,
		    B: 0,
		    C: 5,
		    D: 7,
		    E: 9,
		    F: 13,
		    G: 15,
		    H: 17,
		    I: 19,
		    J: 21,
		    K: 2,
		    L: 4,
		    M: 18,
		    N: 20,
		    O: 11,
		    P: 3,
		    Q: 6,
		    R: 8,
		    S: 12,
		    T: 14,
		    U: 16,
		    V: 10,
		    W: 22,
		    X: 25,
		    Y: 24,
		    Z: 23,
		    0: 1,
		    1: 0
		  };

		  for (var _i6 = 0; _i6 < chars.length - 1; _i6 += 2) {
		    var _char_to_int = 0;

		    if (chars[_i6] in odd_convert) {
		      _char_to_int = odd_convert[chars[_i6]];
		    } else {
		      var multiplier = parseInt(chars[_i6], 10);
		      _char_to_int = 2 * multiplier + 1;

		      if (multiplier > 4) {
		        _char_to_int += 2;
		      }
		    }

		    checksum += _char_to_int;
		  }

		  if (String.fromCharCode(65 + checksum % 26) !== chars[15]) {
		    return false;
		  }

		  return true;
		}
		/*
		 * lv-LV validation function
		 * (Personas kods (PK), persons only)
		 * Check validity of birth date and calculate check (last) digit
		 * Support only for old format numbers (not starting with '32', issued before 2017/07/01)
		 * Material not in DG TAXUD document sourced from:
		 * `https://boot.ritakafija.lv/forums/index.php?/topic/88314-personas-koda-algoritms-%C4%8Deksumma/`
		 */


		function lvLvCheck(tin) {
		  tin = tin.replace(/\W/, ''); // Extract date from TIN

		  var day = tin.slice(0, 2);

		  if (day !== '32') {
		    // No date/checksum check if new format
		    var month = tin.slice(2, 4);

		    if (month !== '00') {
		      // No date check if unknown month
		      var full_year = tin.slice(4, 6);

		      switch (tin[6]) {
		        case '0':
		          full_year = "18".concat(full_year);
		          break;

		        case '1':
		          full_year = "19".concat(full_year);
		          break;

		        default:
		          full_year = "20".concat(full_year);
		          break;
		      } // Check date validity


		      var date = "".concat(full_year, "/").concat(tin.slice(2, 4), "/").concat(day);

		      if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
		        return false;
		      }
		    } // Calculate check digit


		    var checksum = 1101;
		    var multip_lookup = [1, 6, 3, 7, 9, 10, 5, 8, 4, 2];

		    for (var i = 0; i < tin.length - 1; i++) {
		      checksum -= parseInt(tin[i], 10) * multip_lookup[i];
		    }

		    return parseInt(tin[10], 10) === checksum % 11;
		  }

		  return true;
		}
		/*
		 * mt-MT validation function
		 * (Identity Card Number or Unique Taxpayer Reference, persons/entities)
		 * Verify Identity Card Number structure (no other tests found)
		 */


		function mtMtCheck(tin) {
		  if (tin.length !== 9) {
		    // No tests for UTR
		    var chars = tin.toUpperCase().split(''); // Fill with zeros if smaller than proper

		    while (chars.length < 8) {
		      chars.unshift(0);
		    } // Validate format according to last character


		    switch (tin[7]) {
		      case 'A':
		      case 'P':
		        if (parseInt(chars[6], 10) === 0) {
		          return false;
		        }

		        break;

		      default:
		        {
		          var first_part = parseInt(chars.join('').slice(0, 5), 10);

		          if (first_part > 32000) {
		            return false;
		          }

		          var second_part = parseInt(chars.join('').slice(5, 7), 10);

		          if (first_part === second_part) {
		            return false;
		          }
		        }
		    }
		  }

		  return true;
		}
		/*
		 * nl-NL validation function
		 * (Burgerservicenummer (BSN) or Rechtspersonen Samenwerkingsverbanden Informatie Nummer (RSIN),
		 * persons/entities respectively)
		 * Verify TIN validity by calculating check (last) digit (variant of MOD 11)
		 */


		function nlNlCheck(tin) {
		  return algorithms$1.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {
		    return parseInt(a, 10);
		  }), 9) % 11 === parseInt(tin[8], 10);
		}
		/*
		 * pl-PL validation function
		 * (Powszechny Elektroniczny System Ewidencji Ludności (PESEL)
		 * or Numer identyfikacji podatkowej (NIP), persons/entities)
		 * Verify TIN validity by validating birth date (PESEL) and calculating check (last) digit
		 */


		function plPlCheck(tin) {
		  // NIP
		  if (tin.length === 10) {
		    // Calculate last digit by multiplying with lookup
		    var lookup = [6, 5, 7, 2, 3, 4, 5, 6, 7];
		    var _checksum = 0;

		    for (var i = 0; i < lookup.length; i++) {
		      _checksum += parseInt(tin[i], 10) * lookup[i];
		    }

		    _checksum %= 11;

		    if (_checksum === 10) {
		      return false;
		    }

		    return _checksum === parseInt(tin[9], 10);
		  } // PESEL
		  // Extract full year using month


		  var full_year = tin.slice(0, 2);
		  var month = parseInt(tin.slice(2, 4), 10);

		  if (month > 80) {
		    full_year = "18".concat(full_year);
		    month -= 80;
		  } else if (month > 60) {
		    full_year = "22".concat(full_year);
		    month -= 60;
		  } else if (month > 40) {
		    full_year = "21".concat(full_year);
		    month -= 40;
		  } else if (month > 20) {
		    full_year = "20".concat(full_year);
		    month -= 20;
		  } else {
		    full_year = "19".concat(full_year);
		  } // Add leading zero to month if needed


		  if (month < 10) {
		    month = "0".concat(month);
		  } // Check date validity


		  var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));

		  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
		    return false;
		  } // Calculate last digit by mulitplying with odd one-digit numbers except 5


		  var checksum = 0;
		  var multiplier = 1;

		  for (var _i7 = 0; _i7 < tin.length - 1; _i7++) {
		    checksum += parseInt(tin[_i7], 10) * multiplier % 10;
		    multiplier += 2;

		    if (multiplier > 10) {
		      multiplier = 1;
		    } else if (multiplier === 5) {
		      multiplier += 2;
		    }
		  }

		  checksum = 10 - checksum % 10;
		  return checksum === parseInt(tin[10], 10);
		}
		/*
		* pt-BR validation function
		* (Cadastro de Pessoas Físicas (CPF, persons)
		* Cadastro Nacional de Pessoas Jurídicas (CNPJ, entities)
		* Both inputs will be validated
		*/


		function ptBrCheck(tin) {
		  if (tin.length === 11) {
		    var _sum;

		    var remainder;
		    _sum = 0;
		    if ( // Reject known invalid CPFs
		    tin === '11111111111' || tin === '22222222222' || tin === '33333333333' || tin === '44444444444' || tin === '55555555555' || tin === '66666666666' || tin === '77777777777' || tin === '88888888888' || tin === '99999999999' || tin === '00000000000') return false;

		    for (var i = 1; i <= 9; i++) {
		      _sum += parseInt(tin.substring(i - 1, i), 10) * (11 - i);
		    }

		    remainder = _sum * 10 % 11;
		    if (remainder === 10) remainder = 0;
		    if (remainder !== parseInt(tin.substring(9, 10), 10)) return false;
		    _sum = 0;

		    for (var _i8 = 1; _i8 <= 10; _i8++) {
		      _sum += parseInt(tin.substring(_i8 - 1, _i8), 10) * (12 - _i8);
		    }

		    remainder = _sum * 10 % 11;
		    if (remainder === 10) remainder = 0;
		    if (remainder !== parseInt(tin.substring(10, 11), 10)) return false;
		    return true;
		  }

		  if ( // Reject know invalid CNPJs
		  tin === '00000000000000' || tin === '11111111111111' || tin === '22222222222222' || tin === '33333333333333' || tin === '44444444444444' || tin === '55555555555555' || tin === '66666666666666' || tin === '77777777777777' || tin === '88888888888888' || tin === '99999999999999') {
		    return false;
		  }

		  var length = tin.length - 2;
		  var identifiers = tin.substring(0, length);
		  var verificators = tin.substring(length);
		  var sum = 0;
		  var pos = length - 7;

		  for (var _i9 = length; _i9 >= 1; _i9--) {
		    sum += identifiers.charAt(length - _i9) * pos;
		    pos -= 1;

		    if (pos < 2) {
		      pos = 9;
		    }
		  }

		  var result = sum % 11 < 2 ? 0 : 11 - sum % 11;

		  if (result !== parseInt(verificators.charAt(0), 10)) {
		    return false;
		  }

		  length += 1;
		  identifiers = tin.substring(0, length);
		  sum = 0;
		  pos = length - 7;

		  for (var _i10 = length; _i10 >= 1; _i10--) {
		    sum += identifiers.charAt(length - _i10) * pos;
		    pos -= 1;

		    if (pos < 2) {
		      pos = 9;
		    }
		  }

		  result = sum % 11 < 2 ? 0 : 11 - sum % 11;

		  if (result !== parseInt(verificators.charAt(1), 10)) {
		    return false;
		  }

		  return true;
		}
		/*
		 * pt-PT validation function
		 * (Número de identificação fiscal (NIF), persons/entities)
		 * Verify TIN validity by calculating check (last) digit (variant of MOD 11)
		 */


		function ptPtCheck(tin) {
		  var checksum = 11 - algorithms$1.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {
		    return parseInt(a, 10);
		  }), 9) % 11;

		  if (checksum > 9) {
		    return parseInt(tin[8], 10) === 0;
		  }

		  return checksum === parseInt(tin[8], 10);
		}
		/*
		 * ro-RO validation function
		 * (Cod Numeric Personal (CNP) or Cod de înregistrare fiscală (CIF),
		 * persons only)
		 * Verify CNP validity by calculating check (last) digit (test not found for CIF)
		 * Material not in DG TAXUD document sourced from:
		 * `https://en.wikipedia.org/wiki/National_identification_number#Romania`
		 */


		function roRoCheck(tin) {
		  if (tin.slice(0, 4) !== '9000') {
		    // No test found for this format
		    // Extract full year using century digit if possible
		    var full_year = tin.slice(1, 3);

		    switch (tin[0]) {
		      case '1':
		      case '2':
		        full_year = "19".concat(full_year);
		        break;

		      case '3':
		      case '4':
		        full_year = "18".concat(full_year);
		        break;

		      case '5':
		      case '6':
		        full_year = "20".concat(full_year);
		        break;

		      default:
		    } // Check date validity


		    var date = "".concat(full_year, "/").concat(tin.slice(3, 5), "/").concat(tin.slice(5, 7));

		    if (date.length === 8) {
		      if (!(0, _isDate.default)(date, 'YY/MM/DD')) {
		        return false;
		      }
		    } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
		      return false;
		    } // Calculate check digit


		    var digits = tin.split('').map(function (a) {
		      return parseInt(a, 10);
		    });
		    var multipliers = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];
		    var checksum = 0;

		    for (var i = 0; i < multipliers.length; i++) {
		      checksum += digits[i] * multipliers[i];
		    }

		    if (checksum % 11 === 10) {
		      return digits[12] === 1;
		    }

		    return digits[12] === checksum % 11;
		  }

		  return true;
		}
		/*
		 * sk-SK validation function
		 * (Rodné číslo (RČ) or bezvýznamové identifikačné číslo (BIČ), persons only)
		 * Checks validity of pre-1954 birth numbers (rodné číslo) only
		 * Due to the introduction of the pseudo-random BIČ it is not possible to test
		 * post-1954 birth numbers without knowing whether they are BIČ or RČ beforehand
		 */


		function skSkCheck(tin) {
		  if (tin.length === 9) {
		    tin = tin.replace(/\W/, '');

		    if (tin.slice(6) === '000') {
		      return false;
		    } // Three-zero serial not assigned before 1954
		    // Extract full year from TIN length


		    var full_year = parseInt(tin.slice(0, 2), 10);

		    if (full_year > 53) {
		      return false;
		    }

		    if (full_year < 10) {
		      full_year = "190".concat(full_year);
		    } else {
		      full_year = "19".concat(full_year);
		    } // Extract month from TIN and normalize


		    var month = parseInt(tin.slice(2, 4), 10);

		    if (month > 50) {
		      month -= 50;
		    }

		    if (month < 10) {
		      month = "0".concat(month);
		    } // Check date validity


		    var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));

		    if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
		      return false;
		    }
		  }

		  return true;
		}
		/*
		 * sl-SI validation function
		 * (Davčna številka, persons/entities)
		 * Verify TIN validity by calculating check (last) digit (variant of MOD 11)
		 */


		function slSiCheck(tin) {
		  var checksum = 11 - algorithms$1.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {
		    return parseInt(a, 10);
		  }), 8) % 11;

		  if (checksum === 10) {
		    return parseInt(tin[7], 10) === 0;
		  }

		  return checksum === parseInt(tin[7], 10);
		}
		/*
		 * sv-SE validation function
		 * (Personnummer or samordningsnummer, persons only)
		 * Checks validity of birth date and calls luhnCheck() to validate check (last) digit
		 */


		function svSeCheck(tin) {
		  // Make copy of TIN and normalize to two-digit year form
		  var tin_copy = tin.slice(0);

		  if (tin.length > 11) {
		    tin_copy = tin_copy.slice(2);
		  } // Extract date of birth


		  var full_year = '';
		  var month = tin_copy.slice(2, 4);
		  var day = parseInt(tin_copy.slice(4, 6), 10);

		  if (tin.length > 11) {
		    full_year = tin.slice(0, 4);
		  } else {
		    full_year = tin.slice(0, 2);

		    if (tin.length === 11 && day < 60) {
		      // Extract full year from centenarian symbol
		      // Should work just fine until year 10000 or so
		      var current_year = new Date().getFullYear().toString();
		      var current_century = parseInt(current_year.slice(0, 2), 10);
		      current_year = parseInt(current_year, 10);

		      if (tin[6] === '-') {
		        if (parseInt("".concat(current_century).concat(full_year), 10) > current_year) {
		          full_year = "".concat(current_century - 1).concat(full_year);
		        } else {
		          full_year = "".concat(current_century).concat(full_year);
		        }
		      } else {
		        full_year = "".concat(current_century - 1).concat(full_year);

		        if (current_year - parseInt(full_year, 10) < 100) {
		          return false;
		        }
		      }
		    }
		  } // Normalize day and check date validity


		  if (day > 60) {
		    day -= 60;
		  }

		  if (day < 10) {
		    day = "0".concat(day);
		  }

		  var date = "".concat(full_year, "/").concat(month, "/").concat(day);

		  if (date.length === 8) {
		    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {
		      return false;
		    }
		  } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {
		    return false;
		  }

		  return algorithms$1.luhnCheck(tin.replace(/\W/, ''));
		} // Locale lookup objects

		/*
		 * Tax id regex formats for various locales
		 *
		 * Where not explicitly specified in DG-TAXUD document both
		 * uppercase and lowercase letters are acceptable.
		 */


		var taxIdFormat = {
		  'bg-BG': /^\d{10}$/,
		  'cs-CZ': /^\d{6}\/{0,1}\d{3,4}$/,
		  'de-AT': /^\d{9}$/,
		  'de-DE': /^[1-9]\d{10}$/,
		  'dk-DK': /^\d{6}-{0,1}\d{4}$/,
		  'el-CY': /^[09]\d{7}[A-Z]$/,
		  'el-GR': /^([0-4]|[7-9])\d{8}$/,
		  'en-GB': /^\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\d{6}[ABCD ]$/i,
		  'en-IE': /^\d{7}[A-W][A-IW]{0,1}$/i,
		  'en-US': /^\d{2}[- ]{0,1}\d{7}$/,
		  'es-ES': /^(\d{0,8}|[XYZKLM]\d{7})[A-HJ-NP-TV-Z]$/i,
		  'et-EE': /^[1-6]\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\d$/,
		  'fi-FI': /^\d{6}[-+A]\d{3}[0-9A-FHJ-NPR-Y]$/i,
		  'fr-BE': /^\d{11}$/,
		  'fr-FR': /^[0-3]\d{12}$|^[0-3]\d\s\d{2}(\s\d{3}){3}$/,
		  // Conforms both to official spec and provided example
		  'fr-LU': /^\d{13}$/,
		  'hr-HR': /^\d{11}$/,
		  'hu-HU': /^8\d{9}$/,
		  'it-IT': /^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,
		  'lv-LV': /^\d{6}-{0,1}\d{5}$/,
		  // Conforms both to DG TAXUD spec and original research
		  'mt-MT': /^\d{3,7}[APMGLHBZ]$|^([1-8])\1\d{7}$/i,
		  'nl-NL': /^\d{9}$/,
		  'pl-PL': /^\d{10,11}$/,
		  'pt-BR': /(?:^\d{11}$)|(?:^\d{14}$)/,
		  'pt-PT': /^\d{9}$/,
		  'ro-RO': /^\d{13}$/,
		  'sk-SK': /^\d{6}\/{0,1}\d{3,4}$/,
		  'sl-SI': /^[1-9]\d{7}$/,
		  'sv-SE': /^(\d{6}[-+]{0,1}\d{4}|(18|19|20)\d{6}[-+]{0,1}\d{4})$/
		}; // taxIdFormat locale aliases

		taxIdFormat['lb-LU'] = taxIdFormat['fr-LU'];
		taxIdFormat['lt-LT'] = taxIdFormat['et-EE'];
		taxIdFormat['nl-BE'] = taxIdFormat['fr-BE']; // Algorithmic tax id check functions for various locales

		var taxIdCheck = {
		  'bg-BG': bgBgCheck,
		  'cs-CZ': csCzCheck,
		  'de-AT': deAtCheck,
		  'de-DE': deDeCheck,
		  'dk-DK': dkDkCheck,
		  'el-CY': elCyCheck,
		  'el-GR': elGrCheck,
		  'en-IE': enIeCheck,
		  'en-US': enUsCheck,
		  'es-ES': esEsCheck,
		  'et-EE': etEeCheck,
		  'fi-FI': fiFiCheck,
		  'fr-BE': frBeCheck,
		  'fr-FR': frFrCheck,
		  'fr-LU': frLuCheck,
		  'hr-HR': hrHrCheck,
		  'hu-HU': huHuCheck,
		  'it-IT': itItCheck,
		  'lv-LV': lvLvCheck,
		  'mt-MT': mtMtCheck,
		  'nl-NL': nlNlCheck,
		  'pl-PL': plPlCheck,
		  'pt-BR': ptBrCheck,
		  'pt-PT': ptPtCheck,
		  'ro-RO': roRoCheck,
		  'sk-SK': skSkCheck,
		  'sl-SI': slSiCheck,
		  'sv-SE': svSeCheck
		}; // taxIdCheck locale aliases

		taxIdCheck['lb-LU'] = taxIdCheck['fr-LU'];
		taxIdCheck['lt-LT'] = taxIdCheck['et-EE'];
		taxIdCheck['nl-BE'] = taxIdCheck['fr-BE']; // Regexes for locales where characters should be omitted before checking format

		var allsymbols = /[-\\\/!@#$%\^&\*\(\)\+\=\[\]]+/g;
		var sanitizeRegexes = {
		  'de-AT': allsymbols,
		  'de-DE': /[\/\\]/g,
		  'fr-BE': allsymbols
		}; // sanitizeRegexes locale aliases

		sanitizeRegexes['nl-BE'] = sanitizeRegexes['fr-BE'];
		/*
		 * Validator function
		 * Return true if the passed string is a valid tax identification number
		 * for the specified locale.
		 * Throw an error exception if the locale is not supported.
		 */

		function isTaxID(str) {
		  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';
		  (0, _assertString.default)(str); // Copy TIN to avoid replacement if sanitized

		  var strcopy = str.slice(0);

		  if (locale in taxIdFormat) {
		    if (locale in sanitizeRegexes) {
		      strcopy = strcopy.replace(sanitizeRegexes[locale], '');
		    }

		    if (!taxIdFormat[locale].test(strcopy)) {
		      return false;
		    }

		    if (locale in taxIdCheck) {
		      return taxIdCheck[locale](strcopy);
		    } // Fallthrough; not all locales have algorithmic checks


		    return true;
		  }

		  throw new Error("Invalid locale '".concat(locale, "'"));
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isTaxID$1, isTaxID$1.exports));

	var isTaxID = /*@__PURE__*/getDefaultExportFromCjs(isTaxID$1.exports);

	var isMobilePhone$1 = {};

	"use strict";

	Object.defineProperty(isMobilePhone$1, "__esModule", {
	  value: true
	});
	var _default$3 = isMobilePhone$1.default = isMobilePhone;
	var locales_1$1 = isMobilePhone$1.locales = void 0;

	var _assertString$3 = _interopRequireDefault$3(assertString$1.exports);

	function _interopRequireDefault$3(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* eslint-disable max-len */
	var phones = {
	  'am-AM': /^(\+?374|0)((10|[9|7][0-9])\d{6}$|[2-4]\d{7}$)/,
	  'ar-AE': /^((\+?971)|0)?5[024568]\d{7}$/,
	  'ar-BH': /^(\+?973)?(3|6)\d{7}$/,
	  'ar-DZ': /^(\+?213|0)(5|6|7)\d{8}$/,
	  'ar-LB': /^(\+?961)?((3|81)\d{6}|7\d{7})$/,
	  'ar-EG': /^((\+?20)|0)?1[0125]\d{8}$/,
	  'ar-IQ': /^(\+?964|0)?7[0-9]\d{8}$/,
	  'ar-JO': /^(\+?962|0)?7[789]\d{7}$/,
	  'ar-KW': /^(\+?965)[569]\d{7}$/,
	  'ar-LY': /^((\+?218)|0)?(9[1-6]\d{7}|[1-8]\d{7,9})$/,
	  'ar-MA': /^(?:(?:\+|00)212|0)[5-7]\d{8}$/,
	  'ar-OM': /^((\+|00)968)?(9[1-9])\d{6}$/,
	  'ar-PS': /^(\+?970|0)5[6|9](\d{7})$/,
	  'ar-SA': /^(!?(\+?966)|0)?5\d{8}$/,
	  'ar-SY': /^(!?(\+?963)|0)?9\d{8}$/,
	  'ar-TN': /^(\+?216)?[2459]\d{7}$/,
	  'az-AZ': /^(\+994|0)(5[015]|7[07]|99)\d{7}$/,
	  'bs-BA': /^((((\+|00)3876)|06))((([0-3]|[5-6])\d{6})|(4\d{7}))$/,
	  'be-BY': /^(\+?375)?(24|25|29|33|44)\d{7}$/,
	  'bg-BG': /^(\+?359|0)?8[789]\d{7}$/,
	  'bn-BD': /^(\+?880|0)1[13456789][0-9]{8}$/,
	  'ca-AD': /^(\+376)?[346]\d{5}$/,
	  'cs-CZ': /^(\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
	  'da-DK': /^(\+?45)?\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2}$/,
	  'de-DE': /^((\+49|0)[1|3])([0|5][0-45-9]\d|6([23]|0\d?)|7([0-57-9]|6\d))\d{7,9}$/,
	  'de-AT': /^(\+43|0)\d{1,4}\d{3,12}$/,
	  'de-CH': /^(\+41|0)([1-9])\d{1,9}$/,
	  'de-LU': /^(\+352)?((6\d1)\d{6})$/,
	  'dv-MV': /^(\+?960)?(7[2-9]|91|9[3-9])\d{7}$/,
	  'el-GR': /^(\+?30|0)?(69\d{8})$/,
	  'en-AU': /^(\+?61|0)4\d{8}$/,
	  'en-BM': /^(\+?1)?441(((3|7)\d{6}$)|(5[0-3][0-9]\d{4}$)|(59\d{5}))/,
	  'en-GB': /^(\+?44|0)7\d{9}$/,
	  'en-GG': /^(\+?44|0)1481\d{6}$/,
	  'en-GH': /^(\+233|0)(20|50|24|54|27|57|26|56|23|28|55|59)\d{7}$/,
	  'en-GY': /^(\+592|0)6\d{6}$/,
	  'en-HK': /^(\+?852[-\s]?)?[456789]\d{3}[-\s]?\d{4}$/,
	  'en-MO': /^(\+?853[-\s]?)?[6]\d{3}[-\s]?\d{4}$/,
	  'en-IE': /^(\+?353|0)8[356789]\d{7}$/,
	  'en-IN': /^(\+?91|0)?[6789]\d{9}$/,
	  'en-KE': /^(\+?254|0)(7|1)\d{8}$/,
	  'en-KI': /^((\+686|686)?)?( )?((6|7)(2|3|8)[0-9]{6})$/,
	  'en-MT': /^(\+?356|0)?(99|79|77|21|27|22|25)[0-9]{6}$/,
	  'en-MU': /^(\+?230|0)?\d{8}$/,
	  'en-NA': /^(\+?264|0)(6|8)\d{7}$/,
	  'en-NG': /^(\+?234|0)?[789]\d{9}$/,
	  'en-NZ': /^(\+?64|0)[28]\d{7,9}$/,
	  'en-PK': /^((00|\+)?92|0)3[0-6]\d{8}$/,
	  'en-PH': /^(09|\+639)\d{9}$/,
	  'en-RW': /^(\+?250|0)?[7]\d{8}$/,
	  'en-SG': /^(\+65)?[3689]\d{7}$/,
	  'en-SL': /^(\+?232|0)\d{8}$/,
	  'en-TZ': /^(\+?255|0)?[67]\d{8}$/,
	  'en-UG': /^(\+?256|0)?[7]\d{8}$/,
	  'en-US': /^((\+1|1)?( |-)?)?(\([2-9][0-9]{2}\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,
	  'en-ZA': /^(\+?27|0)\d{9}$/,
	  'en-ZM': /^(\+?26)?09[567]\d{7}$/,
	  'en-ZW': /^(\+263)[0-9]{9}$/,
	  'en-BW': /^(\+?267)?(7[1-8]{1})\d{6}$/,
	  'es-AR': /^\+?549(11|[2368]\d)\d{8}$/,
	  'es-BO': /^(\+?591)?(6|7)\d{7}$/,
	  'es-CO': /^(\+?57)?3(0(0|1|2|4|5)|1\d|2[0-4]|5(0|1))\d{7}$/,
	  'es-CL': /^(\+?56|0)[2-9]\d{1}\d{7}$/,
	  'es-CR': /^(\+506)?[2-8]\d{7}$/,
	  'es-CU': /^(\+53|0053)?5\d{7}/,
	  'es-DO': /^(\+?1)?8[024]9\d{7}$/,
	  'es-HN': /^(\+?504)?[9|8]\d{7}$/,
	  'es-EC': /^(\+?593|0)([2-7]|9[2-9])\d{7}$/,
	  'es-ES': /^(\+?34)?[6|7]\d{8}$/,
	  'es-PE': /^(\+?51)?9\d{8}$/,
	  'es-MX': /^(\+?52)?(1|01)?\d{10,11}$/,
	  'es-PA': /^(\+?507)\d{7,8}$/,
	  'es-PY': /^(\+?595|0)9[9876]\d{7}$/,
	  'es-SV': /^(\+?503)?[67]\d{7}$/,
	  'es-UY': /^(\+598|0)9[1-9][\d]{6}$/,
	  'es-VE': /^(\+?58)?(2|4)\d{9}$/,
	  'et-EE': /^(\+?372)?\s?(5|8[1-4])\s?([0-9]\s?){6,7}$/,
	  'fa-IR': /^(\+?98[\-\s]?|0)9[0-39]\d[\-\s]?\d{3}[\-\s]?\d{4}$/,
	  'fi-FI': /^(\+?358|0)\s?(4(0|1|2|4|5|6)?|50)\s?(\d\s?){4,8}\d$/,
	  'fj-FJ': /^(\+?679)?\s?\d{3}\s?\d{4}$/,
	  'fo-FO': /^(\+?298)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
	  'fr-BF': /^(\+226|0)[67]\d{7}$/,
	  'fr-CM': /^(\+?237)6[0-9]{8}$/,
	  'fr-FR': /^(\+?33|0)[67]\d{8}$/,
	  'fr-GF': /^(\+?594|0|00594)[67]\d{8}$/,
	  'fr-GP': /^(\+?590|0|00590)[67]\d{8}$/,
	  'fr-MQ': /^(\+?596|0|00596)[67]\d{8}$/,
	  'fr-PF': /^(\+?689)?8[789]\d{6}$/,
	  'fr-RE': /^(\+?262|0|00262)[67]\d{8}$/,
	  'he-IL': /^(\+972|0)([23489]|5[012345689]|77)[1-9]\d{6}$/,
	  'hu-HU': /^(\+?36|06)(20|30|31|50|70)\d{7}$/,
	  'id-ID': /^(\+?62|0)8(1[123456789]|2[1238]|3[1238]|5[12356789]|7[78]|9[56789]|8[123456789])([\s?|\d]{5,11})$/,
	  'it-IT': /^(\+?39)?\s?3\d{2} ?\d{6,7}$/,
	  'it-SM': /^((\+378)|(0549)|(\+390549)|(\+3780549))?6\d{5,9}$/,
	  'ja-JP': /^(\+81[ \-]?(\(0\))?|0)[6789]0[ \-]?\d{4}[ \-]?\d{4}$/,
	  'ka-GE': /^(\+?995)?(5|79)\d{7}$/,
	  'kk-KZ': /^(\+?7|8)?7\d{9}$/,
	  'kl-GL': /^(\+?299)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
	  'ko-KR': /^((\+?82)[ \-]?)?0?1([0|1|6|7|8|9]{1})[ \-]?\d{3,4}[ \-]?\d{4}$/,
	  'lt-LT': /^(\+370|8)\d{8}$/,
	  'lv-LV': /^(\+?371)2\d{7}$/,
	  'ms-MY': /^(\+?6?01){1}(([0145]{1}(\-|\s)?\d{7,8})|([236789]{1}(\s|\-)?\d{7}))$/,
	  'mz-MZ': /^(\+?258)?8[234567]\d{7}$/,
	  'nb-NO': /^(\+?47)?[49]\d{7}$/,
	  'ne-NP': /^(\+?977)?9[78]\d{8}$/,
	  'nl-BE': /^(\+?32|0)4\d{8}$/,
	  'nl-NL': /^(((\+|00)?31\(0\))|((\+|00)?31)|0)6{1}\d{8}$/,
	  'nn-NO': /^(\+?47)?[49]\d{7}$/,
	  'pl-PL': /^(\+?48)? ?[5-8]\d ?\d{3} ?\d{2} ?\d{2}$/,
	  'pt-BR': /^((\+?55\ ?[1-9]{2}\ ?)|(\+?55\ ?\([1-9]{2}\)\ ?)|(0[1-9]{2}\ ?)|(\([1-9]{2}\)\ ?)|([1-9]{2}\ ?))((\d{4}\-?\d{4})|(9[2-9]{1}\d{3}\-?\d{4}))$/,
	  'pt-PT': /^(\+?351)?9[1236]\d{7}$/,
	  'pt-AO': /^(\+244)\d{9}$/,
	  'ro-RO': /^(\+?4?0)\s?7\d{2}(\/|\s|\.|\-)?\d{3}(\s|\.|\-)?\d{3}$/,
	  'ru-RU': /^(\+?7|8)?9\d{9}$/,
	  'si-LK': /^(?:0|94|\+94)?(7(0|1|2|4|5|6|7|8)( |-)?)\d{7}$/,
	  'sl-SI': /^(\+386\s?|0)(\d{1}\s?\d{3}\s?\d{2}\s?\d{2}|\d{2}\s?\d{3}\s?\d{3})$/,
	  'sk-SK': /^(\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
	  'sq-AL': /^(\+355|0)6[789]\d{6}$/,
	  'sr-RS': /^(\+3816|06)[- \d]{5,9}$/,
	  'sv-SE': /^(\+?46|0)[\s\-]?7[\s\-]?[02369]([\s\-]?\d){7}$/,
	  'tg-TJ': /^(\+?992)?[5][5]\d{7}$/,
	  'th-TH': /^(\+66|66|0)\d{9}$/,
	  'tr-TR': /^(\+?90|0)?5\d{9}$/,
	  'tk-TM': /^(\+993|993|8)\d{8}$/,
	  'uk-UA': /^(\+?38|8)?0\d{9}$/,
	  'uz-UZ': /^(\+?998)?(6[125-79]|7[1-69]|88|9\d)\d{7}$/,
	  'vi-VN': /^((\+?84)|0)((3([2-9]))|(5([25689]))|(7([0|6-9]))|(8([1-9]))|(9([0-9])))([0-9]{7})$/,
	  'zh-CN': /^((\+|00)86)?(1[3-9]|9[28])\d{9}$/,
	  'zh-TW': /^(\+?886\-?|0)?9\d{8}$/,
	  'dz-BT': /^(\+?975|0)?(17|16|77|02)\d{6}$/
	};
	/* eslint-enable max-len */
	// aliases

	phones['en-CA'] = phones['en-US'];
	phones['fr-CA'] = phones['en-CA'];
	phones['fr-BE'] = phones['nl-BE'];
	phones['zh-HK'] = phones['en-HK'];
	phones['zh-MO'] = phones['en-MO'];
	phones['ga-IE'] = phones['en-IE'];
	phones['fr-CH'] = phones['de-CH'];
	phones['it-CH'] = phones['fr-CH'];

	function isMobilePhone(str, locale, options) {
	  (0, _assertString$3.default)(str);

	  if (options && options.strictMode && !str.startsWith('+')) {
	    return false;
	  }

	  if (Array.isArray(locale)) {
	    return locale.some(function (key) {
	      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
	      // istanbul ignore else
	      if (phones.hasOwnProperty(key)) {
	        var phone = phones[key];

	        if (phone.test(str)) {
	          return true;
	        }
	      }

	      return false;
	    });
	  } else if (locale in phones) {
	    return phones[locale].test(str); // alias falsey locale as 'any'
	  } else if (!locale || locale === 'any') {
	    for (var key in phones) {
	      // istanbul ignore else
	      if (phones.hasOwnProperty(key)) {
	        var phone = phones[key];

	        if (phone.test(str)) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  throw new Error("Invalid locale '".concat(locale, "'"));
	}

	var locales$1 = Object.keys(phones);
	locales_1$1 = isMobilePhone$1.locales = locales$1;

	var isEthereumAddress$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isEthereumAddress;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var eth = /^(0x)[0-9a-f]{40}$/i;

		function isEthereumAddress(str) {
		  (0, _assertString.default)(str);
		  return eth.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isEthereumAddress$1, isEthereumAddress$1.exports));

	var isEthereumAddress = /*@__PURE__*/getDefaultExportFromCjs(isEthereumAddress$1.exports);

	var isCurrency$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isCurrency;

		var _merge = _interopRequireDefault(merge$1.exports);

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function currencyRegex(options) {
		  var decimal_digits = "\\d{".concat(options.digits_after_decimal[0], "}");
		  options.digits_after_decimal.forEach(function (digit, index) {
		    if (index !== 0) decimal_digits = "".concat(decimal_digits, "|\\d{").concat(digit, "}");
		  });
		  var symbol = "(".concat(options.symbol.replace(/\W/, function (m) {
		    return "\\".concat(m);
		  }), ")").concat(options.require_symbol ? '' : '?'),
		      negative = '-?',
		      whole_dollar_amount_without_sep = '[1-9]\\d*',
		      whole_dollar_amount_with_sep = "[1-9]\\d{0,2}(\\".concat(options.thousands_separator, "\\d{3})*"),
		      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],
		      whole_dollar_amount = "(".concat(valid_whole_dollar_amounts.join('|'), ")?"),
		      decimal_amount = "(\\".concat(options.decimal_separator, "(").concat(decimal_digits, "))").concat(options.require_decimal ? '' : '?');
		  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : ''); // default is negative sign before symbol, but there are two other options (besides parens)

		  if (options.allow_negatives && !options.parens_for_negatives) {
		    if (options.negative_sign_after_digits) {
		      pattern += negative;
		    } else if (options.negative_sign_before_digits) {
		      pattern = negative + pattern;
		    }
		  } // South African Rand, for example, uses R 123 (space) and R-123 (no space)


		  if (options.allow_negative_sign_placeholder) {
		    pattern = "( (?!\\-))?".concat(pattern);
		  } else if (options.allow_space_after_symbol) {
		    pattern = " ?".concat(pattern);
		  } else if (options.allow_space_after_digits) {
		    pattern += '( (?!$))?';
		  }

		  if (options.symbol_after_digits) {
		    pattern += symbol;
		  } else {
		    pattern = symbol + pattern;
		  }

		  if (options.allow_negatives) {
		    if (options.parens_for_negatives) {
		      pattern = "(\\(".concat(pattern, "\\)|").concat(pattern, ")");
		    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {
		      pattern = negative + pattern;
		    }
		  } // ensure there's a dollar and/or decimal amount, and that
		  // it doesn't start with a space or a negative sign followed by a space


		  return new RegExp("^(?!-? )(?=.*\\d)".concat(pattern, "$"));
		}

		var default_currency_options = {
		  symbol: '$',
		  require_symbol: false,
		  allow_space_after_symbol: false,
		  symbol_after_digits: false,
		  allow_negatives: true,
		  parens_for_negatives: false,
		  negative_sign_before_digits: false,
		  negative_sign_after_digits: false,
		  allow_negative_sign_placeholder: false,
		  thousands_separator: ',',
		  decimal_separator: '.',
		  allow_decimal: true,
		  require_decimal: false,
		  digits_after_decimal: [2],
		  allow_space_after_digits: false
		};

		function isCurrency(str, options) {
		  (0, _assertString.default)(str);
		  options = (0, _merge.default)(options, default_currency_options);
		  return currencyRegex(options).test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isCurrency$1, isCurrency$1.exports));

	var isCurrency = /*@__PURE__*/getDefaultExportFromCjs(isCurrency$1.exports);

	var isBtcAddress$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isBtcAddress;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		// supports Bech32 addresses
		var bech32 = /^(bc1)[a-z0-9]{25,39}$/;
		var base58 = /^(1|3)[A-HJ-NP-Za-km-z1-9]{25,39}$/;

		function isBtcAddress(str) {
		  (0, _assertString.default)(str); // check for bech32

		  if (str.startsWith('bc1')) {
		    return bech32.test(str);
		  }

		  return base58.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isBtcAddress$1, isBtcAddress$1.exports));

	var isBtcAddress = /*@__PURE__*/getDefaultExportFromCjs(isBtcAddress$1.exports);

	var isISO8601$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isISO8601;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/* eslint-disable max-len */
		// from http://goo.gl/0ejHHW
		var iso8601 = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/; // same as above, except with a strict 'T' separator between date and time

		var iso8601StrictSeparator = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
		/* eslint-enable max-len */

		var isValidDate = function isValidDate(str) {
		  // str must have passed the ISO8601 check
		  // this check is meant to catch invalid dates
		  // like 2009-02-31
		  // first check for ordinal dates
		  var ordinalMatch = str.match(/^(\d{4})-?(\d{3})([ T]{1}\.*|$)/);

		  if (ordinalMatch) {
		    var oYear = Number(ordinalMatch[1]);
		    var oDay = Number(ordinalMatch[2]); // if is leap year

		    if (oYear % 4 === 0 && oYear % 100 !== 0 || oYear % 400 === 0) return oDay <= 366;
		    return oDay <= 365;
		  }

		  var match = str.match(/(\d{4})-?(\d{0,2})-?(\d*)/).map(Number);
		  var year = match[1];
		  var month = match[2];
		  var day = match[3];
		  var monthString = month ? "0".concat(month).slice(-2) : month;
		  var dayString = day ? "0".concat(day).slice(-2) : day; // create a date object and compare

		  var d = new Date("".concat(year, "-").concat(monthString || '01', "-").concat(dayString || '01'));

		  if (month && day) {
		    return d.getUTCFullYear() === year && d.getUTCMonth() + 1 === month && d.getUTCDate() === day;
		  }

		  return true;
		};

		function isISO8601(str) {
		  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		  (0, _assertString.default)(str);
		  var check = options.strictSeparator ? iso8601StrictSeparator.test(str) : iso8601.test(str);
		  if (check && options.strict) return isValidDate(str);
		  return check;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isISO8601$1, isISO8601$1.exports));

	var isISO8601 = /*@__PURE__*/getDefaultExportFromCjs(isISO8601$1.exports);

	var isRFC3339$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isRFC3339;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/* Based on https://tools.ietf.org/html/rfc3339#section-5.6 */
		var dateFullYear = /[0-9]{4}/;
		var dateMonth = /(0[1-9]|1[0-2])/;
		var dateMDay = /([12]\d|0[1-9]|3[01])/;
		var timeHour = /([01][0-9]|2[0-3])/;
		var timeMinute = /[0-5][0-9]/;
		var timeSecond = /([0-5][0-9]|60)/;
		var timeSecFrac = /(\.[0-9]+)?/;
		var timeNumOffset = new RegExp("[-+]".concat(timeHour.source, ":").concat(timeMinute.source));
		var timeOffset = new RegExp("([zZ]|".concat(timeNumOffset.source, ")"));
		var partialTime = new RegExp("".concat(timeHour.source, ":").concat(timeMinute.source, ":").concat(timeSecond.source).concat(timeSecFrac.source));
		var fullDate = new RegExp("".concat(dateFullYear.source, "-").concat(dateMonth.source, "-").concat(dateMDay.source));
		var fullTime = new RegExp("".concat(partialTime.source).concat(timeOffset.source));
		var rfc3339 = new RegExp("^".concat(fullDate.source, "[ tT]").concat(fullTime.source, "$"));

		function isRFC3339(str) {
		  (0, _assertString.default)(str);
		  return rfc3339.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isRFC3339$1, isRFC3339$1.exports));

	var isRFC3339 = /*@__PURE__*/getDefaultExportFromCjs(isRFC3339$1.exports);

	var isISO31661Alpha3$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isISO31661Alpha3;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
		var validISO31661Alpha3CountriesCodes = new Set(['AFG', 'ALA', 'ALB', 'DZA', 'ASM', 'AND', 'AGO', 'AIA', 'ATA', 'ATG', 'ARG', 'ARM', 'ABW', 'AUS', 'AUT', 'AZE', 'BHS', 'BHR', 'BGD', 'BRB', 'BLR', 'BEL', 'BLZ', 'BEN', 'BMU', 'BTN', 'BOL', 'BES', 'BIH', 'BWA', 'BVT', 'BRA', 'IOT', 'BRN', 'BGR', 'BFA', 'BDI', 'KHM', 'CMR', 'CAN', 'CPV', 'CYM', 'CAF', 'TCD', 'CHL', 'CHN', 'CXR', 'CCK', 'COL', 'COM', 'COG', 'COD', 'COK', 'CRI', 'CIV', 'HRV', 'CUB', 'CUW', 'CYP', 'CZE', 'DNK', 'DJI', 'DMA', 'DOM', 'ECU', 'EGY', 'SLV', 'GNQ', 'ERI', 'EST', 'ETH', 'FLK', 'FRO', 'FJI', 'FIN', 'FRA', 'GUF', 'PYF', 'ATF', 'GAB', 'GMB', 'GEO', 'DEU', 'GHA', 'GIB', 'GRC', 'GRL', 'GRD', 'GLP', 'GUM', 'GTM', 'GGY', 'GIN', 'GNB', 'GUY', 'HTI', 'HMD', 'VAT', 'HND', 'HKG', 'HUN', 'ISL', 'IND', 'IDN', 'IRN', 'IRQ', 'IRL', 'IMN', 'ISR', 'ITA', 'JAM', 'JPN', 'JEY', 'JOR', 'KAZ', 'KEN', 'KIR', 'PRK', 'KOR', 'KWT', 'KGZ', 'LAO', 'LVA', 'LBN', 'LSO', 'LBR', 'LBY', 'LIE', 'LTU', 'LUX', 'MAC', 'MKD', 'MDG', 'MWI', 'MYS', 'MDV', 'MLI', 'MLT', 'MHL', 'MTQ', 'MRT', 'MUS', 'MYT', 'MEX', 'FSM', 'MDA', 'MCO', 'MNG', 'MNE', 'MSR', 'MAR', 'MOZ', 'MMR', 'NAM', 'NRU', 'NPL', 'NLD', 'NCL', 'NZL', 'NIC', 'NER', 'NGA', 'NIU', 'NFK', 'MNP', 'NOR', 'OMN', 'PAK', 'PLW', 'PSE', 'PAN', 'PNG', 'PRY', 'PER', 'PHL', 'PCN', 'POL', 'PRT', 'PRI', 'QAT', 'REU', 'ROU', 'RUS', 'RWA', 'BLM', 'SHN', 'KNA', 'LCA', 'MAF', 'SPM', 'VCT', 'WSM', 'SMR', 'STP', 'SAU', 'SEN', 'SRB', 'SYC', 'SLE', 'SGP', 'SXM', 'SVK', 'SVN', 'SLB', 'SOM', 'ZAF', 'SGS', 'SSD', 'ESP', 'LKA', 'SDN', 'SUR', 'SJM', 'SWZ', 'SWE', 'CHE', 'SYR', 'TWN', 'TJK', 'TZA', 'THA', 'TLS', 'TGO', 'TKL', 'TON', 'TTO', 'TUN', 'TUR', 'TKM', 'TCA', 'TUV', 'UGA', 'UKR', 'ARE', 'GBR', 'USA', 'UMI', 'URY', 'UZB', 'VUT', 'VEN', 'VNM', 'VGB', 'VIR', 'WLF', 'ESH', 'YEM', 'ZMB', 'ZWE']);

		function isISO31661Alpha3(str) {
		  (0, _assertString.default)(str);
		  return validISO31661Alpha3CountriesCodes.has(str.toUpperCase());
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isISO31661Alpha3$1, isISO31661Alpha3$1.exports));

	var isISO31661Alpha3 = /*@__PURE__*/getDefaultExportFromCjs(isISO31661Alpha3$1.exports);

	var isISO4217$1 = {};

	"use strict";

	Object.defineProperty(isISO4217$1, "__esModule", {
	  value: true
	});
	var _default$2 = isISO4217$1.default = isISO4217;
	var CurrencyCodes_1 = isISO4217$1.CurrencyCodes = void 0;

	var _assertString$2 = _interopRequireDefault$2(assertString$1.exports);

	function _interopRequireDefault$2(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// from https://en.wikipedia.org/wiki/ISO_4217
	var validISO4217CurrencyCodes = new Set(['AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL', 'BSD', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLF', 'CLP', 'CNY', 'COP', 'COU', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'INR', 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MXV', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SRD', 'SSP', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'USN', 'UYI', 'UYU', 'UYW', 'UZS', 'VES', 'VND', 'VUV', 'WST', 'XAF', 'XAG', 'XAU', 'XBA', 'XBB', 'XBC', 'XBD', 'XCD', 'XDR', 'XOF', 'XPD', 'XPF', 'XPT', 'XSU', 'XTS', 'XUA', 'XXX', 'YER', 'ZAR', 'ZMW', 'ZWL']);

	function isISO4217(str) {
	  (0, _assertString$2.default)(str);
	  return validISO4217CurrencyCodes.has(str.toUpperCase());
	}

	var CurrencyCodes = validISO4217CurrencyCodes;
	CurrencyCodes_1 = isISO4217$1.CurrencyCodes = CurrencyCodes;

	var isBase32$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isBase32;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var base32 = /^[A-Z2-7]+=*$/;

		function isBase32(str) {
		  (0, _assertString.default)(str);
		  var len = str.length;

		  if (len % 8 === 0 && base32.test(str)) {
		    return true;
		  }

		  return false;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isBase32$1, isBase32$1.exports));

	var isBase32 = /*@__PURE__*/getDefaultExportFromCjs(isBase32$1.exports);

	var isBase58$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isBase58;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		// Accepted chars - 123456789ABCDEFGH JKLMN PQRSTUVWXYZabcdefghijk mnopqrstuvwxyz
		var base58Reg = /^[A-HJ-NP-Za-km-z1-9]*$/;

		function isBase58(str) {
		  (0, _assertString.default)(str);

		  if (base58Reg.test(str)) {
		    return true;
		  }

		  return false;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isBase58$1, isBase58$1.exports));

	var isBase58 = /*@__PURE__*/getDefaultExportFromCjs(isBase58$1.exports);

	var isDataURI$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isDataURI;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var validMediaType = /^[a-z]+\/[a-z0-9\-\+]+$/i;
		var validAttribute = /^[a-z\-]+=[a-z0-9\-]+$/i;
		var validData = /^[a-z0-9!\$&'\(\)\*\+,;=\-\._~:@\/\?%\s]*$/i;

		function isDataURI(str) {
		  (0, _assertString.default)(str);
		  var data = str.split(',');

		  if (data.length < 2) {
		    return false;
		  }

		  var attributes = data.shift().trim().split(';');
		  var schemeAndMediaType = attributes.shift();

		  if (schemeAndMediaType.substr(0, 5) !== 'data:') {
		    return false;
		  }

		  var mediaType = schemeAndMediaType.substr(5);

		  if (mediaType !== '' && !validMediaType.test(mediaType)) {
		    return false;
		  }

		  for (var i = 0; i < attributes.length; i++) {
		    if (!(i === attributes.length - 1 && attributes[i].toLowerCase() === 'base64') && !validAttribute.test(attributes[i])) {
		      return false;
		    }
		  }

		  for (var _i = 0; _i < data.length; _i++) {
		    if (!validData.test(data[_i])) {
		      return false;
		    }
		  }

		  return true;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isDataURI$1, isDataURI$1.exports));

	var isDataURI = /*@__PURE__*/getDefaultExportFromCjs(isDataURI$1.exports);

	var isMagnetURI$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isMagnetURI;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var magnetURI = /^magnet:\?xt(?:\.1)?=urn:(?:aich|bitprint|btih|ed2k|ed2khash|kzhash|md5|sha1|tree:tiger):[a-z0-9]{32}(?:[a-z0-9]{8})?($|&)/i;

		function isMagnetURI(url) {
		  (0, _assertString.default)(url);
		  return magnetURI.test(url.trim());
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isMagnetURI$1, isMagnetURI$1.exports));

	var isMagnetURI = /*@__PURE__*/getDefaultExportFromCjs(isMagnetURI$1.exports);

	var isMimeType$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isMimeType;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		/*
		  Checks if the provided string matches to a correct Media type format (MIME type)

		  This function only checks is the string format follows the
		  etablished rules by the according RFC specifications.
		  This function supports 'charset' in textual media types
		  (https://tools.ietf.org/html/rfc6657).

		  This function does not check against all the media types listed
		  by the IANA (https://www.iana.org/assignments/media-types/media-types.xhtml)
		  because of lightness purposes : it would require to include
		  all these MIME types in this librairy, which would weigh it
		  significantly. This kind of effort maybe is not worth for the use that
		  this function has in this entire librairy.

		  More informations in the RFC specifications :
		  - https://tools.ietf.org/html/rfc2045
		  - https://tools.ietf.org/html/rfc2046
		  - https://tools.ietf.org/html/rfc7231#section-3.1.1.1
		  - https://tools.ietf.org/html/rfc7231#section-3.1.1.5
		*/
		// Match simple MIME types
		// NB :
		//   Subtype length must not exceed 100 characters.
		//   This rule does not comply to the RFC specs (what is the max length ?).
		var mimeTypeSimple = /^(application|audio|font|image|message|model|multipart|text|video)\/[a-zA-Z0-9\.\-\+]{1,100}$/i; // eslint-disable-line max-len
		// Handle "charset" in "text/*"

		var mimeTypeText = /^text\/[a-zA-Z0-9\.\-\+]{1,100};\s?charset=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?$/i; // eslint-disable-line max-len
		// Handle "boundary" in "multipart/*"

		var mimeTypeMultipart = /^multipart\/[a-zA-Z0-9\.\-\+]{1,100}(;\s?(boundary|charset)=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?){0,2}$/i; // eslint-disable-line max-len

		function isMimeType(str) {
		  (0, _assertString.default)(str);
		  return mimeTypeSimple.test(str) || mimeTypeText.test(str) || mimeTypeMultipart.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isMimeType$1, isMimeType$1.exports));

	var isMimeType = /*@__PURE__*/getDefaultExportFromCjs(isMimeType$1.exports);

	var isLatLong$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isLatLong;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _merge = _interopRequireDefault(merge$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var lat = /^\(?[+-]?(90(\.0+)?|[1-8]?\d(\.\d+)?)$/;
		var long = /^\s?[+-]?(180(\.0+)?|1[0-7]\d(\.\d+)?|\d{1,2}(\.\d+)?)\)?$/;
		var latDMS = /^(([1-8]?\d)\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|90\D+0\D+0)\D+[NSns]?$/i;
		var longDMS = /^\s*([1-7]?\d{1,2}\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|180\D+0\D+0)\D+[EWew]?$/i;
		var defaultLatLongOptions = {
		  checkDMS: false
		};

		function isLatLong(str, options) {
		  (0, _assertString.default)(str);
		  options = (0, _merge.default)(options, defaultLatLongOptions);
		  if (!str.includes(',')) return false;
		  var pair = str.split(',');
		  if (pair[0].startsWith('(') && !pair[1].endsWith(')') || pair[1].endsWith(')') && !pair[0].startsWith('(')) return false;

		  if (options.checkDMS) {
		    return latDMS.test(pair[0]) && longDMS.test(pair[1]);
		  }

		  return lat.test(pair[0]) && long.test(pair[1]);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isLatLong$1, isLatLong$1.exports));

	var isLatLong = /*@__PURE__*/getDefaultExportFromCjs(isLatLong$1.exports);

	var isPostalCode$1 = {};

	"use strict";

	Object.defineProperty(isPostalCode$1, "__esModule", {
	  value: true
	});
	var _default$1 = isPostalCode$1.default = isPostalCode;
	var locales_1 = isPostalCode$1.locales = void 0;

	var _assertString$1 = _interopRequireDefault$1(assertString$1.exports);

	function _interopRequireDefault$1(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// common patterns
	var threeDigit = /^\d{3}$/;
	var fourDigit = /^\d{4}$/;
	var fiveDigit = /^\d{5}$/;
	var sixDigit = /^\d{6}$/;
	var patterns = {
	  AD: /^AD\d{3}$/,
	  AT: fourDigit,
	  AU: fourDigit,
	  AZ: /^AZ\d{4}$/,
	  BE: fourDigit,
	  BG: fourDigit,
	  BR: /^\d{5}-\d{3}$/,
	  BY: /2[1-4]{1}\d{4}$/,
	  CA: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,
	  CH: fourDigit,
	  CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\d{4}$/,
	  CZ: /^\d{3}\s?\d{2}$/,
	  DE: fiveDigit,
	  DK: fourDigit,
	  DO: fiveDigit,
	  DZ: fiveDigit,
	  EE: fiveDigit,
	  ES: /^(5[0-2]{1}|[0-4]{1}\d{1})\d{3}$/,
	  FI: fiveDigit,
	  FR: /^\d{2}\s?\d{3}$/,
	  GB: /^(gir\s?0aa|[a-z]{1,2}\d[\da-z]?\s?(\d[a-z]{2})?)$/i,
	  GR: /^\d{3}\s?\d{2}$/,
	  HR: /^([1-5]\d{4}$)/,
	  HT: /^HT\d{4}$/,
	  HU: fourDigit,
	  ID: fiveDigit,
	  IE: /^(?!.*(?:o))[A-Za-z]\d[\dw]\s\w{4}$/i,
	  IL: /^(\d{5}|\d{7})$/,
	  IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,
	  IR: /\b(?!(\d)\1{3})[13-9]{4}[1346-9][013-9]{5}\b/,
	  IS: threeDigit,
	  IT: fiveDigit,
	  JP: /^\d{3}\-\d{4}$/,
	  KE: fiveDigit,
	  KR: /^(\d{5}|\d{6})$/,
	  LI: /^(948[5-9]|949[0-7])$/,
	  LT: /^LT\-\d{5}$/,
	  LU: fourDigit,
	  LV: /^LV\-\d{4}$/,
	  LK: fiveDigit,
	  MX: fiveDigit,
	  MT: /^[A-Za-z]{3}\s{0,1}\d{4}$/,
	  MY: fiveDigit,
	  NL: /^\d{4}\s?[a-z]{2}$/i,
	  NO: fourDigit,
	  NP: /^(10|21|22|32|33|34|44|45|56|57)\d{3}$|^(977)$/i,
	  NZ: fourDigit,
	  PL: /^\d{2}\-\d{3}$/,
	  PR: /^00[679]\d{2}([ -]\d{4})?$/,
	  PT: /^\d{4}\-\d{3}?$/,
	  RO: sixDigit,
	  RU: sixDigit,
	  SA: fiveDigit,
	  SE: /^[1-9]\d{2}\s?\d{2}$/,
	  SG: sixDigit,
	  SI: fourDigit,
	  SK: /^\d{3}\s?\d{2}$/,
	  TH: fiveDigit,
	  TN: fourDigit,
	  TW: /^\d{3}(\d{2})?$/,
	  UA: fiveDigit,
	  US: /^\d{5}(-\d{4})?$/,
	  ZA: fourDigit,
	  ZM: fiveDigit
	};
	var locales = Object.keys(patterns);
	locales_1 = isPostalCode$1.locales = locales;

	function isPostalCode(str, locale) {
	  (0, _assertString$1.default)(str);

	  if (locale in patterns) {
	    return patterns[locale].test(str);
	  } else if (locale === 'any') {
	    for (var key in patterns) {
	      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
	      // istanbul ignore else
	      if (patterns.hasOwnProperty(key)) {
	        var pattern = patterns[key];

	        if (pattern.test(str)) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  throw new Error("Invalid locale '".concat(locale, "'"));
	}

	var ltrim$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = ltrim;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function ltrim(str, chars) {
		  (0, _assertString.default)(str); // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping

		  var pattern = chars ? new RegExp("^[".concat(chars.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), "]+"), 'g') : /^\s+/g;
		  return str.replace(pattern, '');
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (ltrim$1, ltrim$1.exports));

	var ltrim = /*@__PURE__*/getDefaultExportFromCjs(ltrim$1.exports);

	var rtrim$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = rtrim;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function rtrim(str, chars) {
		  (0, _assertString.default)(str);

		  if (chars) {
		    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping
		    var pattern = new RegExp("[".concat(chars.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), "]+$"), 'g');
		    return str.replace(pattern, '');
		  } // Use a faster and more safe than regex trim method https://blog.stevenlevithan.com/archives/faster-trim-javascript


		  var strIndex = str.length - 1;

		  while (/\s/.test(str.charAt(strIndex))) {
		    strIndex -= 1;
		  }

		  return str.slice(0, strIndex + 1);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (rtrim$1, rtrim$1.exports));

	var rtrim = /*@__PURE__*/getDefaultExportFromCjs(rtrim$1.exports);

	var trim$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = trim;

		var _rtrim = _interopRequireDefault(rtrim$1.exports);

		var _ltrim = _interopRequireDefault(ltrim$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function trim(str, chars) {
		  return (0, _rtrim.default)((0, _ltrim.default)(str, chars), chars);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (trim$1, trim$1.exports));

	var trim = /*@__PURE__*/getDefaultExportFromCjs(trim$1.exports);

	var _escape = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = escape;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function escape(str) {
		  (0, _assertString.default)(str);
		  return str.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\//g, '&#x2F;').replace(/\\/g, '&#x5C;').replace(/`/g, '&#96;');
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (_escape, _escape.exports));

	var escape$1 = /*@__PURE__*/getDefaultExportFromCjs(_escape.exports);

	var _unescape = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = unescape;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function unescape(str) {
		  (0, _assertString.default)(str);
		  return str.replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#x2F;/g, '/').replace(/&#x5C;/g, '\\').replace(/&#96;/g, '`').replace(/&amp;/g, '&'); // &amp; replacement has to be the last one to prevent
		  // bugs with intermediate strings containing escape sequences
		  // See: https://github.com/validatorjs/validator.js/issues/1827
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (_unescape, _unescape.exports));

	var unescape = /*@__PURE__*/getDefaultExportFromCjs(_unescape.exports);

	var stripLow$1 = {exports: {}};

	var blacklist$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = blacklist;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function blacklist(str, chars) {
		  (0, _assertString.default)(str);
		  return str.replace(new RegExp("[".concat(chars, "]+"), 'g'), '');
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (blacklist$1, blacklist$1.exports));

	var blacklist = /*@__PURE__*/getDefaultExportFromCjs(blacklist$1.exports);

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = stripLow;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		var _blacklist = _interopRequireDefault(blacklist$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function stripLow(str, keep_new_lines) {
		  (0, _assertString.default)(str);
		  var chars = keep_new_lines ? '\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F' : '\\x00-\\x1F\\x7F';
		  return (0, _blacklist.default)(str, chars);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (stripLow$1, stripLow$1.exports));

	var stripLow = /*@__PURE__*/getDefaultExportFromCjs(stripLow$1.exports);

	var whitelist$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = whitelist;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function whitelist(str, chars) {
		  (0, _assertString.default)(str);
		  return str.replace(new RegExp("[^".concat(chars, "]+"), 'g'), '');
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (whitelist$1, whitelist$1.exports));

	var whitelist = /*@__PURE__*/getDefaultExportFromCjs(whitelist$1.exports);

	var isWhitelisted$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isWhitelisted;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		function isWhitelisted(str, chars) {
		  (0, _assertString.default)(str);

		  for (var i = str.length - 1; i >= 0; i--) {
		    if (chars.indexOf(str[i]) === -1) {
		      return false;
		    }
		  }

		  return true;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isWhitelisted$1, isWhitelisted$1.exports));

	var isWhitelisted = /*@__PURE__*/getDefaultExportFromCjs(isWhitelisted$1.exports);

	var normalizeEmail$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = normalizeEmail;

		var _merge = _interopRequireDefault(merge$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var default_normalize_email_options = {
		  // The following options apply to all email addresses
		  // Lowercases the local part of the email address.
		  // Please note this may violate RFC 5321 as per http://stackoverflow.com/a/9808332/192024).
		  // The domain is always lowercased, as per RFC 1035
		  all_lowercase: true,
		  // The following conversions are specific to GMail
		  // Lowercases the local part of the GMail address (known to be case-insensitive)
		  gmail_lowercase: true,
		  // Removes dots from the local part of the email address, as that's ignored by GMail
		  gmail_remove_dots: true,
		  // Removes the subaddress (e.g. "+foo") from the email address
		  gmail_remove_subaddress: true,
		  // Conversts the googlemail.com domain to gmail.com
		  gmail_convert_googlemaildotcom: true,
		  // The following conversions are specific to Outlook.com / Windows Live / Hotmail
		  // Lowercases the local part of the Outlook.com address (known to be case-insensitive)
		  outlookdotcom_lowercase: true,
		  // Removes the subaddress (e.g. "+foo") from the email address
		  outlookdotcom_remove_subaddress: true,
		  // The following conversions are specific to Yahoo
		  // Lowercases the local part of the Yahoo address (known to be case-insensitive)
		  yahoo_lowercase: true,
		  // Removes the subaddress (e.g. "-foo") from the email address
		  yahoo_remove_subaddress: true,
		  // The following conversions are specific to Yandex
		  // Lowercases the local part of the Yandex address (known to be case-insensitive)
		  yandex_lowercase: true,
		  // The following conversions are specific to iCloud
		  // Lowercases the local part of the iCloud address (known to be case-insensitive)
		  icloud_lowercase: true,
		  // Removes the subaddress (e.g. "+foo") from the email address
		  icloud_remove_subaddress: true
		}; // List of domains used by iCloud

		var icloud_domains = ['icloud.com', 'me.com']; // List of domains used by Outlook.com and its predecessors
		// This list is likely incomplete.
		// Partial reference:
		// https://blogs.office.com/2013/04/17/outlook-com-gets-two-step-verification-sign-in-by-alias-and-new-international-domains/

		var outlookdotcom_domains = ['hotmail.at', 'hotmail.be', 'hotmail.ca', 'hotmail.cl', 'hotmail.co.il', 'hotmail.co.nz', 'hotmail.co.th', 'hotmail.co.uk', 'hotmail.com', 'hotmail.com.ar', 'hotmail.com.au', 'hotmail.com.br', 'hotmail.com.gr', 'hotmail.com.mx', 'hotmail.com.pe', 'hotmail.com.tr', 'hotmail.com.vn', 'hotmail.cz', 'hotmail.de', 'hotmail.dk', 'hotmail.es', 'hotmail.fr', 'hotmail.hu', 'hotmail.id', 'hotmail.ie', 'hotmail.in', 'hotmail.it', 'hotmail.jp', 'hotmail.kr', 'hotmail.lv', 'hotmail.my', 'hotmail.ph', 'hotmail.pt', 'hotmail.sa', 'hotmail.sg', 'hotmail.sk', 'live.be', 'live.co.uk', 'live.com', 'live.com.ar', 'live.com.mx', 'live.de', 'live.es', 'live.eu', 'live.fr', 'live.it', 'live.nl', 'msn.com', 'outlook.at', 'outlook.be', 'outlook.cl', 'outlook.co.il', 'outlook.co.nz', 'outlook.co.th', 'outlook.com', 'outlook.com.ar', 'outlook.com.au', 'outlook.com.br', 'outlook.com.gr', 'outlook.com.pe', 'outlook.com.tr', 'outlook.com.vn', 'outlook.cz', 'outlook.de', 'outlook.dk', 'outlook.es', 'outlook.fr', 'outlook.hu', 'outlook.id', 'outlook.ie', 'outlook.in', 'outlook.it', 'outlook.jp', 'outlook.kr', 'outlook.lv', 'outlook.my', 'outlook.ph', 'outlook.pt', 'outlook.sa', 'outlook.sg', 'outlook.sk', 'passport.com']; // List of domains used by Yahoo Mail
		// This list is likely incomplete

		var yahoo_domains = ['rocketmail.com', 'yahoo.ca', 'yahoo.co.uk', 'yahoo.com', 'yahoo.de', 'yahoo.fr', 'yahoo.in', 'yahoo.it', 'ymail.com']; // List of domains used by yandex.ru

		var yandex_domains = ['yandex.ru', 'yandex.ua', 'yandex.kz', 'yandex.com', 'yandex.by', 'ya.ru']; // replace single dots, but not multiple consecutive dots

		function dotsReplacer(match) {
		  if (match.length > 1) {
		    return match;
		  }

		  return '';
		}

		function normalizeEmail(email, options) {
		  options = (0, _merge.default)(options, default_normalize_email_options);
		  var raw_parts = email.split('@');
		  var domain = raw_parts.pop();
		  var user = raw_parts.join('@');
		  var parts = [user, domain]; // The domain is always lowercased, as it's case-insensitive per RFC 1035

		  parts[1] = parts[1].toLowerCase();

		  if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {
		    // Address is GMail
		    if (options.gmail_remove_subaddress) {
		      parts[0] = parts[0].split('+')[0];
		    }

		    if (options.gmail_remove_dots) {
		      // this does not replace consecutive dots like example..email@gmail.com
		      parts[0] = parts[0].replace(/\.+/g, dotsReplacer);
		    }

		    if (!parts[0].length) {
		      return false;
		    }

		    if (options.all_lowercase || options.gmail_lowercase) {
		      parts[0] = parts[0].toLowerCase();
		    }

		    parts[1] = options.gmail_convert_googlemaildotcom ? 'gmail.com' : parts[1];
		  } else if (icloud_domains.indexOf(parts[1]) >= 0) {
		    // Address is iCloud
		    if (options.icloud_remove_subaddress) {
		      parts[0] = parts[0].split('+')[0];
		    }

		    if (!parts[0].length) {
		      return false;
		    }

		    if (options.all_lowercase || options.icloud_lowercase) {
		      parts[0] = parts[0].toLowerCase();
		    }
		  } else if (outlookdotcom_domains.indexOf(parts[1]) >= 0) {
		    // Address is Outlook.com
		    if (options.outlookdotcom_remove_subaddress) {
		      parts[0] = parts[0].split('+')[0];
		    }

		    if (!parts[0].length) {
		      return false;
		    }

		    if (options.all_lowercase || options.outlookdotcom_lowercase) {
		      parts[0] = parts[0].toLowerCase();
		    }
		  } else if (yahoo_domains.indexOf(parts[1]) >= 0) {
		    // Address is Yahoo
		    if (options.yahoo_remove_subaddress) {
		      var components = parts[0].split('-');
		      parts[0] = components.length > 1 ? components.slice(0, -1).join('-') : components[0];
		    }

		    if (!parts[0].length) {
		      return false;
		    }

		    if (options.all_lowercase || options.yahoo_lowercase) {
		      parts[0] = parts[0].toLowerCase();
		    }
		  } else if (yandex_domains.indexOf(parts[1]) >= 0) {
		    if (options.all_lowercase || options.yandex_lowercase) {
		      parts[0] = parts[0].toLowerCase();
		    }

		    parts[1] = 'yandex.ru'; // all yandex domains are equal, 1st preferred
		  } else if (options.all_lowercase) {
		    // Any other address
		    parts[0] = parts[0].toLowerCase();
		  }

		  return parts.join('@');
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (normalizeEmail$1, normalizeEmail$1.exports));

	var normalizeEmail = /*@__PURE__*/getDefaultExportFromCjs(normalizeEmail$1.exports);

	var isSlug$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isSlug;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var charsetRegex = /^[^\s-_](?!.*?[-_]{2,})[a-z0-9-\\][^\s]*[^-_\s]$/;

		function isSlug(str) {
		  (0, _assertString.default)(str);
		  return charsetRegex.test(str);
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isSlug$1, isSlug$1.exports));

	var isSlug = /*@__PURE__*/getDefaultExportFromCjs(isSlug$1.exports);

	var isLicensePlate$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isLicensePlate;

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var validators = {
		  'cs-CZ': function csCZ(str) {
		    return /^(([ABCDEFHKIJKLMNPRSTUVXYZ]|[0-9])-?){5,8}$/.test(str);
		  },
		  'de-DE': function deDE(str) {
		    return /^((AW|UL|AK|GA|AÖ|LF|AZ|AM|AS|ZE|AN|AB|A|KG|KH|BA|EW|BZ|HY|KM|BT|HP|B|BC|BI|BO|FN|TT|ÜB|BN|AH|BS|FR|HB|ZZ|BB|BK|BÖ|OC|OK|CW|CE|C|CO|LH|CB|KW|LC|LN|DA|DI|DE|DH|SY|NÖ|DO|DD|DU|DN|D|EI|EA|EE|FI|EM|EL|EN|PF|ED|EF|ER|AU|ZP|E|ES|NT|EU|FL|FO|FT|FF|F|FS|FD|FÜ|GE|G|GI|GF|GS|ZR|GG|GP|GR|NY|ZI|GÖ|GZ|GT|HA|HH|HM|HU|WL|HZ|WR|RN|HK|HD|HN|HS|GK|HE|HF|RZ|HI|HG|HO|HX|IK|IL|IN|J|JL|KL|KA|KS|KF|KE|KI|KT|KO|KN|KR|KC|KU|K|LD|LL|LA|L|OP|LM|LI|LB|LU|LÖ|HL|LG|MD|GN|MZ|MA|ML|MR|MY|AT|DM|MC|NZ|RM|RG|MM|ME|MB|MI|FG|DL|HC|MW|RL|MK|MG|MÜ|WS|MH|M|MS|NU|NB|ND|NM|NK|NW|NR|NI|NF|DZ|EB|OZ|TG|TO|N|OA|GM|OB|CA|EH|FW|OF|OL|OE|OG|BH|LR|OS|AA|GD|OH|KY|NP|WK|PB|PA|PE|PI|PS|P|PM|PR|RA|RV|RE|R|H|SB|WN|RS|RD|RT|BM|NE|GV|RP|SU|GL|RO|GÜ|RH|EG|RW|PN|SK|MQ|RU|SZ|RI|SL|SM|SC|HR|FZ|VS|SW|SN|CR|SE|SI|SO|LP|SG|NH|SP|IZ|ST|BF|TE|HV|OD|SR|S|AC|DW|ZW|TF|TS|TR|TÜ|UM|PZ|TP|UE|UN|UH|MN|KK|VB|V|AE|PL|RC|VG|GW|PW|VR|VK|KB|WA|WT|BE|WM|WE|AP|MO|WW|FB|WZ|WI|WB|JE|WF|WO|W|WÜ|BL|Z|GC)[- ]?[A-Z]{1,2}[- ]?\d{1,4}|(AIC|FDB|ABG|SLN|SAW|KLZ|BUL|ESB|NAB|SUL|WST|ABI|AZE|BTF|KÖT|DKB|FEU|ROT|ALZ|SMÜ|WER|AUR|NOR|DÜW|BRK|HAB|TÖL|WOR|BAD|BAR|BER|BIW|EBS|KEM|MÜB|PEG|BGL|BGD|REI|WIL|BKS|BIR|WAT|BOR|BOH|BOT|BRB|BLK|HHM|NEB|NMB|WSF|LEO|HDL|WMS|WZL|BÜS|CHA|KÖZ|ROD|WÜM|CLP|NEC|COC|ZEL|COE|CUX|DAH|LDS|DEG|DEL|RSL|DLG|DGF|LAN|HEI|MED|DON|KIB|ROK|JÜL|MON|SLE|EBE|EIC|HIG|WBS|BIT|PRÜ|LIB|EMD|WIT|ERH|HÖS|ERZ|ANA|ASZ|MAB|MEK|STL|SZB|FDS|HCH|HOR|WOL|FRG|GRA|WOS|FRI|FFB|GAP|GER|BRL|CLZ|GTH|NOH|HGW|GRZ|LÖB|NOL|WSW|DUD|HMÜ|OHA|KRU|HAL|HAM|HBS|QLB|HVL|NAU|HAS|EBN|GEO|HOH|HDH|ERK|HER|WAN|HEF|ROF|HBN|ALF|HSK|USI|NAI|REH|SAN|KÜN|ÖHR|HOL|WAR|ARN|BRG|GNT|HOG|WOH|KEH|MAI|PAR|RID|ROL|KLE|GEL|KUS|KYF|ART|SDH|LDK|DIL|MAL|VIB|LER|BNA|GHA|GRM|MTL|WUR|LEV|LIF|STE|WEL|LIP|VAI|LUP|HGN|LBZ|LWL|PCH|STB|DAN|MKK|SLÜ|MSP|TBB|MGH|MTK|BIN|MSH|EIL|HET|SGH|BID|MYK|MSE|MST|MÜR|WRN|MEI|GRH|RIE|MZG|MIL|OBB|BED|FLÖ|MOL|FRW|SEE|SRB|AIB|MOS|BCH|ILL|SOB|NMS|NEA|SEF|UFF|NEW|VOH|NDH|TDO|NWM|GDB|GVM|WIS|NOM|EIN|GAN|LAU|HEB|OHV|OSL|SFB|ERB|LOS|BSK|KEL|BSB|MEL|WTL|OAL|FÜS|MOD|OHZ|OPR|BÜR|PAF|PLÖ|CAS|GLA|REG|VIT|ECK|SIM|GOA|EMS|DIZ|GOH|RÜD|SWA|NES|KÖN|MET|LRO|BÜZ|DBR|ROS|TET|HRO|ROW|BRV|HIP|PAN|GRI|SHK|EIS|SRO|SOK|LBS|SCZ|MER|QFT|SLF|SLS|HOM|SLK|ASL|BBG|SBK|SFT|SHG|MGN|MEG|ZIG|SAD|NEN|OVI|SHA|BLB|SIG|SON|SPN|FOR|GUB|SPB|IGB|WND|STD|STA|SDL|OBG|HST|BOG|SHL|PIR|FTL|SEB|SÖM|SÜW|TIR|SAB|TUT|ANG|SDT|LÜN|LSZ|MHL|VEC|VER|VIE|OVL|ANK|OVP|SBG|UEM|UER|WLG|GMN|NVP|RDG|RÜG|DAU|FKB|WAF|WAK|SLZ|WEN|SOG|APD|WUG|GUN|ESW|WIZ|WES|DIN|BRA|BÜD|WHV|HWI|GHC|WTM|WOB|WUN|MAK|SEL|OCH|HOT|WDA)[- ]?(([A-Z][- ]?\d{1,4})|([A-Z]{2}[- ]?\d{1,3})))[- ]?(E|H)?$/.test(str);
		  },
		  'de-LI': function deLI(str) {
		    return /^FL[- ]?\d{1,5}[UZ]?$/.test(str);
		  },
		  'fi-FI': function fiFI(str) {
		    return /^(?=.{4,7})(([A-Z]{1,3}|[0-9]{1,3})[\s-]?([A-Z]{1,3}|[0-9]{1,5}))$/.test(str);
		  },
		  'pt-PT': function ptPT(str) {
		    return /^([A-Z]{2}|[0-9]{2})[ -·]?([A-Z]{2}|[0-9]{2})[ -·]?([A-Z]{2}|[0-9]{2})$/.test(str);
		  },
		  'sq-AL': function sqAL(str) {
		    return /^[A-Z]{2}[- ]?((\d{3}[- ]?(([A-Z]{2})|T))|(R[- ]?\d{3}))$/.test(str);
		  },
		  'pt-BR': function ptBR(str) {
		    return /^[A-Z]{3}[ -]?[0-9][A-Z][0-9]{2}|[A-Z]{3}[ -]?[0-9]{4}$/.test(str);
		  }
		};

		function isLicensePlate(str, locale) {
		  (0, _assertString.default)(str);

		  if (locale in validators) {
		    return validators[locale](str);
		  } else if (locale === 'any') {
		    for (var key in validators) {
		      /* eslint guard-for-in: 0 */
		      var validator = validators[key];

		      if (validator(str)) {
		        return true;
		      }
		    }

		    return false;
		  }

		  throw new Error("Invalid locale '".concat(locale, "'"));
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isLicensePlate$1, isLicensePlate$1.exports));

	var isLicensePlate = /*@__PURE__*/getDefaultExportFromCjs(isLicensePlate$1.exports);

	var isStrongPassword$1 = {exports: {}};

	(function (module, exports) {
		"use strict";

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = isStrongPassword;

		var _merge = _interopRequireDefault(merge$1.exports);

		var _assertString = _interopRequireDefault(assertString$1.exports);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var upperCaseRegex = /^[A-Z]$/;
		var lowerCaseRegex = /^[a-z]$/;
		var numberRegex = /^[0-9]$/;
		var symbolRegex = /^[-#!$@%^&*()_+|~=`{}\[\]:";'<>?,.\/ ]$/;
		var defaultOptions = {
		  minLength: 8,
		  minLowercase: 1,
		  minUppercase: 1,
		  minNumbers: 1,
		  minSymbols: 1,
		  returnScore: false,
		  pointsPerUnique: 1,
		  pointsPerRepeat: 0.5,
		  pointsForContainingLower: 10,
		  pointsForContainingUpper: 10,
		  pointsForContainingNumber: 10,
		  pointsForContainingSymbol: 10
		};
		/* Counts number of occurrences of each char in a string
		 * could be moved to util/ ?
		*/

		function countChars(str) {
		  var result = {};
		  Array.from(str).forEach(function (char) {
		    var curVal = result[char];

		    if (curVal) {
		      result[char] += 1;
		    } else {
		      result[char] = 1;
		    }
		  });
		  return result;
		}
		/* Return information about a password */


		function analyzePassword(password) {
		  var charMap = countChars(password);
		  var analysis = {
		    length: password.length,
		    uniqueChars: Object.keys(charMap).length,
		    uppercaseCount: 0,
		    lowercaseCount: 0,
		    numberCount: 0,
		    symbolCount: 0
		  };
		  Object.keys(charMap).forEach(function (char) {
		    /* istanbul ignore else */
		    if (upperCaseRegex.test(char)) {
		      analysis.uppercaseCount += charMap[char];
		    } else if (lowerCaseRegex.test(char)) {
		      analysis.lowercaseCount += charMap[char];
		    } else if (numberRegex.test(char)) {
		      analysis.numberCount += charMap[char];
		    } else if (symbolRegex.test(char)) {
		      analysis.symbolCount += charMap[char];
		    }
		  });
		  return analysis;
		}

		function scorePassword(analysis, scoringOptions) {
		  var points = 0;
		  points += analysis.uniqueChars * scoringOptions.pointsPerUnique;
		  points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;

		  if (analysis.lowercaseCount > 0) {
		    points += scoringOptions.pointsForContainingLower;
		  }

		  if (analysis.uppercaseCount > 0) {
		    points += scoringOptions.pointsForContainingUpper;
		  }

		  if (analysis.numberCount > 0) {
		    points += scoringOptions.pointsForContainingNumber;
		  }

		  if (analysis.symbolCount > 0) {
		    points += scoringOptions.pointsForContainingSymbol;
		  }

		  return points;
		}

		function isStrongPassword(str) {
		  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
		  (0, _assertString.default)(str);
		  var analysis = analyzePassword(str);
		  options = (0, _merge.default)(options || {}, defaultOptions);

		  if (options.returnScore) {
		    return scorePassword(analysis, options);
		  }

		  return analysis.length >= options.minLength && analysis.lowercaseCount >= options.minLowercase && analysis.uppercaseCount >= options.minUppercase && analysis.numberCount >= options.minNumbers && analysis.symbolCount >= options.minSymbols;
		}

		module.exports = exports.default;
		module.exports.default = exports.default;
	} (isStrongPassword$1, isStrongPassword$1.exports));

	var isStrongPassword = /*@__PURE__*/getDefaultExportFromCjs(isStrongPassword$1.exports);

	var isVAT$1 = {};

	"use strict";

	Object.defineProperty(isVAT$1, "__esModule", {
	  value: true
	});
	var _default = isVAT$1.default = isVAT;
	var vatMatchers_1 = isVAT$1.vatMatchers = void 0;

	var _assertString = _interopRequireDefault(assertString$1.exports);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var vatMatchers = {
	  GB: /^GB((\d{3} \d{4} ([0-8][0-9]|9[0-6]))|(\d{9} \d{3})|(((GD[0-4])|(HA[5-9]))[0-9]{2}))$/,
	  IT: /^(IT)?[0-9]{11}$/,
	  NL: /^(NL)?[0-9]{9}B[0-9]{2}$/
	};
	vatMatchers_1 = isVAT$1.vatMatchers = vatMatchers;

	function isVAT(str, countryCode) {
	  (0, _assertString.default)(str);
	  (0, _assertString.default)(countryCode);

	  if (countryCode in vatMatchers) {
	    return vatMatchers[countryCode].test(str);
	  }

	  throw new Error("Invalid country code: '".concat(countryCode, "'"));
	}

	(function (module, exports) {
		"use strict";

		function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = void 0;

		var _toDate = _interopRequireDefault(toDate$1.exports);

		var _toFloat = _interopRequireDefault(toFloat$1.exports);

		var _toInt = _interopRequireDefault(toInt$1.exports);

		var _toBoolean = _interopRequireDefault(toBoolean$1.exports);

		var _equals = _interopRequireDefault(equals$1.exports);

		var _contains = _interopRequireDefault(contains$1.exports);

		var _matches = _interopRequireDefault(matches$1.exports);

		var _isEmail = _interopRequireDefault(isEmail$1.exports);

		var _isURL = _interopRequireDefault(isURL$1.exports);

		var _isMACAddress = _interopRequireDefault(isMACAddress$1.exports);

		var _isIP = _interopRequireDefault(isIP$1.exports);

		var _isIPRange = _interopRequireDefault(isIPRange$1.exports);

		var _isFQDN = _interopRequireDefault(isFQDN$1.exports);

		var _isDate = _interopRequireDefault(isDate$1.exports);

		var _isBoolean = _interopRequireDefault(isBoolean$1.exports);

		var _isLocale = _interopRequireDefault(isLocale$1.exports);

		var _isAlpha = _interopRequireWildcard(isAlpha$1);

		var _isAlphanumeric = _interopRequireWildcard(isAlphanumeric$1);

		var _isNumeric = _interopRequireDefault(isNumeric$1.exports);

		var _isPassportNumber = _interopRequireDefault(isPassportNumber$1.exports);

		var _isPort = _interopRequireDefault(isPort$1.exports);

		var _isLowercase = _interopRequireDefault(isLowercase$1.exports);

		var _isUppercase = _interopRequireDefault(isUppercase$1.exports);

		var _isIMEI = _interopRequireDefault(isIMEI$1.exports);

		var _isAscii = _interopRequireDefault(isAscii$1.exports);

		var _isFullWidth = _interopRequireDefault(isFullWidth$1);

		var _isHalfWidth = _interopRequireDefault(isHalfWidth$1);

		var _isVariableWidth = _interopRequireDefault(isVariableWidth$1.exports);

		var _isMultibyte = _interopRequireDefault(isMultibyte$1.exports);

		var _isSemVer = _interopRequireDefault(isSemVer$1.exports);

		var _isSurrogatePair = _interopRequireDefault(isSurrogatePair$1.exports);

		var _isInt = _interopRequireDefault(isInt$1.exports);

		var _isFloat = _interopRequireWildcard(isFloat$1);

		var _isDecimal = _interopRequireDefault(isDecimal$1.exports);

		var _isHexadecimal = _interopRequireDefault(isHexadecimal$1.exports);

		var _isOctal = _interopRequireDefault(isOctal$1.exports);

		var _isDivisibleBy = _interopRequireDefault(isDivisibleBy$1.exports);

		var _isHexColor = _interopRequireDefault(isHexColor$1.exports);

		var _isRgbColor = _interopRequireDefault(isRgbColor$1.exports);

		var _isHSL = _interopRequireDefault(isHSL$1.exports);

		var _isISRC = _interopRequireDefault(isISRC$1.exports);

		var _isIBAN = _interopRequireWildcard(isIBAN$1);

		var _isBIC = _interopRequireDefault(isBIC$1.exports);

		var _isMD = _interopRequireDefault(isMD5$1.exports);

		var _isHash = _interopRequireDefault(isHash$1.exports);

		var _isJWT = _interopRequireDefault(isJWT$1.exports);

		var _isJSON = _interopRequireDefault(isJSON$1.exports);

		var _isEmpty = _interopRequireDefault(isEmpty$1.exports);

		var _isLength = _interopRequireDefault(isLength$1.exports);

		var _isByteLength = _interopRequireDefault(isByteLength$1.exports);

		var _isUUID = _interopRequireDefault(isUUID$1.exports);

		var _isMongoId = _interopRequireDefault(isMongoId$1.exports);

		var _isAfter = _interopRequireDefault(isAfter$1.exports);

		var _isBefore = _interopRequireDefault(isBefore$1.exports);

		var _isIn = _interopRequireDefault(isIn$1.exports);

		var _isCreditCard = _interopRequireDefault(isCreditCard$1.exports);

		var _isIdentityCard = _interopRequireDefault(isIdentityCard$1.exports);

		var _isEAN = _interopRequireDefault(isEAN$1.exports);

		var _isISIN = _interopRequireDefault(isISIN$1.exports);

		var _isISBN = _interopRequireDefault(isISBN$1.exports);

		var _isISSN = _interopRequireDefault(isISSN$1.exports);

		var _isTaxID = _interopRequireDefault(isTaxID$1.exports);

		var _isMobilePhone = _interopRequireWildcard(isMobilePhone$1);

		var _isEthereumAddress = _interopRequireDefault(isEthereumAddress$1.exports);

		var _isCurrency = _interopRequireDefault(isCurrency$1.exports);

		var _isBtcAddress = _interopRequireDefault(isBtcAddress$1.exports);

		var _isISO = _interopRequireDefault(isISO8601$1.exports);

		var _isRFC = _interopRequireDefault(isRFC3339$1.exports);

		var _isISO31661Alpha = _interopRequireDefault(isISO31661Alpha2$1);

		var _isISO31661Alpha2 = _interopRequireDefault(isISO31661Alpha3$1.exports);

		var _isISO2 = _interopRequireDefault(isISO4217$1);

		var _isBase = _interopRequireDefault(isBase32$1.exports);

		var _isBase2 = _interopRequireDefault(isBase58$1.exports);

		var _isBase3 = _interopRequireDefault(isBase64$1.exports);

		var _isDataURI = _interopRequireDefault(isDataURI$1.exports);

		var _isMagnetURI = _interopRequireDefault(isMagnetURI$1.exports);

		var _isMimeType = _interopRequireDefault(isMimeType$1.exports);

		var _isLatLong = _interopRequireDefault(isLatLong$1.exports);

		var _isPostalCode = _interopRequireWildcard(isPostalCode$1);

		var _ltrim = _interopRequireDefault(ltrim$1.exports);

		var _rtrim = _interopRequireDefault(rtrim$1.exports);

		var _trim = _interopRequireDefault(trim$1.exports);

		var _escape$1 = _interopRequireDefault(_escape.exports);

		var _unescape$1 = _interopRequireDefault(_unescape.exports);

		var _stripLow = _interopRequireDefault(stripLow$1.exports);

		var _whitelist = _interopRequireDefault(whitelist$1.exports);

		var _blacklist = _interopRequireDefault(blacklist$1.exports);

		var _isWhitelisted = _interopRequireDefault(isWhitelisted$1.exports);

		var _normalizeEmail = _interopRequireDefault(normalizeEmail$1.exports);

		var _isSlug = _interopRequireDefault(isSlug$1.exports);

		var _isLicensePlate = _interopRequireDefault(isLicensePlate$1.exports);

		var _isStrongPassword = _interopRequireDefault(isStrongPassword$1.exports);

		var _isVAT = _interopRequireDefault(isVAT$1);

		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		var version = '13.7.0';
		var validator = {
		  version: version,
		  toDate: _toDate.default,
		  toFloat: _toFloat.default,
		  toInt: _toInt.default,
		  toBoolean: _toBoolean.default,
		  equals: _equals.default,
		  contains: _contains.default,
		  matches: _matches.default,
		  isEmail: _isEmail.default,
		  isURL: _isURL.default,
		  isMACAddress: _isMACAddress.default,
		  isIP: _isIP.default,
		  isIPRange: _isIPRange.default,
		  isFQDN: _isFQDN.default,
		  isBoolean: _isBoolean.default,
		  isIBAN: _isIBAN.default,
		  isBIC: _isBIC.default,
		  isAlpha: _isAlpha.default,
		  isAlphaLocales: _isAlpha.locales,
		  isAlphanumeric: _isAlphanumeric.default,
		  isAlphanumericLocales: _isAlphanumeric.locales,
		  isNumeric: _isNumeric.default,
		  isPassportNumber: _isPassportNumber.default,
		  isPort: _isPort.default,
		  isLowercase: _isLowercase.default,
		  isUppercase: _isUppercase.default,
		  isAscii: _isAscii.default,
		  isFullWidth: _isFullWidth.default,
		  isHalfWidth: _isHalfWidth.default,
		  isVariableWidth: _isVariableWidth.default,
		  isMultibyte: _isMultibyte.default,
		  isSemVer: _isSemVer.default,
		  isSurrogatePair: _isSurrogatePair.default,
		  isInt: _isInt.default,
		  isIMEI: _isIMEI.default,
		  isFloat: _isFloat.default,
		  isFloatLocales: _isFloat.locales,
		  isDecimal: _isDecimal.default,
		  isHexadecimal: _isHexadecimal.default,
		  isOctal: _isOctal.default,
		  isDivisibleBy: _isDivisibleBy.default,
		  isHexColor: _isHexColor.default,
		  isRgbColor: _isRgbColor.default,
		  isHSL: _isHSL.default,
		  isISRC: _isISRC.default,
		  isMD5: _isMD.default,
		  isHash: _isHash.default,
		  isJWT: _isJWT.default,
		  isJSON: _isJSON.default,
		  isEmpty: _isEmpty.default,
		  isLength: _isLength.default,
		  isLocale: _isLocale.default,
		  isByteLength: _isByteLength.default,
		  isUUID: _isUUID.default,
		  isMongoId: _isMongoId.default,
		  isAfter: _isAfter.default,
		  isBefore: _isBefore.default,
		  isIn: _isIn.default,
		  isCreditCard: _isCreditCard.default,
		  isIdentityCard: _isIdentityCard.default,
		  isEAN: _isEAN.default,
		  isISIN: _isISIN.default,
		  isISBN: _isISBN.default,
		  isISSN: _isISSN.default,
		  isMobilePhone: _isMobilePhone.default,
		  isMobilePhoneLocales: _isMobilePhone.locales,
		  isPostalCode: _isPostalCode.default,
		  isPostalCodeLocales: _isPostalCode.locales,
		  isEthereumAddress: _isEthereumAddress.default,
		  isCurrency: _isCurrency.default,
		  isBtcAddress: _isBtcAddress.default,
		  isISO8601: _isISO.default,
		  isRFC3339: _isRFC.default,
		  isISO31661Alpha2: _isISO31661Alpha.default,
		  isISO31661Alpha3: _isISO31661Alpha2.default,
		  isISO4217: _isISO2.default,
		  isBase32: _isBase.default,
		  isBase58: _isBase2.default,
		  isBase64: _isBase3.default,
		  isDataURI: _isDataURI.default,
		  isMagnetURI: _isMagnetURI.default,
		  isMimeType: _isMimeType.default,
		  isLatLong: _isLatLong.default,
		  ltrim: _ltrim.default,
		  rtrim: _rtrim.default,
		  trim: _trim.default,
		  escape: _escape$1.default,
		  unescape: _unescape$1.default,
		  stripLow: _stripLow.default,
		  whitelist: _whitelist.default,
		  blacklist: _blacklist.default,
		  isWhitelisted: _isWhitelisted.default,
		  normalizeEmail: _normalizeEmail.default,
		  toString: toString,
		  isSlug: _isSlug.default,
		  isStrongPassword: _isStrongPassword.default,
		  isTaxID: _isTaxID.default,
		  isDate: _isDate.default,
		  isLicensePlate: _isLicensePlate.default,
		  isVAT: _isVAT.default,
		  ibanLocales: _isIBAN.locales
		};
		var _default = validator;
		exports.default = _default;
		module.exports = exports.default;
		module.exports.default = exports.default;
	} (validator, validator.exports));

	var Validator = /*@__PURE__*/getDefaultExportFromCjs(validator.exports);

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */

	function arrayEach$2(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	var _arrayEach = arrayEach$2;

	var getNative = _getNative;

	var defineProperty$1 = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	var _defineProperty = defineProperty$1;

	var defineProperty = _defineProperty;

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue$2(object, key, value) {
	  if (key == '__proto__' && defineProperty) {
	    defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	var _baseAssignValue = baseAssignValue$2;

	var baseAssignValue$1 = _baseAssignValue,
	    eq = eq_1;

	/** Used for built-in method references. */
	var objectProto$2 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue$2(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty$2.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue$1(object, key, value);
	  }
	}

	var _assignValue = assignValue$2;

	var assignValue$1 = _assignValue,
	    baseAssignValue = _baseAssignValue;

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject$4(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue$1(object, key, newValue);
	    }
	  }
	  return object;
	}

	var _copyObject = copyObject$4;

	var copyObject$3 = _copyObject,
	    keys$2 = keys_1;

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign$1(object, source) {
	  return object && copyObject$3(source, keys$2(source), object);
	}

	var _baseAssign = baseAssign$1;

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */

	function nativeKeysIn$1(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _nativeKeysIn = nativeKeysIn$1;

	var isObject$2 = isObject_1,
	    isPrototype$1 = _isPrototype,
	    nativeKeysIn = _nativeKeysIn;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn$1(object) {
	  if (!isObject$2(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype$1(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty$1.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _baseKeysIn = baseKeysIn$1;

	var arrayLikeKeys = _arrayLikeKeys,
	    baseKeysIn = _baseKeysIn,
	    isArrayLike$1 = isArrayLike_1;

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn$3(object) {
	  return isArrayLike$1(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	var keysIn_1 = keysIn$3;

	var copyObject$2 = _copyObject,
	    keysIn$2 = keysIn_1;

	/**
	 * The base implementation of `_.assignIn` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssignIn$1(object, source) {
	  return object && copyObject$2(source, keysIn$2(source), object);
	}

	var _baseAssignIn = baseAssignIn$1;

	var _cloneBuffer$1 = {exports: {}};

	(function (module, exports) {
		var root = _root;

		/** Detect free variable `exports`. */
		var freeExports = 'object' == 'object' && exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Built-in value references. */
		var Buffer = moduleExports ? root.Buffer : undefined,
		    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

		/**
		 * Creates a clone of  `buffer`.
		 *
		 * @private
		 * @param {Buffer} buffer The buffer to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Buffer} Returns the cloned buffer.
		 */
		function cloneBuffer(buffer, isDeep) {
		  if (isDeep) {
		    return buffer.slice();
		  }
		  var length = buffer.length,
		      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

		  buffer.copy(result);
		  return result;
		}

		module.exports = cloneBuffer;
	} (_cloneBuffer$1, _cloneBuffer$1.exports));

	var _cloneBuffer = _cloneBuffer$1.exports;

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */

	function copyArray$1(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	var _copyArray = copyArray$1;

	var copyObject$1 = _copyObject,
	    getSymbols$1 = _getSymbols;

	/**
	 * Copies own symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols$1(source, object) {
	  return copyObject$1(source, getSymbols$1(source), object);
	}

	var _copySymbols = copySymbols$1;

	var overArg = _overArg;

	/** Built-in value references. */
	var getPrototype$2 = overArg(Object.getPrototypeOf, Object);

	var _getPrototype = getPrototype$2;

	var arrayPush = _arrayPush,
	    getPrototype$1 = _getPrototype,
	    getSymbols = _getSymbols,
	    stubArray = stubArray_1;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own and inherited enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
	  var result = [];
	  while (object) {
	    arrayPush(result, getSymbols(object));
	    object = getPrototype$1(object);
	  }
	  return result;
	};

	var _getSymbolsIn = getSymbolsIn$2;

	var copyObject = _copyObject,
	    getSymbolsIn$1 = _getSymbolsIn;

	/**
	 * Copies own and inherited symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbolsIn$1(source, object) {
	  return copyObject(source, getSymbolsIn$1(source), object);
	}

	var _copySymbolsIn = copySymbolsIn$1;

	var baseGetAllKeys = _baseGetAllKeys,
	    getSymbolsIn = _getSymbolsIn,
	    keysIn$1 = keysIn_1;

	/**
	 * Creates an array of own and inherited enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeysIn$1(object) {
	  return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
	}

	var _getAllKeysIn = getAllKeysIn$1;

	/** Used for built-in method references. */

	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray$1(array) {
	  var length = array.length,
	      result = new array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	var _initCloneArray = initCloneArray$1;

	var Uint8Array = _Uint8Array;

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer$3(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	var _cloneArrayBuffer = cloneArrayBuffer$3;

	var cloneArrayBuffer$2 = _cloneArrayBuffer;

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView$1(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	var _cloneDataView = cloneDataView$1;

	/** Used to match `RegExp` flags from their coerced string values. */

	var reFlags = /\w*$/;

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp$1(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	var _cloneRegExp = cloneRegExp$1;

	var Symbol$1 = _Symbol;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol$1(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	var _cloneSymbol = cloneSymbol$1;

	var cloneArrayBuffer$1 = _cloneArrayBuffer;

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray$1(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	var _cloneTypedArray = cloneTypedArray$1;

	var cloneArrayBuffer = _cloneArrayBuffer,
	    cloneDataView = _cloneDataView,
	    cloneRegExp = _cloneRegExp,
	    cloneSymbol = _cloneSymbol,
	    cloneTypedArray = _cloneTypedArray;

	/** `Object#toString` result references. */
	var boolTag$1 = '[object Boolean]',
	    dateTag$1 = '[object Date]',
	    mapTag$2 = '[object Map]',
	    numberTag$1 = '[object Number]',
	    regexpTag$1 = '[object RegExp]',
	    setTag$2 = '[object Set]',
	    stringTag$1 = '[object String]',
	    symbolTag$1 = '[object Symbol]';

	var arrayBufferTag$1 = '[object ArrayBuffer]',
	    dataViewTag$1 = '[object DataView]',
	    float32Tag$1 = '[object Float32Array]',
	    float64Tag$1 = '[object Float64Array]',
	    int8Tag$1 = '[object Int8Array]',
	    int16Tag$1 = '[object Int16Array]',
	    int32Tag$1 = '[object Int32Array]',
	    uint8Tag$1 = '[object Uint8Array]',
	    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
	    uint16Tag$1 = '[object Uint16Array]',
	    uint32Tag$1 = '[object Uint32Array]';

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag$1(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag$1:
	      return cloneArrayBuffer(object);

	    case boolTag$1:
	    case dateTag$1:
	      return new Ctor(+object);

	    case dataViewTag$1:
	      return cloneDataView(object, isDeep);

	    case float32Tag$1: case float64Tag$1:
	    case int8Tag$1: case int16Tag$1: case int32Tag$1:
	    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
	      return cloneTypedArray(object, isDeep);

	    case mapTag$2:
	      return new Ctor;

	    case numberTag$1:
	    case stringTag$1:
	      return new Ctor(object);

	    case regexpTag$1:
	      return cloneRegExp(object);

	    case setTag$2:
	      return new Ctor;

	    case symbolTag$1:
	      return cloneSymbol(object);
	  }
	}

	var _initCloneByTag = initCloneByTag$1;

	var isObject$1 = isObject_1;

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate$1 = (function() {
	  function object() {}
	  return function(proto) {
	    if (!isObject$1(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object;
	    object.prototype = undefined;
	    return result;
	  };
	}());

	var _baseCreate = baseCreate$1;

	var baseCreate = _baseCreate,
	    getPrototype = _getPrototype,
	    isPrototype = _isPrototype;

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject$1(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	var _initCloneObject = initCloneObject$1;

	var getTag$2 = _getTag,
	    isObjectLike$1 = isObjectLike_1;

	/** `Object#toString` result references. */
	var mapTag$1 = '[object Map]';

	/**
	 * The base implementation of `_.isMap` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 */
	function baseIsMap$1(value) {
	  return isObjectLike$1(value) && getTag$2(value) == mapTag$1;
	}

	var _baseIsMap = baseIsMap$1;

	var baseIsMap = _baseIsMap,
	    baseUnary$1 = _baseUnary,
	    nodeUtil$1 = _nodeUtil$1.exports;

	/* Node.js helper references. */
	var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

	/**
	 * Checks if `value` is classified as a `Map` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 * @example
	 *
	 * _.isMap(new Map);
	 * // => true
	 *
	 * _.isMap(new WeakMap);
	 * // => false
	 */
	var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;

	var isMap_1 = isMap$1;

	var getTag$1 = _getTag,
	    isObjectLike = isObjectLike_1;

	/** `Object#toString` result references. */
	var setTag$1 = '[object Set]';

	/**
	 * The base implementation of `_.isSet` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 */
	function baseIsSet$1(value) {
	  return isObjectLike(value) && getTag$1(value) == setTag$1;
	}

	var _baseIsSet = baseIsSet$1;

	var baseIsSet = _baseIsSet,
	    baseUnary = _baseUnary,
	    nodeUtil = _nodeUtil$1.exports;

	/* Node.js helper references. */
	var nodeIsSet = nodeUtil && nodeUtil.isSet;

	/**
	 * Checks if `value` is classified as a `Set` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 * @example
	 *
	 * _.isSet(new Set);
	 * // => true
	 *
	 * _.isSet(new WeakSet);
	 * // => false
	 */
	var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	var isSet_1 = isSet$1;

	var Stack = _Stack,
	    arrayEach$1 = _arrayEach,
	    assignValue = _assignValue,
	    baseAssign = _baseAssign,
	    baseAssignIn = _baseAssignIn,
	    cloneBuffer = _cloneBuffer$1.exports,
	    copyArray = _copyArray,
	    copySymbols = _copySymbols,
	    copySymbolsIn = _copySymbolsIn,
	    getAllKeys = _getAllKeys,
	    getAllKeysIn = _getAllKeysIn,
	    getTag = _getTag,
	    initCloneArray = _initCloneArray,
	    initCloneByTag = _initCloneByTag,
	    initCloneObject = _initCloneObject,
	    isArray$1 = isArray_1,
	    isBuffer = isBuffer$3.exports,
	    isMap = isMap_1,
	    isObject = isObject_1,
	    isSet = isSet_1,
	    keys$1 = keys_1,
	    keysIn = keysIn_1;

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG$1 = 1,
	    CLONE_FLAT_FLAG = 2,
	    CLONE_SYMBOLS_FLAG$1 = 4;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Deep clone
	 *  2 - Flatten inherited properties
	 *  4 - Clone symbols
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone$1(value, bitmask, customizer, key, object, stack) {
	  var result,
	      isDeep = bitmask & CLONE_DEEP_FLAG$1,
	      isFlat = bitmask & CLONE_FLAT_FLAG,
	      isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray$1(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      result = (isFlat || isFunc) ? {} : initCloneObject(value);
	      if (!isDeep) {
	        return isFlat
	          ? copySymbolsIn(value, baseAssignIn(result, value))
	          : copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (isSet(value)) {
	    value.forEach(function(subValue) {
	      result.add(baseClone$1(subValue, bitmask, customizer, subValue, value, stack));
	    });
	  } else if (isMap(value)) {
	    value.forEach(function(subValue, key) {
	      result.set(key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
	    });
	  }

	  var keysFunc = isFull
	    ? (isFlat ? getAllKeysIn : getAllKeys)
	    : (isFlat ? keysIn : keys$1);

	  var props = isArr ? undefined : keysFunc(value);
	  arrayEach$1(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone$1(subValue, bitmask, customizer, key, value, stack));
	  });
	  return result;
	}

	var _baseClone = baseClone$1;

	var baseClone = _baseClone;

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_SYMBOLS_FLAG = 4;

	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */
	function cloneDeep(value) {
	  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	}

	var cloneDeep_1 = cloneDeep;

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */

	function createBaseFor$1(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	var _createBaseFor = createBaseFor$1;

	var createBaseFor = _createBaseFor;

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor$1 = createBaseFor();

	var _baseFor = baseFor$1;

	var baseFor = _baseFor,
	    keys = keys_1;

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn$1(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	var _baseForOwn = baseForOwn$1;

	var isArrayLike = isArrayLike_1;

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach$1(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	var _createBaseEach = createBaseEach$1;

	var baseForOwn = _baseForOwn,
	    createBaseEach = _createBaseEach;

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach$1 = createBaseEach(baseForOwn);

	var _baseEach = baseEach$1;

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */

	function identity$1(value) {
	  return value;
	}

	var identity_1 = identity$1;

	var identity = identity_1;

	/**
	 * Casts `value` to `identity` if it's not a function.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Function} Returns cast function.
	 */
	function castFunction$1(value) {
	  return typeof value == 'function' ? value : identity;
	}

	var _castFunction = castFunction$1;

	var arrayEach = _arrayEach,
	    baseEach = _baseEach,
	    castFunction = _castFunction,
	    isArray = isArray_1;

	/**
	 * Iterates over elements of `collection` and invokes `iteratee` for each element.
	 * The iteratee is invoked with three arguments: (value, index|key, collection).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length"
	 * property are iterated like arrays. To avoid this behavior use `_.forIn`
	 * or `_.forOwn` for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @alias each
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 * @see _.forEachRight
	 * @example
	 *
	 * _.forEach([1, 2], function(value) {
	 *   console.log(value);
	 * });
	 * // => Logs `1` then `2`.
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */
	function forEach(collection, iteratee) {
	  var func = isArray(collection) ? arrayEach : baseEach;
	  return func(collection, castFunction(iteratee));
	}

	var forEach_1 = forEach;

	/**
		@PelagicCreatures/MolaMola

		@author Michael Rhodes
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020-2021 Michael Rhodes
	**/

	const ExtendedValidator = cloneDeep_1(Validator);

	const extensions = {
		extend (name, fn) {
			this[name] = fn;
			return this
		},
		notEmpty (str) {
			return !str.match(/^[\s\t\r\n]*$/)
		},
		len (str, min, max) {
			return this.isLength(str, min, max)
		},
		isUrl (str) {
			return this.isURL(str)
		},
		isIPv6 (str) {
			return this.isIP(str, 6)
		},
		isIPv4 (str) {
			return this.isIP(str, 4)
		},
		notIn (str, values) {
			return !this.isIn(str, values)
		},
		regex (str, pattern, modifiers) {
			str += '';
			if (Object.prototype.toString.call(pattern).slice(8, -1) !== 'RegExp') {
				pattern = new RegExp(pattern, modifiers);
			}
			return str.match(pattern)
		},
		notRegex (str, pattern, modifiers) {
			return !this.regex(str, pattern, modifiers)
		},
		isDecimal (str) {
			return str !== '' && !!str.match(/^(?:-?(?:[0-9]+))?(?:\.[0-9]*)?(?:[eE][+-]?(?:[0-9]+))?$/)
		},
		min (str, val) {
			const number = parseFloat(str);
			return isNaN(number) || number >= val
		},
		max (str, val) {
			const number = parseFloat(str);
			return isNaN(number) || number <= val
		},
		not (str, pattern, modifiers) {
			return this.notRegex(str, pattern, modifiers)
		},
		contains (str, elem) {
			return !!elem && str.includes(elem)
		},
		notContains (str, elem) {
			return !this.contains(str, elem)
		},
		is (str, pattern, modifiers) {
			return this.regex(str, pattern, modifiers)
		},
		notNull (str) {
			return str !== null && str !== undefined
		},
		isPassword (str) {
			return this.notEmpty(str) && this.len(str, 8, 20) && this.is(str, '(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])', '')
		},
		notHTML (str) {
			return !str.match(/<\s*[^>]*>(.*?)<\s*\/[^>]*>/) && !str.match(/<[^>]*>/)
		}
	};

	forEach_1(extensions, (extend, key) => {
		ExtendedValidator[key] = extend;
	});

	/*
		Normalize value from an input.
		returns an array of values for groups and <select multiple>
	*/
	const getRealVal = (element) => {
		let value = '';

		// collection of checkboxes or other inputs results in array of values
		if (element.getAttribute('data-group')) {
			const group = element.closest('.input-group').querySelectorAll(element.getAttribute('data-group'));
			const values = [];
			for (let i = 0; i < group.length; i++) {
				if (getRealVal(group[i])) {
					values.push(getRealVal(group[i]));
				}
				if (element.hasAttribute('multiple')) {
					value = values;
				} else {
					value = values.length ? values[0] : '';
				}
			}
		} else {
			if (element.getAttribute('type') === 'checkbox' || element.getAttribute('type') === 'radio') {
				if (element.checked) {
					const v = element.getAttribute('value');
					if (v) {
						value = v;
					} else {
						value = !!element.checked;
					}
				}
			} else if (element.tagName === 'SELECT') {
				const selected = element.querySelectorAll('option:checked');
				const values = Array.from(selected).map(el => el.value);
				if (element.hasAttribute('multiple')) {
					value = Array.from(values);
				} else {
					value = values[0];
				}
			} else {
				value = element.value;
			}
		}

		return value
	};

	/**
		@PelagicCreatures/MolaMola

		@author Michael Rhodes
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020-2021 Michael Rhodes
	**/

	const validationMessages = {
		isLength: 'Length between %s and %s',
		isEmail: 'Email address',
		notEmpty: 'Required',
		isPassword: 'At least one uppercase, one lowercase, and one number'
	};

	class ValidateHelper extends MolaMolaHelper {
		constructor (form) {
			super(form);

			this.valid = false;
			this.submitter = this.form.element.querySelector(this.form.element.getAttribute('data-submitter'));
			this.uniqueDebounce = null;
			this.lookupDebounce = null;

			this.inputs = Array.from(this.form.element.querySelectorAll('[data-validate]'));

			this.changeHandler = debounce_1((e) => {
				this.handleChange(e);
			}, 500);

			this.initInput(this.form.element);
			if (this.form.element.querySelector('[data-autofocus="true"]')) {
				this.form.element.querySelector('[data-autofocus="true"]').focus();
			}

			this.allInputs = Array.from(this.form.element.querySelectorAll('input, select, textarea, button'));
			for (let i = 0; i < this.allInputs.length; i++) {
				const input = this.allInputs[i];
				input.addEventListener('blur', this.changeHandler, true);
				input.addEventListener('focus', this.changeHandler, true);
				input.addEventListener('keyup', this.changeHandler, true);
				input.addEventListener('input', this.changeHandler, true);
				input.addEventListener('change', this.changeHandler, true);
			}

			this.handleChange();
		}

		destroy () {
			for (let i = 0; i < this.allInputs.length; i++) {
				const input = this.allInputs[i];
				input.removeEventListener('blur', this.changeHandler);
				input.removeEventListener('focus', this.changeHandler);
				input.removeEventListener('keyup', this.changeHandler);
				input.removeEventListener('input', this.changeHandler);
				input.removeEventListener('change', this.changeHandler);
			}
		}

		initInput (element) {
			for (let i = 0; i < this.inputs.length; i++) {
				const input = this.inputs[i];
				input.setAttribute('data-touched', false);
				input.setAttribute('data-last-value', getRealVal(input).toString());
				if (input.getAttribute('checked')) {
					input.checked = true;
				}
			}
		}

		handleChange (e) {
			if (e && e.srcElement && e.srcElement !== window) {
				const elem = e.srcElement;
				utils$1.elementTools.addClass(elem.closest('form'), 'touched');
				const isDirty = elem.getAttribute('data-last-value') !== getRealVal(elem);
				elem.setAttribute('data-touched', true);
				elem.setAttribute('data-dirty', isDirty);
			}
			const errors = this.inputs.map(this.validateField.bind(this));
			Promise.all(errors).then((errors) => {
				let errorCount = 0;
				for (let i = 0; i < errors.length; i++) {
					if (errors[i] && errors[i].length) {
						errorCount += errors[i].length;
					}
				}

				if (errorCount) {
					this.valid = false;
					this.disableSubmit();
				} else {
					this.valid = true;
					this.enableSubmit();
				}
			});
		}

		getMessage (test, opts, overrideMessage) {
			let message = overrideMessage || validationMessages[test];
			if (!message) { // build a message
				message = test;
				if (opts) {
					if (Array.isArray[opts]) {
						for (let i = 0; i < opts.length; i++) {
							message += ' %s';
						}
					}
				}
			}
			if (!opts) {
				return message
			}

			if (!Array.isArray(opts)) {
				const tmp = [];
				for (const prop in opts) {
					tmp.push(opts[prop]);
				}
				opts = tmp;
			}

			let c = 0;
			return message.replace(/%s/g, function () {
				const opt = opts[c++];
				return opt ? opt.toString() : ''
			})
		}

		validateField (element) {
			return new Promise((resolve, reject) => {
				const val = getRealVal(element).toString();
				let validations = {};
				let validationMessage = {};
				let errors = [];

				try {
					validations = JSON.parse(element.getAttribute('data-validate') || '{}');
					validationMessage = JSON.parse(element.getAttribute('data-validate-message') || '{}');
				} catch (e) {
					errors = ['data-validation attribute parse error'];
				}

				if (!validations.notEmpty && !val && !errors.length) {
					return resolve()
				}

				for (const test in validations) {
					const opts = validations[test];
					if (typeof opts === 'boolean') {
						if (!ExtendedValidator[test](val)) {
							errors.push(this.getMessage(test, undefined, validationMessage[test]));
						}
					} else if (Array.isArray(opts)) {
						const myopts = opts.slice();
						myopts.unshift(val);
						if (!ExtendedValidator[test].apply(ExtendedValidator, myopts)) {
							errors.push(this.getMessage(test, opts, validationMessage[test]));
						}
					} else {
						if (!ExtendedValidator[test](val, opts)) {
							errors.push(this.getMessage(test, opts, validationMessage[test]));
						}
					}
				}

				const matchSelector = element.getAttribute('data-match');
				if (matchSelector && getRealVal(this.form.element.querySelector(matchSelector)).toString() !== getRealVal(element).toString()) {
					errors.push('Does not match');
				}

				if (!element.getAttribute('data-lookup-endpoint')) {
					this.showErrors(element, errors);
					return resolve(errors)
				}

				if (val.length > 2 && !errors.length) {
					// show last error if unchanged
					if (element.getAttribute('data-last-lookup-val') === val) {
						if (element.getAttribute('data-last-lookup-result')) {
							errors.push(element.getAttribute('data-last-lookup-result'));
						}
						this.showErrors(element, errors);
						return resolve(errors)
					} else {
						element.setAttribute('data-last-lookup-val', val);
						this.lookup(element.getAttribute('data-lookup-endpoint'), val, element.hasAttribute('data-unique'))
							.then((e) => {
								if (e) {
									element.setAttribute('data-last-lookup-result', e);
									errors.push(e);
								} else {
									element.removeAttribute('data-last-lookup-result');
								}
								this.showErrors(element, errors);
								return resolve(errors)
							});
					}
				}
			})
		}

		showErrors (element, errors) {
			const inputGroup = element.closest('.input-group');
			if (inputGroup) {
				if (errors.length) {
					utils$1.elementTools.removeClass(inputGroup, 'input-ok');
					utils$1.elementTools.addClass(inputGroup, 'error');
					inputGroup.getElementsByClassName('validation-help')[0].innerHTML = errors.join(', ');
				} else {
					utils$1.elementTools.removeClass(inputGroup, 'error');
					utils$1.elementTools.addClass(inputGroup, 'input-ok');
					inputGroup.getElementsByClassName('validation-help')[0].innerHTML = '';
				}
			}
		}

		lookup (endpoint, val, unique) {
			return new Promise((resolve, reject) => {
				const options = {
					method: 'POST',
					dataType: 'json',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						value: val
					})
				};
				try {
					fetch(endpoint, options)
						.then((response) => {
							if (response.status !== 200) {
								const e = new Error(response.statusText);
								e.errorCode = response.status;
								return Promise.reject(e)
							}
							return Promise.resolve(response)
						})
						.then((response) => {
							return response.json()
						})
						.then((data) => {
							let e = null;
							if (unique) {
								e = data.found ? 'Already exists' : null;
							} else {
								e = !data.found ? 'Not Found' : null;
							}
							resolve(e);
						})
						.catch((err, response) => {
							resolve('error checking unique ' + err.message);
						});
				} catch (err) {
					resolve('error checking unique' + err.message);
				}
			})
		}

		preFlight () {}

		disableSubmit () {
			this.submitter.setAttribute('disabled', true);
		}

		enableSubmit () {
			this.submitter.removeAttribute('disabled');
		}
	}

	registerHelperClass('ValidateHelper', ValidateHelper);

	/**
		@PelagicCreatures/MolaMola

		@author Michael Rhodes
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020-2021 Michael Rhodes
	**/

	class MolaMola extends Sargasso {
		constructor (elem, options) {
			super(elem, options);

			this.formId = this.element.getAttribute('id');
			this.endpoint = this.element.getAttribute('action');
			this.method = this.element.getAttribute('method') || 'POST';
			this.formHandlers = [];

			if (this.element.getAttribute('data-helpers')) {
				const helperClasses = this.element.getAttribute('data-helpers').split(/\s*,\s*/);
				for (let i = 0; i < helperClasses.length; i++) {
					try {
						this.registerHelper(registeredHelperClasses[helperClasses[i]]);
					} catch (e) {
						console.log('error instantiating ' + helperClasses[i], e, registeredHelperClasses);
					}
				}
			}
			if (this.element.getAttribute('data-recaptcha')) {
				this.registerHelper(ReCAPTCHAv3Helper);
			}

			if (this.element.getAttribute('data-submitter')) {
				this.registerHelper(SubmitterHelper);
			}

			if (this.element.getAttribute('data-status')) {
				this.registerHelper(StatusHelper);
			}

			if (this.element.querySelectorAll('[data-validate]').length) {
				this.registerHelper(ValidateHelper);
			}
		}

		start () {
			super.start();

			this.submitHandler = (e) => {
				e.preventDefault();

				this.serializeForm();

				Promise.all(this.tellHelpers('preFlight')).then(() => {
					this.submit();
				}).catch((err) => {
					this.tellHelpers('error', [err]);
				});
			};

			this.element.addEventListener('submit', this.submitHandler);

			this.tellHelpers('pose');
		}

		registerHelper (HelperClass) {
			this.formHandlers.push(new HelperClass(this));
		}

		getHelpersForEvent (event, params) {
			const handlers = [];
			for (let i = 0; i < this.formHandlers.length; i++) {
				if (this.formHandlers[i][event]) {
					const p = this.formHandlers[i][event].apply(this.formHandlers[i], params);
					handlers.push(p);
				}
			}
			return handlers
		}

		serializeForm () {
			this.payload = {};
			const elements = this.element.querySelectorAll('[data-payload]');
			for (let i = 0; i < elements.length; i++) {
				const element = elements[i];
				const k = element.getAttribute('name');
				if (k) { // must be named
					const v = getRealVal(element);
					this.payload[k] = v;
				}
			}
		}

		submit () {
			let url = this.endpoint;

			const options = {
				method: this.method,
				dataType: 'json',
				headers: {
					'Content-Type': 'application/json'
				}
			};

			if (this.payload) {
				if (this.method.match(/^(POST|PUT|PATCH)$/i)) {
					options.body = JSON.stringify(this.payload);
				} else {
					url += '?' + Object.keys(this.payload).map((key) => {
						return encodeURIComponent(key) + '=' + encodeURIComponent(this.payload[key])
					}).join('&');
				}
			}

			try {
				fetch(url, options)
					.then((response) => {
						if (response.status !== 200 && response.status !== 422) {
							const e = new Error(response.statusText);
							e.errorCode = response.status;
							return Promise.reject(e)
						}
						return Promise.resolve(response)
					})
					.then((response) => {
						return response.json()
					})
					.then((data) => {
						this.tellHelpers('success', [data]);
					})
					.catch((error, response) => {
						this.tellHelpers('error', [error]);
					});
			} catch (err) {
				this.tellHelpers('error', [err]);
			}
		}

		sleep () {
			this.tellHelpers('destroy');
			this.element.removeEventListener('submit', this.submitHandler);
			super.sleep();
		}

		tellHelpers (event, params) {
			return this.getHelpersForEvent(event, params)
		}
	}

	utils$1.registerSargassoClass('MolaMola', MolaMola);

	/**
		@PelagicCreatures/MolaMola

		@author Michael Rhodes
		@license MIT
		Made in Barbados 🇧🇧 Copyright © 2020-2021 Michael Rhodes

		Form ID: an application unique identifier for the form EG: 'login', 'register'

		<form
			id="login"
			method="GET"
			action="/endpoint"
			data-sargasso-class="MolaMola"
			data-helpers="MyForm"
			data-submitter=".submit-button"
			data-status=".status">
		</form>

		Form helpers are used for handling form events.

		The following events can be handled by the handlers:

		class MyForm extends MolaMolaHelper {
			success (response) {},
			error (statusCode, response) {}
		}
		registerFormHandler('MyForm',MyForm)

		the API for the endpoint:
			200 (ok) & 422 (unprocessable entity) are expected to return json
			Use 422 for server side validation errors, the reponse payload is
			up to implementor and should be handled with a helper success method.

			Other http errors such as 401 (unauthorized) are handed to the helper
			error method
	*/

	const molaMolaUtils = {
		registerHelperClass: registerHelperClass,
		ReCAPTCHAv3Helper: ReCAPTCHAv3Helper,
		SubmitterHelper: SubmitterHelper,
		StatusHelper: StatusHelper,
		ValidateHelper: ValidateHelper
	};

	let loadPage, reloadPage, tropicBird;

	const bootCMS = () => {
		tropicBird = new TropicBird(document.body, {});
		tropicBird.start();

		loadPage = (url) => {
			loadPageHandler(url);
		};

		reloadPage = () => {
			loadPageHandler(document.location.href, true);
		};

		if (api.get('have-account')) {
			utils$1.elementTools.addClass(document.body, 'have-account');
		}
		else {
			utils$1.elementTools.addClass(document.body, 'dont-have-account');
		}

		// Set initial login state css show/hide behavior
		if (api.get('logged-in')) {
			didLogIn();
		}
		else {
			didLogOut();
		}

		window.setTimeout(function () {
			utils$1.elementTools.addClass(document.querySelector('#splash'), 'animate__animated');
			utils$1.elementTools.addClass(document.querySelector('#splash'), 'animate__fadeOut');
		}, 500);

		utils$1.elementTools.on('notifications-button', document.body, 'click', '.show-notifications-button', (e) => {
			if (utils$1.elementTools.hasClass(e.target, 'highlight')) {
				utils$1.elementTools.removeClass(e.target, 'highlight');
				utils$1.elementTools.removeClass(document.querySelector('#user-alerts'), 'open');
			}
			else {
				utils$1.elementTools.addClass(e.target, 'highlight');
				utils$1.elementTools.addClass(document.querySelector('#user-alerts'), 'open');
			}
		});
	};

	// call whenever login occurs
	function didLogIn() {
		checkSubscription();
		api.set('have-account', 1, cookieOptions);
		flashAjaxStatus('success', 'Logged in');
		utils$1.elementTools.removeClass(document.body, 'is-logged-out');
		utils$1.elementTools.addClass(document.body, 'is-logged-in');
		utils$1.elementTools.addClass(document.body, 'have-account');
		document.body.dispatchEvent(new CustomEvent('marlin-login'));
	}

	// call whenever logout occurs
	const didLogOut = () => {
		checkSubscription();
		if (api.get('have-account')) {
			flashAjaxStatus('success', 'Logged out');
		}
		utils$1.elementTools.removeClass(document.body, 'is-logged-in');
		utils$1.elementTools.addClass(document.body, 'is-logged-out');
		api.remove('access_token', cookieOptions);
		document.body.dispatchEvent(new CustomEvent('marlin-logout'));
	};

	const checkSubscription = () => {
		if (api.get('subscriber')) {
			utils$1.elementTools.removeClass(document.body, 'not-subscriber');
			utils$1.elementTools.addClass(document.body, 'is-subscriber');
		}
		else {
			utils$1.elementTools.removeClass(document.body, 'is-subscriber');
			utils$1.elementTools.addClass(document.body, 'not-subscriber');
		}

		if (api.get('admin')) {
			utils$1.elementTools.removeClass(document.body, 'not-admin');
			utils$1.elementTools.addClass(document.body, 'is-admin');
		}
		else {
			utils$1.elementTools.removeClass(document.body, 'is-admin');
			utils$1.elementTools.addClass(document.body, 'not-admin');
		}

		if (api.get('superuser')) {
			utils$1.elementTools.removeClass(document.body, 'not-superuser');
			utils$1.elementTools.addClass(document.body, 'is-superuser');
		}
		else {
			utils$1.elementTools.removeClass(document.body, 'is-superuser');
			utils$1.elementTools.addClass(document.body, 'not-superuser');
		}
	};

	// call to show the Material Design "snackbar" for user notifications
	const flashAjaxStatus = (level, message) => {
		tropicBird.pushSnackBar(level, message);
	};

	var utils = {
		__proto__: null,
		bootCMS: bootCMS,
		didLogIn: didLogIn,
		didLogOut: didLogOut,
		checkSubscription: checkSubscription,
		flashAjaxStatus: flashAjaxStatus,
		get loadPage () { return loadPage; },
		get reloadPage () { return reloadPage; },
		get tropicBird () { return tropicBird; }
	};

	class ajaxButton extends Sargasso {
		constructor (elem, options) {
			super(elem, options);

			this.endpoint = this.element.getAttribute('data-endpoint');
			this.redirect = this.element.getAttribute('data-redirect') ? this.element.getAttribute('data-redirect') : '/users/home';
			this.method = this.element.getAttribute('data-method') ? this.element.getAttribute('data-method') : 'POST';
			this.confirm = this.element.getAttribute('data-confirm') ? this.element.getAttribute('data-confirm') : false;
			this.confirmPrompt = this.element.getAttribute('data-confirm-prompt') ? this.element.getAttribute('data-confirm-prompt') : 'Are you sure?';
		}

		start () {
			super.start();
			this.on('click', '', async (e) => {
				e.preventDefault();
				if (this.confirm) {
					tropicBird.dialog('#confirm-dialog', 'Please Confirm', this.confirmPrompt, true).then(async (action) => {
						if (action === 'accept') {
							await this.doIt();
						}
					});
				} else {
					await this.doIt();
				}
			});
		};

		sleep () {
			this.off('click', '');
			super.sleep();
		};

		async doIt () {
			try {
				const response = await fetch(this.endpoint, {
					method: this.method,
					headers: {
						'Content-Type': 'application/json',
						'Sargasso-Hijax': 'true'
					}
				});

				const data = await response.json();
				const flashLevel = response.headers['Sargasso-Flash-Level'] ? response.headers['Sargasso-Flash-Level'] : data.flashLevel;
				const flashMessage = response.headers['Sargasso-Flash-Message'] ? response.headers['Sargasso-Flash-Message'] : data.flashMessage;
				const loggedIn = response.headers['Sargasso-Did-Login'] ? response.headers['Sargasso-Did-Login'] : data.didLogin;
				const loggedOut = response.headers['Sargasso-Did-Logout'] ? response.headers['Sargasso-Did-Logout'] : data.didLogout;

				if (loggedIn) {
					didLogIn();
				}

				if (loggedOut) {
					didLogOut();
				}

				if (data.status === 'ok') {
					flashAjaxStatus('success', flashMessage);
					if (this.redirect === location.pathname) {
						reloadPage();
					} else {
						loadPage(this.redirect);
					}
				} else {
					flashAjaxStatus(flashLevel, flashMessage);
				}
			} catch (e) {
				const message = 'error';
				flashAjaxStatus('error', message);
			}
		}
	}

	utils$1.registerSargassoClass('ajaxButton', ajaxButton);

	class paginationController extends Sargasso {
		constructor (elem, options) {
			super(elem, options);
		}

		start () {
			let index;
			const pages = this.element.querySelector('.pagination-page');
			const selipsis = this.element.querySelector('.pagination-elipsis-start');
			const eelipsis = this.element.querySelector('.pagination-elipsis-end');
			if (pages.length > 9) {
				for (let i = 0; i < pages.length; i++) {
					if (utils$1.elementTools.hasClass(pages[i], 'active')) {
						index = i;
					}
				}
				let start = index - 4;
				let end = index + 4;

				if (start < 0) {
					end = -start + end;
					start = 0;
				}
				if (end > pages.length) {
					start = start + pages.length - end;
					end = pages.length;
				}
				for (let i = 0; i < pages.length; i++) {
					if (i < start || i > end) {
						pages[i].remove();
					}
				}
				if (start === 0) {
					selipsis.remove();
				}
				if (end + 2 > pages.length) {
					eelipsis.remove();
				}
			} else {
				selipsis.remove();
				eelipsis.remove();
			}
		};
	}

	utils$1.registerSargassoClass('paginationController', paginationController);

	class adminController extends Sargasso {
		constructor (elem, options) {
			super(elem, options);
			this.mountpoint = this.element.getAttribute('data-mountpoint');
			this.model = this.element.getAttribute('data-model');
			this.id = this.element.getAttribute('data-id');
			this.redirect = this.element.getAttribute('data-redirect');
		}

		start () {
			super.start();

			this.on('click', '.add-button', (e, elem) => {
				e.preventDefault();
				const target = elem.getAttribute('data-target');
				if (target) {
					const belongsTo = elem.getAttribute('data-belongs-to');
					const fk = elem.getAttribute('data-fk');
					loadPage(this.mountpoint + '/' + target + '/create?fk=' + fk + '&belongs-to=' + belongsTo);
				} else {
					loadPage(this.mountpoint + '/' + this.model + '/create');
				}
			});

			this.on('click', '.edit-button', (e, elem) => {
				e.preventDefault();
				loadPage(this.mountpoint + '/' + this.model + '/' + this.id + '/edit');
			});

			this.on('click', '.delete-button', (e, elem) => {
				e.preventDefault();
				tropicBird.dialog('#confirm-dialog', 'Delete this row?', this.confirmPrompt, true).then((action) => {
					if (action === 'accept') {
						const endpoint = this.mountpoint + '/' + this.model + '/' + this.id;
						this.API('DELETE', endpoint);
					}
				});
			});

			this.on('click', '.search-button', (e, elem) => {
				e.preventDefault();
				const q = elem.closest('.input-group').find('input[name="q"]').val();
				const prop = elem.closest('.input-group').find('select[name="property"]').val();
				if (q && prop) {
					loadPage(location.pathname + '?q=' + encodeURIComponent(q) + '&property=' + encodeURIComponent(prop));
				}
			});

			this.on('mouseover', '.select-row', (e, elem) => {
				utils$1.elementTools.addClass(elem, 'hovering');
			});

			this.on('mouseout', '.select-row', (e, elem) => {
				utils$1.elementTools.removeClass(elem, 'hovering');
			});

			this.on('click', '.select-row', (e, elem) => {
				e.preventDefault();
				var id = parseInt(elem.getAttribute('data-row'));
				loadPage(this.mountpoint + '/' + this.model + '/' + id);
			});
		}

		sleep () {
			this.off('click', '.flextable-row');
			this.off('click', '.add-button');
			this.off('click', '.edit-button');
			this.off('click', '.delete-button');
			this.off('click', '.search-button');
			this.off('mouseover', '.select-row');
			this.off('mouseout', '.select-row');
			this.off('click', '.select-row');
			super.sleep();
		}

		API (method, endpoint, data) {
			fetch(endpoint, {
				method: method,
				body: JSON.stringify(data),
				headers: {
					'Content-Type': 'application/json',
					'Sargasso-Hijax': 'true'
				}
			}).then((response) => {
				return response.json()
			}).then((data) => {
				var flashLevel = data.flashLevel;
				var flashMessage = data.flashMessage;
				if (data.status === 'ok') {
					flashAjaxStatus('success', flashMessage);
					let redir = this.redirect;
					if (data.id && !redir.match(/\/\d+$/)) {
						redir += '/' + data.id;
					}
					loadPage(redir);
				} else {
					let message;
					if (data.errors) {
						for (var i = 0; i < data.errors.length; i++) {
							if (message) {
								message += ', ';
							}
							message += data.errors[i];
						}
					} else {
						message = data.status;
					}
					this.element.querySelector('.ajax-errors').innerHTML = '<div class="ajax-message ajax-message-' + flashLevel + '"><i class="material-icons">info</i> ' + flashMessage + '</div>';
				}
			}).catch((e) => {
				var message = 'error';
				this.element.querySelector('.ajax-errors').innerHTML = '<div class="ajax-message ajax-message-error"><i class="material-icons">error</i> ' + message + '</div>';
			});
		}
	}

	utils$1.registerSargassoClass('adminController', adminController);

	class uploadableImage extends Sargasso {
		constructor (elem, options) {
			super(elem, options);
			this.columnName = this.element.getAttribute('data-column-name');
			this.maxHeight = this.element.getAttribute('data-max-height') ? this.element.getAttribute('data-max-height') : 200;
			this.maxWidth = this.element.getAttribute('data-max-width') ? this.element.getAttribute('data-max-width') : 200;
			this.sendResized = this.element.getAttribute('data-send-resized') === 'true';
			this.input = document.querySelector(this.element.getAttribute('data-target'));

			this.previewElement = document.querySelector('[data-name="' + this.columnName + '-preview"]');
			this.widthElement = document.querySelector('[data-name="' + this.columnName + '-width"]');
			this.heightElement = document.querySelector('[data-name="' + this.columnName + '-height"]');
			this.metadata = this.element.closest('.input-group').querySelector('.metadata');
		}

		start () {
			super.start();
			this.on('change', '', (e) => {
				this.processImage(e.target.files[0]);
			});
		};

		sleep () {
			this.off('change', '');
			super.sleep();
		};

		processImage (file) {
			const reader = new FileReader();

			// make a thumbnail once data is loaded
			reader.onload = (readerEvent) => {
				const image = new Image();
				image.onload = (imageEvent) => {
					const canvas = document.createElement('canvas');
					let w = image.width;
					let h = image.height;
					if (w > h) {
						if (w > this.maxWidth) {
							h *= this.maxWidth / w;
							w = this.maxWidth;
						}
					} else {
						if (h > this.maxHeight) {
							w *= this.maxHeight / h;
							h = this.maxHeight;
						}
					}
					canvas.width = w;
					canvas.height = h;
					canvas.getContext('2d').drawImage(image, 0, 0, w, h);
					const dataURL = canvas.toDataURL('image/jpeg', 1.0);
					this.previewElement.innerHTML = '<img src="' + dataURL + '">';
					this.metadata.innerHTML = '<strong><em>New image</em></strong> w: <strong>' + image.naturalWidth + '</strong> h: <strong>' + image.naturalHeight + '</strong>';

					if (this.sendResized) {
						this.input.value = dataURL;
						this.widthElement.value = w;
						this.heightElement.value = h;
					} else {
						this.widthElement.value = image.naturalWidth;
						this.heightElement.value = image.naturalHeight;
					}
				};

				// pipe the file data into the image
				image.src = readerEvent.target.result;

				if (!this.sendResized) {
					this.input.value = readerEvent.target.result;
				}
			};

			// start reading the file
			reader.readAsDataURL(file);
		}
	}

	utils$1.registerSargassoClass('uploadableImage', uploadableImage);

	class AdminHandler extends MolaMolaHelper {
		pose () {
			this.chipHandler = function (e) {
				if (e.target === this) {
					const selected = [];
					const sel = this.closest('.mdc-chip-set').querySelectorAll('.mdc-chip--selected');
					Array.from(sel).forEach(function (chip) {
						selected.push(chip.getAttribute('data-id'));
					});
					this.closest('.mdc-chip-set').querySelector('input').value = selected.join(',');
				}
			};

			const chips = this.form.element.getElementsByClassName('mdc-chip');
			Array.from(chips).forEach((chip) => {
				chip.addEventListener('MDCChip:selection', this.chipHandler, false);
			});
		}

		preFlight () {
			// special case - always send checkbox value for boolean switch
			const checkboxes = this.form.element.getElementsByClassName('mdc-switch__native-control');
			for (let i = 0; i < checkboxes.length; i++) {
				const cb = checkboxes[i];
				this.form.payload[cb.getAttribute('name')] = !!cb.checked; // sets data.table.column to true or false
			}

			const json = {};
			for (const k in this.form.payload) {
				const tableColumn = k.match(/^([^\[]+)\[([^\]]+)\]/);
				if (!tableColumn) {
					json[k] = this.form.payload[k];
				} else {
					if (!json[tableColumn[1]]) {
						json[tableColumn[1]] = {};
					}
					json[tableColumn[1]][tableColumn[2]] = this.form.payload[k];
				}
			}
			this.form.payload = json;
		}

		destroy () {
			const chips = this.form.element.getElementsByClassName('mdc-chip');
			Array.from(chips).forEach((chip) => {
				chip.removeEventListener('MDCChip:selection', this.chipHandler);
			});
			super.destroy();
		}
	}

	molaMolaUtils.registerHelperClass('AdminHandler', AdminHandler);

	class BoilerplateHandler extends MolaMolaHelper {
		// TODO MDC TextInput floating label borked on autofill, revisit once they fix it
		pose () {
			setTimeout(() => {
				const borked = document.querySelectorAll('input:-webkit-autofill');
				if (borked && borked.length) {
					Array.from(borked).forEach((element) => {
						const mdcElement = element.closest('.mdc-text-field');
						if (mdcElement) {
							const textField = utils$1.elementTools.getMetaData(mdcElement, 'MDCTextField');
							if (textField) {
								textField.getLabelAdapterMethods_().floatLabel(true);
							}
						}
					});
				}
			}, 500);
		}

		preFlight () {
			const json = {};
			for (const k in this.form.payload) {
				const tableColumn = k.match(/^([^\[]+)\[([^\]]+)\]/);
				if (!tableColumn) {
					json[k] = this.form.payload[k];
				} else {
					if (!json[tableColumn[1]]) {
						json[tableColumn[1]] = {};
					}
					json[tableColumn[1]][tableColumn[2]] = this.form.payload[k];
				}
			}
			this.form.payload = json;
		}

		success (data) {
			if (data.didLogin) {
				didLogIn();
				if (!data.redirect) {
					data.redirect = '/users/home';
				}
			}
			if (data.didLogout) {
				didLogOut();
				if (!data.redirect) {
					data.redirect = '/users/login';
				}
			}
			if (data.message) {
				tropicBird.pushSnackBar('info', data.message);
			}
			if (data.errors) {
				for (let i = 0; i < data.errors.length; i++) {
					tropicBird.pushSnackBar(data['error-level'] || 'info', data.errors[i]);
				}
			}

			if (!data.redirect && this.form.element.getAttribute('data-redirect')) {
				data.redirect = this.form.element.getAttribute('data-redirect');
			}

			if (data.status === 'ok' && data.redirect) {
				loadPage(data.redirect);
			}
		}

		error (err) {
			tropicBird.pushSnackBar('error', err.message);
		}
	}

	molaMolaUtils.registerHelperClass('BoilerplateHandler', BoilerplateHandler);

	/*
		Import modules here as needed.

		Exports here are exposed on the global namespace as 'App' by webpack.

		EG.
			App.CMSUtils

	*/

	// expose these so huge markdown editor can be dynamically loaded
	window.Sargasso = Sargasso;
	window.registerSargassoClass = utils$1.registerSargassoClass;
	window.elementTools = utils$1.elementTools;

	exports.CMSUtils = utils;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

})({});
